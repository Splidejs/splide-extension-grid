{"version":3,"file":"splide-extension-grid.min.js","sources":["../../src/splide/dist/js/splide.esm.js","../../src/splide/src/js/utils/array/empty/empty.ts","../../src/splide/src/js/utils/type/type.ts","../../src/splide/src/js/utils/array/toArray/toArray.ts","../../src/splide/src/js/utils/array/forEach/forEach.ts","../../src/splide/src/js/utils/array/push/push.ts","../../src/splide/src/js/utils/array/index.ts","../../src/splide/src/js/utils/arrayLike/slice/slice.ts","../../src/splide/src/js/utils/arrayLike/find/find.ts","../../src/splide/src/js/utils/dom/toggleClass/toggleClass.ts","../../src/splide/src/js/utils/dom/addClass/addClass.ts","../../src/splide/src/js/utils/dom/append/append.ts","../../src/splide/src/js/utils/dom/matches/matches.ts","../../src/splide/src/js/utils/dom/children/children.ts","../../src/splide/src/js/utils/dom/child/child.ts","../../src/splide/src/js/utils/object/forOwn/forOwn.ts","../../src/splide/src/js/utils/object/assign/assign.ts","../../src/splide/src/js/utils/dom/removeAttribute/removeAttribute.ts","../../src/splide/src/js/utils/dom/setAttribute/setAttribute.ts","../../src/splide/src/js/utils/dom/create/create.ts","../../src/splide/src/js/utils/dom/hasClass/hasClass.ts","../../src/splide/src/js/utils/dom/remove/remove.ts","../../src/splide/src/js/utils/dom/queryAll/queryAll.ts","../../src/splide/src/js/utils/dom/removeClass/removeClass.ts","../../src/splide/src/js/utils/dom/unit/unit.ts","../../src/splide/src/js/constants/project.ts","../../src/splide/src/js/utils/error/assert/assert.ts","../../src/splide/src/js/utils/math/index.ts","../../src/splide/src/js/utils/string/pad/pad.ts","../../src/js/src/js/constants/classes.ts","../../src/js/src/js/constants/defaults.ts","../../src/js/src/js/extensions/Grid/Dimension.ts","../../src/splide/src/js/components/Style/Style.ts","../../src/js/src/js/extensions/Grid/Layout.ts","../../src/js/src/js/extensions/Grid/Grid.ts","../../src/js/src/js/build/default.ts"],"sourcesContent":["/*!\n * Splide.js\n * Version  : 3.0.0\n * License  : MIT\n * Copyright: 2021 Naotoshi Fujita\n */\nconst PROJECT_CODE = \"splide\";\nconst DATA_ATTRIBUTE = `data-${PROJECT_CODE}`;\n\nconst CREATED = 1;\nconst MOUNTED = 2;\nconst IDLE = 3;\nconst MOVING = 4;\nconst DESTROYED = 5;\nconst STATES = {\n  CREATED,\n  MOUNTED,\n  IDLE,\n  MOVING,\n  DESTROYED\n};\n\nconst DEFAULT_EVENT_PRIORITY = 10;\nconst DEFAULT_USER_EVENT_PRIORITY = 20;\n\nfunction empty(array) {\n  array.length = 0;\n}\n\nfunction isObject(subject) {\n  return !isNull(subject) && typeof subject === \"object\";\n}\nfunction isArray(subject) {\n  return Array.isArray(subject);\n}\nfunction isFunction(subject) {\n  return typeof subject === \"function\";\n}\nfunction isString(subject) {\n  return typeof subject === \"string\";\n}\nfunction isUndefined(subject) {\n  return typeof subject === \"undefined\";\n}\nfunction isNull(subject) {\n  return subject === null;\n}\nfunction isHTMLElement(subject) {\n  return subject instanceof HTMLElement;\n}\nfunction isHTMLButtonElement(subject) {\n  return subject instanceof HTMLButtonElement;\n}\n\nfunction toArray(value) {\n  return isArray(value) ? value : [value];\n}\n\nfunction forEach(values, iteratee) {\n  toArray(values).forEach(iteratee);\n}\n\nfunction includes(array, value) {\n  return array.indexOf(value) > -1;\n}\n\nfunction push(array, items) {\n  array.push(...toArray(items));\n  return array;\n}\n\nconst arrayProto = Array.prototype;\n\nfunction slice(arrayLike, start, end) {\n  return arrayProto.slice.call(arrayLike, start, end);\n}\n\nfunction find(arrayLike, predicate) {\n  return slice(arrayLike).filter(predicate)[0];\n}\n\nfunction toggleClass(elm, classes, add) {\n  if (elm) {\n    forEach(classes, (name) => {\n      if (name) {\n        elm.classList[add ? \"add\" : \"remove\"](name);\n      }\n    });\n  }\n}\n\nfunction addClass(elm, classes) {\n  toggleClass(elm, classes, true);\n}\n\nfunction append(parent, children) {\n  forEach(children, parent.appendChild.bind(parent));\n}\n\nfunction before(nodes, ref) {\n  forEach(nodes, (node) => {\n    const parent = ref.parentNode;\n    if (parent) {\n      parent.insertBefore(node, ref);\n    }\n  });\n}\n\nfunction matches(elm, selector) {\n  return (elm[\"msMatchesSelector\"] || elm.matches).call(elm, selector);\n}\n\nfunction children(parent, selector) {\n  return parent ? slice(parent.children).filter((child) => matches(child, selector)) : [];\n}\n\nfunction child(parent, selector) {\n  return selector ? children(parent, selector)[0] : parent.firstElementChild;\n}\n\nfunction forOwn(object, iteratee) {\n  if (object) {\n    const keys = Object.keys(object);\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      if (key !== \"__proto__\") {\n        if (iteratee(object[key], key) === false) {\n          break;\n        }\n      }\n    }\n  }\n  return object;\n}\n\nfunction assign(object, ...sources) {\n  sources.forEach((source) => {\n    forOwn(source, (value, key) => {\n      object[key] = source[key];\n    });\n  });\n  return object;\n}\n\nfunction merge(object, source) {\n  forOwn(source, (value, key) => {\n    if (isArray(value)) {\n      object[key] = value.slice();\n    } else if (isObject(value)) {\n      object[key] = merge(isObject(object[key]) ? object[key] : {}, value);\n    } else {\n      object[key] = value;\n    }\n  });\n  return object;\n}\n\nfunction removeAttribute(elm, attrs) {\n  if (elm) {\n    forEach(attrs, (attr) => {\n      elm.removeAttribute(attr);\n    });\n  }\n}\n\nfunction setAttribute(elm, attrs, value) {\n  if (isObject(attrs)) {\n    forOwn(attrs, (value2, name) => {\n      setAttribute(elm, name, value2);\n    });\n  } else {\n    isNull(value) ? removeAttribute(elm, attrs) : elm.setAttribute(attrs, String(value));\n  }\n}\n\nfunction create(tag, attrs, parent) {\n  const elm = document.createElement(tag);\n  if (attrs) {\n    if (isString(attrs) || isArray(attrs)) {\n      addClass(elm, attrs);\n    } else {\n      setAttribute(elm, attrs);\n    }\n  }\n  if (parent) {\n    append(parent, elm);\n  }\n  return elm;\n}\n\nfunction style(elm, styles) {\n  if (isString(styles)) {\n    return getComputedStyle(elm)[styles];\n  }\n  forOwn(styles, (value, key) => {\n    if (!isNull(value)) {\n      elm.style[key] = `${value}`;\n    }\n  });\n}\n\nfunction display(elm, display2) {\n  style(elm, { display: display2 });\n}\n\nfunction getAttribute(elm, attr) {\n  return elm.getAttribute(attr);\n}\n\nfunction hasClass(elm, className) {\n  return elm && elm.classList.contains(className);\n}\n\nfunction rect(target) {\n  return target.getBoundingClientRect();\n}\n\nfunction remove(nodes) {\n  forEach(nodes, (node) => {\n    if (node && node.parentNode) {\n      node.parentNode.removeChild(node);\n    }\n  });\n}\n\nfunction measure(parent, value) {\n  if (isString(value)) {\n    const div = create(\"div\", { style: `width: ${value}; position: absolute;` }, parent);\n    value = rect(div).width;\n    remove(div);\n  }\n  return value;\n}\n\nfunction parseHtml(html) {\n  return child(new DOMParser().parseFromString(html, \"text/html\").body);\n}\n\nfunction prevent(e, stopPropagation) {\n  e.preventDefault();\n  if (stopPropagation) {\n    e.stopPropagation();\n    e.stopImmediatePropagation();\n  }\n}\n\nfunction query(parent, selector) {\n  return parent && parent.querySelector(selector);\n}\n\nfunction queryAll(parent, selector) {\n  return slice(parent.querySelectorAll(selector));\n}\n\nfunction removeClass(elm, classes) {\n  toggleClass(elm, classes, false);\n}\n\nfunction unit(value) {\n  return isString(value) ? value : value ? `${value}px` : \"\";\n}\n\nfunction assert(condition, message = \"\") {\n  if (!condition) {\n    throw new Error(`[${PROJECT_CODE}] ${message}`);\n  }\n}\n\nfunction nextTick(callback) {\n  setTimeout(callback);\n}\n\nconst noop = () => {\n};\n\nfunction raf(func) {\n  return requestAnimationFrame(func);\n}\n\nfunction approximatelyEqual(x, y, epsilon) {\n  return Math.abs(x - y) < epsilon;\n}\n\nfunction between(number, minOrMax, maxOrMin, exclusive) {\n  const min = Math.min(minOrMax, maxOrMin);\n  const max = Math.max(minOrMax, maxOrMin);\n  return exclusive ? min < number && number < max : min <= number && number <= max;\n}\n\nconst { max: max$1, min: min$1 } = Math;\nfunction clamp(number, x, y) {\n  const minimum = min$1(x, y);\n  const maximum = max$1(x, y);\n  return min$1(max$1(minimum, number), maximum);\n}\n\nfunction sign(x) {\n  return +(x > 0) - +(x < 0);\n}\n\nconst { min, max, floor, ceil, abs, round } = Math;\n\nfunction format(string, replacements) {\n  forEach(replacements, (replacement) => {\n    string = string.replace(\"%s\", `${replacement}`);\n  });\n  return string;\n}\n\nfunction pad(number) {\n  return number < 10 ? `0${number}` : `${number}`;\n}\n\nconst ids = {};\nfunction uniqueId(prefix) {\n  return `${prefix}${pad(ids[prefix] = (ids[prefix] || 0) + 1)}`;\n}\n\nfunction EventBus() {\n  let handlers = {};\n  function on(events, callback, key, priority = DEFAULT_EVENT_PRIORITY) {\n    forEachEvent(events, (event, namespace) => {\n      handlers[event] = handlers[event] || [];\n      push(handlers[event], {\n        _event: event,\n        _callback: callback,\n        _namespace: namespace,\n        _priority: priority,\n        _key: key\n      }).sort((handler1, handler2) => handler1._priority - handler2._priority);\n    });\n  }\n  function off(events, key) {\n    forEachEvent(events, (event, namespace) => {\n      const eventHandlers = handlers[event];\n      handlers[event] = eventHandlers && eventHandlers.filter((handler) => {\n        return handler._key ? handler._key !== key : handler._namespace !== namespace;\n      });\n    });\n  }\n  function offBy(key) {\n    forOwn(handlers, (eventHandlers, event) => {\n      off(event, key);\n    });\n  }\n  function emit(event) {\n    (handlers[event] || []).forEach((handler) => {\n      handler._callback.apply(handler, slice(arguments, 1));\n    });\n  }\n  function destroy() {\n    handlers = {};\n  }\n  function forEachEvent(events, iteratee) {\n    toArray(events).join(\" \").split(\" \").forEach((eventNS) => {\n      const fragments = eventNS.split(\".\");\n      iteratee(fragments[0], fragments[1]);\n    });\n  }\n  return {\n    on,\n    off,\n    offBy,\n    emit,\n    destroy\n  };\n}\n\nconst EVENT_MOUNTED = \"mounted\";\nconst EVENT_READY = \"ready\";\nconst EVENT_MOVE = \"move\";\nconst EVENT_MOVED = \"moved\";\nconst EVENT_CLICK = \"click\";\nconst EVENT_ACTIVE = \"active\";\nconst EVENT_INACTIVE = \"inactive\";\nconst EVENT_VISIBLE = \"visible\";\nconst EVENT_HIDDEN = \"hidden\";\nconst EVENT_SLIDE_KEYDOWN = \"slide:keydown\";\nconst EVENT_REFRESH = \"refresh\";\nconst EVENT_UPDATED = \"undated\";\nconst EVENT_RESIZE = \"resize\";\nconst EVENT_RESIZED = \"resized\";\nconst EVENT_DRAG = \"drag\";\nconst EVENT_DRAGGING = \"dragging\";\nconst EVENT_DRAGGED = \"dragged\";\nconst EVENT_SCROLL = \"scroll\";\nconst EVENT_SCROLLED = \"scrolled\";\nconst EVENT_DESTROY = \"destroy\";\nconst EVENT_ARROWS_MOUNTED = \"arrows:mounted\";\nconst EVENT_ARROWS_UPDATED = \"arrows:updated\";\nconst EVENT_PAGINATION_MOUNTED = \"pagination:mounted\";\nconst EVENT_PAGINATION_PAGE = \"pagination:page\";\nconst EVENT_PAGINATION_UPDATED = \"pagination:updated\";\nconst EVENT_NAVIGATION_MOUNTED = \"navigation:mounted\";\nconst EVENT_AUTOPLAY_PLAY = \"autoplay:play\";\nconst EVENT_AUTOPLAY_PLAYING = \"autoplay:playing\";\nconst EVENT_AUTOPLAY_PAUSE = \"autoplay:pause\";\nconst EVENT_LAZYLOAD_LOADED = \"lazyload:loaded\";\n\nfunction EventInterface(Splide2) {\n  const { event } = Splide2;\n  const key = {};\n  let listeners = [];\n  function on(events, callback, priority) {\n    event.on(events, callback, key, priority);\n  }\n  function off(events) {\n    event.off(events, key);\n  }\n  function bind(targets, events, callback, options) {\n    forEachEvent(targets, events, (target, event2) => {\n      listeners.push([target, event2, callback, options]);\n      target.addEventListener(event2, callback, options);\n    });\n  }\n  function unbind(targets, events) {\n    forEachEvent(targets, events, (target, event2) => {\n      listeners = listeners.filter((listener) => {\n        if (listener[0] === target && listener[1] === event2) {\n          target.removeEventListener(event2, listener[2], listener[3]);\n          return false;\n        }\n        return true;\n      });\n    });\n  }\n  function forEachEvent(targets, events, iteratee) {\n    forEach(targets, (target) => {\n      if (target) {\n        events.split(\" \").forEach(iteratee.bind(null, target));\n      }\n    });\n  }\n  function destroy() {\n    listeners = listeners.filter((data) => unbind(data[0], data[1]));\n    event.offBy(key);\n  }\n  event.on(EVENT_DESTROY, destroy, key);\n  return {\n    on,\n    off,\n    emit: event.emit,\n    bind,\n    unbind,\n    destroy\n  };\n}\n\nfunction RequestInterval(interval, onInterval, onUpdate, limit) {\n  const { now } = Date;\n  let startTime;\n  let rate = 0;\n  let id;\n  let paused = true;\n  let count = 0;\n  function update() {\n    if (!paused) {\n      const elapsed = now() - startTime;\n      if (elapsed >= interval) {\n        rate = 1;\n        startTime = now();\n      } else {\n        rate = elapsed / interval;\n      }\n      if (onUpdate) {\n        onUpdate(rate);\n      }\n      if (rate === 1) {\n        onInterval();\n        if (limit && ++count >= limit) {\n          pause();\n          return;\n        }\n      }\n      raf(update);\n    }\n  }\n  function start(resume) {\n    !resume && cancel();\n    startTime = now() - (resume ? rate * interval : 0);\n    paused = false;\n    raf(update);\n  }\n  function pause() {\n    paused = true;\n  }\n  function rewind() {\n    startTime = now();\n    rate = 0;\n    if (onUpdate) {\n      onUpdate(rate);\n    }\n  }\n  function cancel() {\n    cancelAnimationFrame(id);\n    rate = 0;\n    id = 0;\n    paused = true;\n  }\n  function isPaused() {\n    return paused;\n  }\n  return {\n    start,\n    rewind,\n    pause,\n    cancel,\n    isPaused\n  };\n}\n\nfunction State(initialState) {\n  let state = initialState;\n  function set(value) {\n    state = value;\n  }\n  function is(states) {\n    return includes(toArray(states), state);\n  }\n  return { set, is };\n}\n\nfunction Throttle(func, duration) {\n  let interval;\n  function throttled() {\n    if (!interval) {\n      interval = RequestInterval(duration || 0, () => {\n        func.apply(this, arguments);\n        interval = null;\n      }, null, 1);\n      interval.start();\n    }\n  }\n  return throttled;\n}\n\nfunction Options(Splide2, Components2, options) {\n  const throttledObserve = Throttle(observe);\n  let initialOptions;\n  let points;\n  let currPoint;\n  function setup() {\n    try {\n      merge(options, JSON.parse(getAttribute(Splide2.root, DATA_ATTRIBUTE)));\n    } catch (e) {\n      assert(false, e.message);\n    }\n    initialOptions = merge({}, options);\n  }\n  function mount() {\n    const { breakpoints } = options;\n    if (breakpoints) {\n      points = Object.keys(breakpoints).sort((n, m) => +n - +m).map((point) => [\n        point,\n        matchMedia(`(${options.mediaQuery || \"max\"}-width:${point}px)`)\n      ]);\n      addEventListener(\"resize\", throttledObserve);\n      observe();\n    }\n  }\n  function destroy(completely) {\n    if (completely) {\n      removeEventListener(\"resize\", throttledObserve);\n    }\n  }\n  function observe() {\n    const item = find(points, (item2) => item2[1].matches) || [];\n    if (item[0] !== currPoint) {\n      onMatch(currPoint = item[0]);\n    }\n  }\n  function onMatch(point) {\n    const newOptions = options.breakpoints[point] || initialOptions;\n    if (newOptions.destroy) {\n      Splide2.options = initialOptions;\n      Splide2.destroy(newOptions.destroy === \"completely\");\n    } else {\n      if (Splide2.state.is(DESTROYED)) {\n        destroy(true);\n        Splide2.mount();\n      }\n      Splide2.options = newOptions;\n    }\n  }\n  return {\n    setup,\n    mount,\n    destroy\n  };\n}\n\nconst RTL = \"rtl\";\nconst TTB = \"ttb\";\n\nconst ORIENTATION_MAP = {\n  marginRight: [\"marginBottom\", \"marginLeft\"],\n  width: [\"height\"],\n  autoWidth: [\"autoHeight\"],\n  fixedWidth: [\"fixedHeight\"],\n  paddingLeft: [\"paddingTop\", \"paddingRight\"],\n  paddingRight: [\"paddingBottom\", \"paddingLeft\"],\n  left: [\"top\", \"right\"],\n  right: [\"bottom\", \"left\"],\n  x: [\"y\"],\n  X: [\"Y\"],\n  Y: [\"X\"],\n  ArrowLeft: [\"ArrowUp\", \"ArrowRight\"],\n  ArrowRight: [\"ArrowDown\", \"ArrowLeft\"]\n};\nfunction Direction(Splide2, Components2, options) {\n  function resolve(prop, axisOnly) {\n    const { direction } = options;\n    const index = direction === RTL && !axisOnly ? 1 : direction === TTB ? 0 : -1;\n    return ORIENTATION_MAP[prop][index] || prop;\n  }\n  function orient(value) {\n    return value * (options.direction === RTL ? 1 : -1);\n  }\n  return {\n    resolve,\n    orient\n  };\n}\n\nconst CLASS_ROOT = PROJECT_CODE;\nconst CLASS_SLIDER = `${PROJECT_CODE}__slider`;\nconst CLASS_TRACK = `${PROJECT_CODE}__track`;\nconst CLASS_LIST = `${PROJECT_CODE}__list`;\nconst CLASS_SLIDE = `${PROJECT_CODE}__slide`;\nconst CLASS_CLONE = `${CLASS_SLIDE}--clone`;\nconst CLASS_CONTAINER = `${CLASS_SLIDE}__container`;\nconst CLASS_ARROWS = `${PROJECT_CODE}__arrows`;\nconst CLASS_ARROW = `${PROJECT_CODE}__arrow`;\nconst CLASS_ARROW_PREV = `${CLASS_ARROW}--prev`;\nconst CLASS_ARROW_NEXT = `${CLASS_ARROW}--next`;\nconst CLASS_PAGINATION = `${PROJECT_CODE}__pagination`;\nconst CLASS_PAGINATION_PAGE = `${CLASS_PAGINATION}__page`;\nconst CLASS_PROGRESS = `${PROJECT_CODE}__progress`;\nconst CLASS_PROGRESS_BAR = `${CLASS_PROGRESS}__bar`;\nconst CLASS_AUTOPLAY = `${PROJECT_CODE}__autoplay`;\nconst CLASS_PLAY = `${PROJECT_CODE}__play`;\nconst CLASS_PAUSE = `${PROJECT_CODE}__pause`;\nconst CLASS_SPINNER = `${PROJECT_CODE}__spinner`;\nconst CLASS_INITIALIZED = \"is-initialized\";\nconst CLASS_ACTIVE = \"is-active\";\nconst CLASS_PREV = \"is-prev\";\nconst CLASS_NEXT = \"is-next\";\nconst CLASS_VISIBLE = \"is-visible\";\nconst CLASS_LOADING = \"is-loading\";\nconst STATUS_CLASSES = [CLASS_ACTIVE, CLASS_VISIBLE, CLASS_PREV, CLASS_NEXT, CLASS_LOADING];\nconst CLASSES = {\n  slide: CLASS_SLIDE,\n  clone: CLASS_CLONE,\n  arrows: CLASS_ARROWS,\n  arrow: CLASS_ARROW,\n  prev: CLASS_ARROW_PREV,\n  next: CLASS_ARROW_NEXT,\n  pagination: CLASS_PAGINATION,\n  page: CLASS_PAGINATION_PAGE,\n  spinner: CLASS_SPINNER\n};\n\nfunction Elements(Splide2, Components2, options) {\n  const { on } = EventInterface(Splide2);\n  const { root } = Splide2;\n  const elements = {};\n  const slides = [];\n  let classes;\n  let slider;\n  let track;\n  let list;\n  function setup() {\n    collect();\n    identify();\n    addClass(root, classes = getClasses());\n  }\n  function mount() {\n    on(EVENT_REFRESH, refresh);\n    on(EVENT_UPDATED, update);\n  }\n  function destroy() {\n    empty(slides);\n    removeClass(root, classes);\n  }\n  function refresh() {\n    destroy();\n    setup();\n  }\n  function update() {\n    removeClass(root, classes);\n    addClass(root, classes = getClasses());\n  }\n  function collect() {\n    slider = child(root, `.${CLASS_SLIDER}`);\n    track = query(root, `.${CLASS_TRACK}`);\n    list = child(track, `.${CLASS_LIST}`);\n    assert(track && list, \"Missing a track/list element.\");\n    push(slides, children(list, `.${CLASS_SLIDE}:not(.${CLASS_CLONE})`));\n    const autoplay = find(`.${CLASS_AUTOPLAY}`);\n    const arrows = find(`.${CLASS_ARROWS}`);\n    assign(elements, {\n      root,\n      slider,\n      track,\n      list,\n      slides,\n      arrows,\n      prev: query(arrows, `.${CLASS_ARROW_PREV}`),\n      next: query(arrows, `.${CLASS_ARROW_NEXT}`),\n      bar: query(find(`.${CLASS_PROGRESS}`), `.${CLASS_PROGRESS_BAR}`),\n      play: query(autoplay, `.${CLASS_PLAY}`),\n      pause: query(autoplay, `.${CLASS_PAUSE}`)\n    });\n  }\n  function identify() {\n    const id = root.id || uniqueId(PROJECT_CODE);\n    root.id = id;\n    track.id = track.id || `${id}-track`;\n    list.id = list.id || `${id}-list`;\n  }\n  function find(selector) {\n    return child(root, selector) || child(slider, selector);\n  }\n  function getClasses() {\n    return [\n      `${CLASS_ROOT}--${options.type}`,\n      `${CLASS_ROOT}--${options.direction}`,\n      options.drag && `${CLASS_ROOT}--draggable`,\n      options.isNavigation && `${CLASS_ROOT}--nav`,\n      CLASS_ACTIVE\n    ];\n  }\n  return assign(elements, {\n    setup,\n    mount,\n    destroy\n  });\n}\n\nfunction Style() {\n  let style;\n  let sheet;\n  function mount() {\n    style = create(\"style\", {}, document.head);\n    sheet = style.sheet;\n  }\n  function destroy() {\n    remove(style);\n    sheet = null;\n  }\n  function rule(selector, prop, value) {\n    const { cssRules } = sheet;\n    const cssRule = find(cssRules, (cssRule2) => isCSSStyleRule(cssRule2) && cssRule2.selectorText === selector) || cssRules[sheet.insertRule(`${selector}{}`, 0)];\n    if (isCSSStyleRule(cssRule)) {\n      cssRule.style[prop] = `${value}`;\n    }\n  }\n  function ruleBy(target, prop, value) {\n    rule(`#${isHTMLElement(target) ? target.id : target}`, prop, value);\n  }\n  function isCSSStyleRule(cssRule) {\n    return cssRule instanceof CSSStyleRule;\n  }\n  return {\n    mount,\n    destroy,\n    rule,\n    ruleBy\n  };\n}\n\nconst ROLE = \"role\";\nconst ARIA_CONTROLS = \"aria-controls\";\nconst ARIA_CURRENT = \"aria-current\";\nconst ARIA_LABEL = \"aria-label\";\nconst ARIA_HIDDEN = \"aria-hidden\";\nconst TAB_INDEX = \"tabindex\";\nconst DISABLED = \"disabled\";\nconst ALL_ATTRIBUTES = [\n  ROLE,\n  ARIA_CONTROLS,\n  ARIA_CURRENT,\n  ARIA_LABEL,\n  ARIA_HIDDEN,\n  TAB_INDEX,\n  DISABLED\n];\n\nconst SLIDE = \"slide\";\nconst LOOP = \"loop\";\nconst FADE = \"fade\";\n\nfunction Slide$1(Splide2, index, slideIndex, slide) {\n  const { on, emit, bind, destroy: destroyEvents } = EventInterface(Splide2);\n  const { Components, root, options } = Splide2;\n  const { isNavigation, updateOnMove } = options;\n  const { resolve } = Components.Direction;\n  const isClone = slideIndex > -1;\n  const container = child(slide, `.${CLASS_CONTAINER}`);\n  let destroyed;\n  function mount() {\n    init();\n    bind(slide, \"click keydown\", (e) => {\n      emit(e.type === \"click\" ? EVENT_CLICK : EVENT_SLIDE_KEYDOWN, this, e);\n    });\n    on([EVENT_RESIZED, EVENT_MOVED, EVENT_UPDATED, EVENT_REFRESH, EVENT_SCROLLED], update.bind(this));\n    if (updateOnMove) {\n      on(EVENT_MOVE, onMove.bind(this));\n    }\n    update.call(this);\n  }\n  function init() {\n    if (!isClone) {\n      slide.id = `${root.id}-slide${pad(index + 1)}`;\n    }\n    if (isNavigation) {\n      if (!isHTMLButtonElement(slide)) {\n        setAttribute(slide, ROLE, \"button\");\n      }\n      const idx = isClone ? slideIndex : index;\n      const label = format(options.i18n.slideX, idx + 1);\n      const controls = Splide2.splides.map((splide) => splide.root.id).join(\" \");\n      setAttribute(slide, ARIA_LABEL, label);\n      setAttribute(slide, ARIA_CONTROLS, controls);\n    }\n  }\n  function destroy() {\n    destroyed = true;\n    destroyEvents();\n    removeClass(slide, STATUS_CLASSES);\n    removeAttribute(slide, ALL_ATTRIBUTES);\n  }\n  function onMove(next, prev, dest) {\n    if (!destroyed) {\n      update.call(this);\n      if (dest === index) {\n        updateActivity.call(this, true);\n      }\n    }\n  }\n  function update() {\n    if (!destroyed) {\n      const { index: currIndex } = Splide2;\n      updateActivity.call(this, isActive());\n      updateVisibility.call(this, isVisible());\n      toggleClass(slide, CLASS_PREV, index === currIndex - 1);\n      toggleClass(slide, CLASS_NEXT, index === currIndex + 1);\n    }\n  }\n  function updateActivity(active) {\n    if (active !== hasClass(slide, CLASS_ACTIVE)) {\n      toggleClass(slide, CLASS_ACTIVE, active);\n      if (isNavigation) {\n        setAttribute(slide, ARIA_CURRENT, active || null);\n      }\n      emit(active ? EVENT_ACTIVE : EVENT_INACTIVE, this);\n    }\n  }\n  function updateVisibility(visible) {\n    const ariaHidden = !visible && !isActive();\n    setAttribute(slide, ARIA_HIDDEN, ariaHidden || null);\n    setAttribute(slide, TAB_INDEX, !ariaHidden && options.slideFocus ? 0 : null);\n    if (visible !== hasClass(slide, CLASS_VISIBLE)) {\n      toggleClass(slide, CLASS_VISIBLE, visible);\n      emit(visible ? EVENT_VISIBLE : EVENT_HIDDEN, this);\n    }\n  }\n  function rule(prop, value, useContainer) {\n    const selector = `#${slide.id}${container && useContainer ? ` > .${CLASS_CONTAINER}` : \"\"}`;\n    Components.Style.rule(selector, prop, value);\n  }\n  function isActive() {\n    return Splide2.index === index;\n  }\n  function isVisible() {\n    if (Splide2.is(FADE)) {\n      return isActive();\n    }\n    const trackRect = rect(Components.Elements.track);\n    const slideRect = rect(slide);\n    const left = resolve(\"left\");\n    const right = resolve(\"right\");\n    return floor(trackRect[left]) <= ceil(slideRect[left]) && floor(slideRect[right]) <= ceil(trackRect[right]);\n  }\n  function isWithin(from, distance) {\n    let diff = abs(from - index);\n    if (!Splide2.is(SLIDE) && !isClone) {\n      diff = min(diff, Splide2.length - diff);\n    }\n    return diff <= distance;\n  }\n  return {\n    index,\n    slideIndex,\n    slide,\n    container,\n    isClone,\n    mount,\n    destroy,\n    rule,\n    isWithin\n  };\n}\n\nfunction Slides(Splide2, Components2, options) {\n  const { on, emit, bind } = EventInterface(Splide2);\n  const { slides, list } = Components2.Elements;\n  const Slides2 = [];\n  function mount() {\n    init();\n    on(EVENT_REFRESH, refresh);\n  }\n  function init() {\n    slides.forEach((slide, index) => {\n      register(slide, index, -1);\n    });\n  }\n  function destroy() {\n    forEach$1((Slide2) => {\n      Slide2.destroy();\n    });\n    empty(Slides2);\n  }\n  function refresh() {\n    destroy();\n    init();\n  }\n  function register(slide, index, slideIndex) {\n    const object = Slide$1(Splide2, index, slideIndex, slide);\n    object.mount();\n    Slides2.push(object);\n  }\n  function get(excludeClones) {\n    return excludeClones ? filter((Slide2) => !Slide2.isClone) : Slides2;\n  }\n  function getIn(page) {\n    const { Controller } = Components2;\n    const index = Controller.toIndex(page);\n    const max = Controller.hasFocus() ? 1 : options.perPage;\n    return filter((Slide2) => between(Slide2.index, index, index + max - 1));\n  }\n  function getAt(index) {\n    return filter(index)[0];\n  }\n  function add(items, index) {\n    forEach(items, (slide) => {\n      if (isString(slide)) {\n        slide = parseHtml(slide);\n      }\n      if (isHTMLElement(slide)) {\n        const ref = slides[index];\n        ref ? before(slide, ref) : append(list, slide);\n        addClass(slide, options.classes.slide);\n        observeImages(slide, emit.bind(null, EVENT_RESIZE));\n      }\n    });\n    emit(EVENT_REFRESH);\n  }\n  function remove$1(matcher) {\n    remove(filter(matcher).map((Slide2) => Slide2.slide));\n    emit(EVENT_REFRESH);\n  }\n  function forEach$1(iteratee, excludeClones) {\n    get(excludeClones).forEach(iteratee);\n  }\n  function filter(matcher) {\n    return Slides2.filter(isFunction(matcher) ? matcher : (Slide2) => isString(matcher) ? matches(Slide2.slide, matcher) : includes(toArray(matcher), Slide2.index));\n  }\n  function rule(prop, value, useContainer) {\n    forEach$1((Slide2) => {\n      Slide2.rule(prop, value, useContainer);\n    });\n  }\n  function observeImages(elm, callback) {\n    const images = queryAll(elm, \"img\");\n    let { length } = images;\n    if (length) {\n      images.forEach((img) => {\n        bind(img, \"load error\", () => {\n          if (!--length) {\n            callback();\n          }\n        });\n      });\n    } else {\n      callback();\n    }\n  }\n  function getLength(excludeClones) {\n    return excludeClones ? slides.length : Slides2.length;\n  }\n  function isEnough() {\n    return Slides2.length > options.perPage;\n  }\n  return {\n    mount,\n    destroy,\n    register,\n    get,\n    getIn,\n    getAt,\n    add,\n    remove: remove$1,\n    forEach: forEach$1,\n    filter,\n    rule,\n    getLength,\n    isEnough\n  };\n}\n\nfunction Clones(Splide2, Components2, options) {\n  const { on, emit } = EventInterface(Splide2);\n  const { Elements, Slides } = Components2;\n  const { resolve } = Components2.Direction;\n  const clones = [];\n  let cloneCount;\n  function mount() {\n    init();\n    on(EVENT_REFRESH, refresh);\n    on([EVENT_UPDATED, EVENT_RESIZE], observe);\n  }\n  function init() {\n    if (cloneCount = computeCloneCount()) {\n      generate(cloneCount);\n    }\n  }\n  function destroy() {\n    remove(clones);\n    empty(clones);\n  }\n  function refresh() {\n    destroy();\n    init();\n  }\n  function observe() {\n    if (cloneCount !== computeCloneCount()) {\n      emit(EVENT_REFRESH);\n    }\n  }\n  function generate(count) {\n    const slides = Slides.get().slice();\n    const { length } = slides;\n    if (length) {\n      while (slides.length < count) {\n        push(slides, slides);\n      }\n      push(slides.slice(-count), slides.slice(0, count)).forEach((Slide, index) => {\n        const isHead = index < count;\n        const clone = cloneDeep(Slide.slide, index);\n        isHead ? before(clone, slides[0].slide) : append(Elements.list, clone);\n        push(clones, clone);\n        Slides.register(clone, index - count + (isHead ? 0 : length), Slide.index);\n      });\n    }\n  }\n  function cloneDeep(elm, index) {\n    const clone = elm.cloneNode(true);\n    addClass(clone, options.classes.clone);\n    clone.id = `${Splide2.root.id}-clone${pad(index + 1)}`;\n    return clone;\n  }\n  function computeCloneCount() {\n    let { clones: clones2 } = options;\n    if (!Splide2.is(LOOP)) {\n      clones2 = 0;\n    } else if (!clones2) {\n      const fixedSize = measure(Elements.list, options[resolve(\"fixedWidth\")]);\n      const fixedCount = fixedSize && ceil(rect(Elements.track)[resolve(\"width\")] / fixedSize);\n      const baseCount = fixedCount || options[resolve(\"autoWidth\")] && Splide2.length || options.perPage;\n      clones2 = baseCount * (options.drag ? (options.flickMaxPages || 1) + 1 : 2);\n    }\n    return clones2;\n  }\n  return {\n    mount,\n    destroy\n  };\n}\n\nfunction Layout(Splide2, Components2, options) {\n  const { on, bind, emit } = EventInterface(Splide2);\n  const { Slides } = Components2;\n  const { ruleBy } = Components2.Style;\n  const { resolve } = Components2.Direction;\n  const { track, list } = Components2.Elements;\n  const { getAt } = Slides;\n  const vertical = options.direction === TTB;\n  function mount() {\n    init();\n    bind(window, \"resize load\", Throttle(emit.bind(this, EVENT_RESIZE)));\n    on([EVENT_UPDATED, EVENT_REFRESH], init);\n    on(EVENT_RESIZE, resize);\n  }\n  function init() {\n    ruleBy(Splide2.root, \"maxWidth\", unit(options.width));\n    ruleBy(track, resolve(\"paddingLeft\"), cssPadding(false));\n    ruleBy(track, resolve(\"paddingRight\"), cssPadding(true));\n    Slides.rule(resolve(\"marginRight\"), unit(options.gap));\n    Slides.rule(\"width\", cssSlideWidth());\n    setSlidesHeight();\n    resize();\n  }\n  function resize() {\n    ruleBy(track, \"height\", cssTrackHeight());\n    options.heightRatio && setSlidesHeight();\n    emit(EVENT_RESIZED);\n  }\n  function setSlidesHeight() {\n    Slides.rule(\"height\", cssSlideHeight(), true);\n  }\n  function cssPadding(right) {\n    const { padding } = options;\n    const prop = resolve(right ? \"right\" : \"left\", true);\n    return padding ? unit(padding[prop] || (isObject(padding) ? \"0\" : padding)) : \"\";\n  }\n  function cssTrackHeight() {\n    let height = \"\";\n    if (vertical) {\n      height = cssHeight();\n      assert(height, '\"height\" or \"heightRatio\" is missing.');\n      const paddingTop = cssPadding(false);\n      const paddingBottom = cssPadding(true);\n      if (paddingTop || paddingBottom) {\n        height = `calc(${height}`;\n        height += `${paddingTop ? ` - ${paddingTop}` : \"\"}${paddingBottom ? ` - ${paddingBottom}` : \"\"})`;\n      }\n    }\n    return height;\n  }\n  function cssHeight() {\n    return unit(options.height || rect(list).width * options.heightRatio);\n  }\n  function cssSlideWidth() {\n    return options.autoWidth ? \"\" : unit(options.fixedWidth) || (vertical ? \"\" : cssSlideSize());\n  }\n  function cssSlideHeight() {\n    return unit(options.fixedHeight) || (vertical ? options.autoHeight ? \"\" : cssSlideSize() : cssHeight());\n  }\n  function cssSlideSize() {\n    const gap = unit(options.gap);\n    return `calc((100%${gap && ` + ${gap}`})/${options.perPage || 1}${gap && ` - ${gap}`})`;\n  }\n  function listSize() {\n    return rect(list)[resolve(\"width\")];\n  }\n  function slideSize(index, withoutGap) {\n    const Slide = getAt(index || 0);\n    return Slide ? rect(Slide.slide)[resolve(\"width\")] + (withoutGap ? 0 : getGap()) : 0;\n  }\n  function totalSize(index, withoutGap) {\n    const Slide = getAt(index);\n    if (Slide) {\n      const right = rect(Slide.slide)[resolve(\"right\")];\n      const left = rect(list)[resolve(\"left\")];\n      return abs(right - left) + (withoutGap ? 0 : getGap());\n    }\n    return 0;\n  }\n  function sliderSize() {\n    return totalSize(Splide2.length - 1, true) - totalSize(-1, true);\n  }\n  function getGap() {\n    const Slide = getAt(0);\n    return Slide && parseFloat(style(Slide.slide, resolve(\"marginRight\"))) || 0;\n  }\n  function getPadding(right) {\n    return parseFloat(style(track, resolve(`padding${right ? \"Right\" : \"Left\"}`, true))) || 0;\n  }\n  return {\n    mount,\n    listSize,\n    slideSize,\n    sliderSize,\n    totalSize,\n    getPadding\n  };\n}\n\nconst SNAP_THRESHOLD = 10;\n\nfunction Move(Splide2, Components2, options) {\n  const { on, emit } = EventInterface(Splide2);\n  const { slideSize, getPadding, totalSize, listSize, sliderSize } = Components2.Layout;\n  const { resolve, orient } = Components2.Direction;\n  const { list, track } = Components2.Elements;\n  let waiting;\n  let shouldSnap = true;\n  function mount() {\n    if (!Splide2.is(FADE)) {\n      on([EVENT_RESIZED, EVENT_UPDATED, EVENT_REFRESH], reposition, DEFAULT_EVENT_PRIORITY - 1);\n    }\n  }\n  function reposition() {\n    if (exceededLimit(true)) {\n      translate(getLimit(true));\n    } else if (shouldSnap || (shouldSnap = canSnap())) {\n      jump(Splide2.index);\n    }\n  }\n  function move(dest, index, prev) {\n    if (!isBusy()) {\n      const { set } = Splide2.state;\n      const position = getPosition();\n      const looping = dest !== index;\n      waiting = looping || options.waitForTransition;\n      set(MOVING);\n      emit(EVENT_MOVE, index, prev, dest);\n      Components2.Transition.start(dest, () => {\n        looping && jump(index);\n        waiting = false;\n        set(IDLE);\n        emit(EVENT_MOVED, index, prev, dest);\n        if (options.trimSpace === \"move\" && dest !== prev && position === getPosition()) {\n          Components2.Controller.go(dest > prev ? \">\" : \"<\");\n        }\n      });\n    }\n  }\n  function jump(index) {\n    waiting = false;\n    Components2.Transition.cancel();\n    translate(toPosition(index, true));\n  }\n  function translate(position) {\n    position = loop(position);\n    shouldSnap = canSnap(position);\n    Components2.Style.ruleBy(list, \"transform\", `translate${resolve(\"X\")}(${100 * position / listSize()}%)`);\n  }\n  function loop(position) {\n    if (!waiting && Splide2.is(LOOP)) {\n      const diff = position - getPosition();\n      const exceededMin = exceededLimit(false, position);\n      const exceededMax = exceededLimit(true, position);\n      if (exceededMin && diff > 0 || exceededMax && diff < 0) {\n        position += orient(sliderSize() * (exceededMin ? 1 : -1));\n      }\n    }\n    return position;\n  }\n  function cancel() {\n    translate(getPosition());\n    Components2.Transition.cancel();\n  }\n  function toIndex(position) {\n    const Slides = Components2.Slides.get();\n    let index = 0;\n    let minDistance = Infinity;\n    for (let i = 0; i < Slides.length; i++) {\n      const slideIndex = Slides[i].index;\n      const distance = abs(toPosition(slideIndex, true) - position);\n      if (distance < minDistance) {\n        minDistance = distance;\n        index = slideIndex;\n      } else {\n        break;\n      }\n    }\n    return index;\n  }\n  function toPosition(index, trimming) {\n    const position = orient(totalSize(index - 1) - offset(index));\n    return trimming ? trim(position) : position;\n  }\n  function getPosition() {\n    const left = resolve(\"left\");\n    return rect(list)[left] - rect(track)[left] + orient(getPadding(false));\n  }\n  function trim(position) {\n    if (options.trimSpace && Splide2.is(SLIDE)) {\n      position = clamp(position, 0, orient(sliderSize() - listSize()));\n    }\n    return position;\n  }\n  function offset(index) {\n    const { focus } = options;\n    return focus === \"center\" ? (listSize() - slideSize(index, true)) / 2 : +focus * slideSize(index) || 0;\n  }\n  function getLimit(max) {\n    return toPosition(max ? Components2.Controller.getEnd() : 0, !!options.trimSpace);\n  }\n  function canSnap(position) {\n    position = isUndefined(position) ? getPosition() : position;\n    return abs(position - toPosition(toIndex(position), true)) < SNAP_THRESHOLD;\n  }\n  function isBusy() {\n    return waiting;\n  }\n  function exceededLimit(max, position) {\n    position = isUndefined(position) ? getPosition() : position;\n    const exceededMin = max !== true && orient(position) < orient(getLimit(false));\n    const exceededMax = max !== false && orient(position) > orient(getLimit(true));\n    return exceededMin || exceededMax;\n  }\n  return {\n    mount,\n    move,\n    jump,\n    translate,\n    cancel,\n    toIndex,\n    toPosition,\n    getPosition,\n    getLimit,\n    isBusy,\n    exceededLimit\n  };\n}\n\nfunction Controller(Splide2, Components2, options) {\n  const { on } = EventInterface(Splide2);\n  const { Move } = Components2;\n  const { isEnough, getLength } = Components2.Slides;\n  const isLoop = Splide2.is(LOOP);\n  let currIndex = options.start || 0;\n  let prevIndex = currIndex;\n  let slideCount;\n  let perMove;\n  let perPage;\n  function mount() {\n    init();\n    Move.jump(currIndex);\n    on([EVENT_UPDATED, EVENT_REFRESH], init);\n    on(EVENT_SCROLLED, reindex, 0);\n  }\n  function init() {\n    slideCount = getLength(true);\n    perMove = options.perMove;\n    perPage = options.perPage;\n    if (currIndex >= slideCount) {\n      Move.jump(currIndex = slideCount - 1);\n    }\n  }\n  function reindex() {\n    setIndex(Move.toIndex(Move.getPosition()));\n  }\n  function go(control, allowSameIndex) {\n    const dest = parse(control);\n    const index = loop(dest);\n    if (index > -1 && !Move.isBusy() && (allowSameIndex || index !== currIndex)) {\n      setIndex(index);\n      Move.move(dest, index, prevIndex);\n    }\n  }\n  function parse(control) {\n    let index = currIndex;\n    if (isString(control)) {\n      const [, indicator, number] = control.match(/([+\\-<>])(\\d+)?/) || [];\n      if (indicator === \"+\" || indicator === \"-\") {\n        index = computeDestIndex(currIndex + +`${indicator}${+number || 1}`, currIndex, true);\n      } else if (indicator === \">\") {\n        index = number ? toIndex(+number) : getNext(true);\n      } else if (indicator === \"<\") {\n        index = getPrev(true);\n      }\n    } else {\n      if (isLoop) {\n        index = clamp(control, -perPage, slideCount + perPage - 1);\n      } else {\n        index = clamp(control, 0, getEnd());\n      }\n    }\n    return index;\n  }\n  function getNext(destination) {\n    return getAdjacent(false, destination);\n  }\n  function getPrev(destination) {\n    return getAdjacent(true, destination);\n  }\n  function getAdjacent(prev, destination) {\n    const number = perMove || hasFocus() ? 1 : perPage;\n    const dest = computeDestIndex(currIndex + number * (prev ? -1 : 1), currIndex);\n    if (dest === -1 && Splide2.is(SLIDE)) {\n      const position = Move.getPosition();\n      if (prev) {\n        if (!approximatelyEqual(position, 0, 1)) {\n          return 0;\n        }\n      } else {\n        if (!approximatelyEqual(position, Move.getLimit(true), 1)) {\n          return getEnd();\n        }\n      }\n    }\n    return destination ? dest : loop(dest);\n  }\n  function computeDestIndex(dest, from, incremental) {\n    if (isEnough()) {\n      const end = getEnd();\n      if (dest < 0 || dest > end) {\n        if (between(0, dest, from, true) || between(end, from, dest, true)) {\n          dest = toIndex(toPage(dest));\n        } else {\n          if (isLoop) {\n            dest = perMove ? dest : dest < 0 ? -(slideCount % perPage || perPage) : slideCount;\n          } else if (options.rewind) {\n            dest = dest < 0 ? end : 0;\n          } else {\n            dest = -1;\n          }\n        }\n      } else {\n        if (!isLoop && !incremental && dest !== from) {\n          dest = toIndex(toPage(from) + (dest < from ? -1 : 1));\n        }\n      }\n    } else {\n      dest = -1;\n    }\n    return dest;\n  }\n  function getEnd() {\n    let end = slideCount - perPage;\n    if (hasFocus() || isLoop && perMove) {\n      end = slideCount - 1;\n    }\n    return max(end, 0);\n  }\n  function loop(index) {\n    if (isLoop) {\n      return isEnough() ? index % slideCount + (index < 0 ? slideCount : 0) : -1;\n    }\n    return index;\n  }\n  function toIndex(page) {\n    return clamp(hasFocus() ? page : perPage * page, 0, getEnd());\n  }\n  function toPage(index) {\n    if (!hasFocus()) {\n      index = between(index, slideCount - perPage, slideCount - 1) ? slideCount - 1 : index;\n      index = floor(index / perPage);\n    }\n    return index;\n  }\n  function setIndex(index) {\n    if (index !== currIndex) {\n      prevIndex = currIndex;\n      currIndex = index;\n    }\n  }\n  function getIndex(prev) {\n    return prev ? prevIndex : currIndex;\n  }\n  function hasFocus() {\n    return !isUndefined(options.focus) || options.isNavigation;\n  }\n  return {\n    mount,\n    go,\n    getNext,\n    getPrev,\n    getEnd,\n    setIndex,\n    getIndex,\n    toIndex,\n    toPage,\n    hasFocus\n  };\n}\n\nconst XML_NAME_SPACE = \"http://www.w3.org/2000/svg\";\nconst PATH = \"m15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z\";\nconst SIZE = 40;\n\nfunction Arrows(Splide2, Components2, options) {\n  const { on, bind, emit } = EventInterface(Splide2);\n  const { classes, i18n } = options;\n  const { Elements, Controller } = Components2;\n  let wrapper = Elements.arrows;\n  let prev = Elements.prev;\n  let next = Elements.next;\n  let created;\n  const arrows = {};\n  function mount() {\n    init();\n    on(EVENT_UPDATED, init);\n  }\n  function init() {\n    if (options.arrows) {\n      if (!prev || !next) {\n        createArrows();\n      }\n    }\n    if (prev && next) {\n      if (!arrows.prev) {\n        const { id } = Elements.track;\n        setAttribute(prev, ARIA_CONTROLS, id);\n        setAttribute(next, ARIA_CONTROLS, id);\n        arrows.prev = prev;\n        arrows.next = next;\n        listen();\n        emit(EVENT_ARROWS_MOUNTED, prev, next);\n      } else {\n        display(wrapper, options.arrows === false ? \"none\" : \"\");\n      }\n    }\n  }\n  function destroy() {\n    if (created) {\n      remove(wrapper);\n    } else {\n      removeAttribute(prev, ALL_ATTRIBUTES);\n      removeAttribute(next, ALL_ATTRIBUTES);\n    }\n  }\n  function listen() {\n    const { go } = Controller;\n    on([EVENT_MOUNTED, EVENT_MOVE, EVENT_MOVED, EVENT_UPDATED, EVENT_REFRESH, EVENT_SCROLLED], update);\n    bind(next, \"click\", () => {\n      go(\">\", true);\n    });\n    bind(prev, \"click\", () => {\n      go(\"<\", true);\n    });\n  }\n  function createArrows() {\n    wrapper = create(\"div\", classes.arrows);\n    prev = createArrow(true);\n    next = createArrow(false);\n    created = true;\n    append(wrapper, [prev, next]);\n    before(wrapper, child(options.arrows === \"slider\" && Elements.slider || Splide2.root));\n  }\n  function createArrow(prev2) {\n    const arrow = `<button class=\"${classes.arrow} ${prev2 ? classes.prev : classes.next}\" type=\"button\"><svg xmlns=\"${XML_NAME_SPACE}\" viewBox=\"0 0 ${SIZE} ${SIZE}\" width=\"${SIZE}\" height=\"${SIZE}\"><path d=\"${options.arrowPath || PATH}\" />`;\n    return parseHtml(arrow);\n  }\n  function update() {\n    const index = Splide2.index;\n    const prevIndex = Controller.getPrev();\n    const nextIndex = Controller.getNext();\n    const prevLabel = prevIndex > -1 && index < prevIndex ? i18n.last : i18n.prev;\n    const nextLabel = nextIndex > -1 && index > nextIndex ? i18n.first : i18n.next;\n    prev.disabled = prevIndex < 0;\n    next.disabled = nextIndex < 0;\n    setAttribute(prev, ARIA_LABEL, prevLabel);\n    setAttribute(next, ARIA_LABEL, nextLabel);\n    emit(EVENT_ARROWS_UPDATED, prev, next, prevIndex, nextIndex);\n  }\n  return {\n    arrows,\n    mount,\n    destroy\n  };\n}\n\nfunction Autoplay(Splide2, Components2, options) {\n  const { on, bind, emit } = EventInterface(Splide2);\n  const { Elements } = Components2;\n  const interval = RequestInterval(options.interval, Splide2.go.bind(Splide2, \">\"), update);\n  const { isPaused } = interval;\n  let hovered;\n  let focused;\n  let paused;\n  function mount() {\n    const { autoplay } = options;\n    if (autoplay) {\n      initButton(true);\n      initButton(false);\n      listen();\n      if (autoplay !== \"pause\") {\n        play();\n      }\n    }\n  }\n  function initButton(forPause) {\n    const prop = forPause ? \"pause\" : \"play\";\n    const button = Elements[prop];\n    if (button) {\n      if (!isHTMLButtonElement(button)) {\n        setAttribute(button, ROLE, \"button\");\n      }\n      setAttribute(button, ARIA_CONTROLS, Elements.track.id);\n      setAttribute(button, ARIA_LABEL, options.i18n[prop]);\n      bind(button, \"click\", forPause ? pause : play);\n    }\n  }\n  function listen() {\n    const { root } = Elements;\n    if (options.pauseOnHover) {\n      bind(root, \"mouseenter mouseleave\", (e) => {\n        hovered = e.type === \"mouseenter\";\n        autoToggle();\n      });\n    }\n    if (options.pauseOnFocus) {\n      bind(root, \"focusin focusout\", (e) => {\n        focused = e.type === \"focusin\";\n        autoToggle();\n      });\n    }\n    on([EVENT_MOVE, EVENT_SCROLL, EVENT_REFRESH], interval.rewind);\n  }\n  function play() {\n    if (isPaused() && Components2.Slides.isEnough()) {\n      interval.start(!options.resetProgress);\n      focused = false;\n      hovered = false;\n      emit(EVENT_AUTOPLAY_PLAY);\n    }\n  }\n  function pause(manual = true) {\n    if (!isPaused()) {\n      interval.pause();\n      emit(EVENT_AUTOPLAY_PAUSE);\n    }\n    paused = manual;\n  }\n  function autoToggle() {\n    if (!paused) {\n      if (!hovered && !focused) {\n        play();\n      } else {\n        pause(false);\n      }\n    }\n  }\n  function update(rate) {\n    const { bar } = Elements;\n    if (bar) {\n      style(bar, { width: `${rate * 100}%` });\n    }\n    emit(EVENT_AUTOPLAY_PLAYING, rate);\n  }\n  return {\n    mount,\n    destroy: interval.cancel,\n    play,\n    pause,\n    isPaused\n  };\n}\n\nfunction Cover(Splide2, Components2, options) {\n  const { on } = EventInterface(Splide2);\n  function mount() {\n    if (options.cover) {\n      on(EVENT_LAZYLOAD_LOADED, (img, Slide) => {\n        toggle(true, img, Slide);\n      });\n      on([EVENT_MOUNTED, EVENT_UPDATED, EVENT_REFRESH], apply.bind(null, true));\n    }\n  }\n  function destroy() {\n    apply(false);\n  }\n  function apply(cover) {\n    Components2.Slides.forEach((Slide) => {\n      const img = child(Slide.container || Slide.slide, \"img\");\n      if (img && img.src) {\n        toggle(cover, img, Slide);\n      }\n    });\n  }\n  function toggle(cover, img, Slide) {\n    Slide.rule(\"background\", cover ? `center/cover no-repeat url(\"${img.src}\")` : \"\", true);\n    display(img, cover ? \"none\" : \"\");\n  }\n  return {\n    mount,\n    destroy\n  };\n}\n\nconst BOUNCE_DIFF_THRESHOLD = 10;\nconst BOUNCE_DURATION = 600;\nconst FRICTION_FACTOR = 0.6;\nconst BASE_VELOCITY = 1.5;\nconst MIN_DURATION = 800;\n\nfunction Scroll(Splide2, Components2, options) {\n  const { on, emit } = EventInterface(Splide2);\n  const { Move } = Components2;\n  const { getPosition, getLimit, exceededLimit } = Move;\n  let interval;\n  function mount() {\n    on(EVENT_MOVE, clear);\n    on([EVENT_UPDATED, EVENT_REFRESH], cancel);\n  }\n  function scroll(destination, duration, suppressConstraint) {\n    const start = getPosition();\n    let friction = 1;\n    duration = duration || computeDuration(abs(destination - start));\n    clear();\n    interval = RequestInterval(duration, onScrolled, (rate) => {\n      const position = getPosition();\n      const target = start + (destination - start) * easing(rate);\n      const diff = (target - getPosition()) * friction;\n      Move.translate(position + diff);\n      if (Splide2.is(SLIDE) && !suppressConstraint && exceededLimit()) {\n        friction *= FRICTION_FACTOR;\n        if (abs(diff) < BOUNCE_DIFF_THRESHOLD) {\n          bounce(exceededLimit(false));\n        }\n      }\n    }, 1);\n    emit(EVENT_SCROLL);\n    interval.start();\n  }\n  function bounce(backwards) {\n    scroll(getLimit(!backwards), BOUNCE_DURATION, true);\n  }\n  function onScrolled() {\n    emit(EVENT_SCROLLED);\n  }\n  function computeDuration(distance) {\n    return max(distance / BASE_VELOCITY, MIN_DURATION);\n  }\n  function clear() {\n    if (interval) {\n      interval.cancel();\n    }\n  }\n  function cancel() {\n    if (interval && !interval.isPaused()) {\n      clear();\n      onScrolled();\n    }\n  }\n  function easing(t) {\n    const { easingFunc } = options;\n    return easingFunc ? easingFunc(t) : 1 - Math.pow(1 - t, 4);\n  }\n  return {\n    mount,\n    destroy: clear,\n    scroll,\n    cancel\n  };\n}\n\nconst FRICTION = 5;\nconst LOG_INTERVAL = 50;\nconst POINTER_DOWN_EVENTS = \"touchstart mousedown\";\nconst POINTER_MOVE_EVENTS = \"touchmove mousemove\";\nconst POINTER_UP_EVENTS = \"touchend touchcancel mouseup mouseleave\";\n\nfunction Drag(Splide2, Components2, options) {\n  const { on, emit, bind, unbind } = EventInterface(Splide2);\n  const { Move, Scroll, Controller } = Components2;\n  const { track } = Components2.Elements;\n  const { resolve, orient } = Components2.Direction;\n  const { getPosition, exceededLimit } = Move;\n  const isSlide = Splide2.is(SLIDE);\n  const isFade = Splide2.is(FADE);\n  let basePosition;\n  let baseEvent;\n  let prevBaseEvent;\n  let lastEvent;\n  let isFree;\n  let isDragging;\n  let isMouse;\n  let hasExceeded = false;\n  let clickPrevented;\n  let disabled;\n  let target;\n  function mount() {\n    bind(track, POINTER_DOWN_EVENTS, onPointerDown);\n    bind(track, \"click\", onClick, { capture: true });\n    on([EVENT_MOUNTED, EVENT_UPDATED], init);\n  }\n  function init() {\n    const { drag } = options;\n    disable(!drag);\n    isFree = drag === \"free\";\n  }\n  function onPointerDown(e) {\n    if (!disabled) {\n      isMouse = e.type === \"mousedown\";\n      if (!isMouse || !e.button) {\n        if (!Move.isBusy()) {\n          target = isMouse ? window : track;\n          prevBaseEvent = null;\n          lastEvent = null;\n          clickPrevented = false;\n          bind(target, POINTER_MOVE_EVENTS, onPointerMove);\n          bind(target, POINTER_UP_EVENTS, onPointerUp);\n          Move.cancel();\n          Scroll.cancel();\n          save(e);\n        } else {\n          prevent(e, true);\n        }\n      }\n    }\n  }\n  function onPointerMove(e) {\n    if (!lastEvent) {\n      clickPrevented = true;\n      emit(EVENT_DRAG);\n    }\n    lastEvent = e;\n    if (!e.cancelable) {\n      return;\n    }\n    if (isDragging) {\n      const expired = timeOf(e) - timeOf(baseEvent) > LOG_INTERVAL;\n      const exceeded = hasExceeded !== (hasExceeded = exceededLimit());\n      if (expired || exceeded) {\n        save(e);\n      }\n      if (!isFade) {\n        Move.translate(basePosition + constrain(coordOf(e) - coordOf(baseEvent)));\n      }\n      emit(EVENT_DRAGGING);\n      prevent(e);\n    } else {\n      const threshold = options.dragMinThreshold || 15;\n      isDragging = isMouse || abs(coordOf(e) - coordOf(baseEvent)) > threshold;\n      if (isSliderDirection()) {\n        prevent(e);\n      }\n    }\n  }\n  function onPointerUp(e) {\n    unbind(target, `${POINTER_MOVE_EVENTS} ${POINTER_UP_EVENTS}`);\n    if (lastEvent) {\n      if (isDragging || e.cancelable && isSliderDirection()) {\n        const velocity = computeVelocity(e);\n        const destination = computeDestination(velocity);\n        if (isFree) {\n          Scroll.scroll(destination);\n        } else if (isFade) {\n          Controller.go(Splide2.index + orient(sign(velocity)));\n        } else {\n          Controller.go(computeIndex(destination), true);\n        }\n        prevent(e);\n      }\n      emit(EVENT_DRAGGED);\n    }\n    isDragging = false;\n  }\n  function save(e) {\n    prevBaseEvent = baseEvent;\n    baseEvent = e;\n    basePosition = getPosition();\n  }\n  function onClick(e) {\n    if (!disabled && clickPrevented) {\n      prevent(e, true);\n    }\n  }\n  function isSliderDirection() {\n    const diffX = abs(coordOf(lastEvent) - coordOf(baseEvent));\n    const diffY = abs(coordOf(lastEvent, true) - coordOf(baseEvent, true));\n    return diffX > diffY;\n  }\n  function computeVelocity(e) {\n    if (Splide2.is(LOOP) || !hasExceeded) {\n      const base = baseEvent === lastEvent && prevBaseEvent || baseEvent;\n      const diffCoord = coordOf(lastEvent) - coordOf(base);\n      const diffTime = timeOf(e) - timeOf(base);\n      const isFlick = timeOf(e) - timeOf(lastEvent) < LOG_INTERVAL;\n      if (diffTime && isFlick) {\n        return diffCoord / diffTime;\n      }\n    }\n    return 0;\n  }\n  function computeDestination(velocity) {\n    return getPosition() + sign(velocity) * min(abs(velocity) * (options.flickPower || 600), isFree ? Infinity : Components2.Layout.listSize() * (options.flickMaxPages || 1));\n  }\n  function computeIndex(destination) {\n    const dest = Move.toIndex(destination);\n    return isSlide ? clamp(dest, 0, Controller.getEnd()) : dest;\n  }\n  function coordOf(e, orthogonal) {\n    const prop = `page${resolve(orthogonal ? \"Y\" : \"X\")}`;\n    return (isMouse ? e : e.touches[0])[prop];\n  }\n  function timeOf(e) {\n    return e.timeStamp;\n  }\n  function constrain(diff) {\n    return diff / (hasExceeded && isSlide ? FRICTION : 1);\n  }\n  function disable(value) {\n    disabled = value;\n  }\n  return {\n    mount,\n    disable\n  };\n}\n\nconst IE_ARROW_KEYS = [\"Left\", \"Right\", \"Up\", \"Down\"];\nfunction Keyboard(Splide2, Components2, options) {\n  const { on, bind, unbind } = EventInterface(Splide2);\n  const { root } = Components2.Elements;\n  const { resolve } = Components2.Direction;\n  let target;\n  function mount() {\n    init();\n    on(EVENT_UPDATED, () => {\n      destroy();\n      init();\n    });\n  }\n  function init() {\n    const { keyboard = \"global\" } = options;\n    if (keyboard) {\n      if (keyboard === \"focused\") {\n        target = root;\n        setAttribute(root, TAB_INDEX, 0);\n      } else {\n        target = window;\n      }\n      bind(target, \"keydown\", onKeydown);\n    }\n  }\n  function destroy() {\n    if (target) {\n      unbind(target, \"keydown\");\n      if (isHTMLElement(target)) {\n        removeAttribute(target, TAB_INDEX);\n      }\n    }\n  }\n  function onKeydown(e) {\n    const key = normalize(e.key);\n    if (key === resolve(\"ArrowLeft\")) {\n      Splide2.go(\"<\");\n    } else if (key === resolve(\"ArrowRight\")) {\n      Splide2.go(\">\");\n    }\n  }\n  function normalize(key) {\n    return includes(IE_ARROW_KEYS, key) ? `Arrow${key}` : key;\n  }\n  return {\n    mount,\n    destroy\n  };\n}\n\nconst SRC_DATA_ATTRIBUTE = `${DATA_ATTRIBUTE}-lazy`;\nconst SRCSET_DATA_ATTRIBUTE = `${SRC_DATA_ATTRIBUTE}-srcset`;\nconst IMAGE_SELECTOR = `[${SRC_DATA_ATTRIBUTE}], [${SRCSET_DATA_ATTRIBUTE}]`;\n\nfunction LazyLoad(Splide2, Components2, options) {\n  const { on, off, bind, emit } = EventInterface(Splide2);\n  const isSequential = options.lazyLoad === \"sequential\";\n  let images = [];\n  let index = 0;\n  function mount() {\n    if (options.lazyLoad) {\n      on([EVENT_MOUNTED, EVENT_REFRESH], () => {\n        destroy();\n        init();\n      });\n      if (!isSequential) {\n        on([EVENT_MOUNTED, EVENT_REFRESH, EVENT_MOVED], observe);\n      }\n    }\n  }\n  function init() {\n    Components2.Slides.forEach((_Slide) => {\n      queryAll(_Slide.slide, IMAGE_SELECTOR).forEach((_img) => {\n        const src = getAttribute(_img, SRC_DATA_ATTRIBUTE);\n        const srcset = getAttribute(_img, SRCSET_DATA_ATTRIBUTE);\n        if (src !== _img.src || srcset !== _img.srcset) {\n          const _spinner = create(\"span\", options.classes.spinner, _img.parentElement);\n          setAttribute(_spinner, ROLE, \"presentation\");\n          images.push({ _img, _Slide, src, srcset, _spinner });\n          display(_img, \"none\");\n        }\n      });\n    });\n    if (isSequential) {\n      loadNext();\n    }\n  }\n  function destroy() {\n    index = 0;\n    images = [];\n  }\n  function observe() {\n    images = images.filter((data) => {\n      if (data._Slide.isWithin(Splide2.index, options.perPage * ((options.preloadPages || 1) + 1))) {\n        return load(data);\n      }\n      return true;\n    });\n    if (!images.length) {\n      off(EVENT_MOVED);\n    }\n  }\n  function load(data) {\n    const { _img } = data;\n    addClass(data._Slide.slide, CLASS_LOADING);\n    bind(_img, \"load error\", (e) => {\n      onLoad(data, e.type === \"error\");\n    });\n    [\"src\", \"srcset\"].forEach((name) => {\n      if (data[name]) {\n        setAttribute(_img, name, data[name]);\n        removeAttribute(_img, name === \"src\" ? SRC_DATA_ATTRIBUTE : SRCSET_DATA_ATTRIBUTE);\n      }\n    });\n  }\n  function onLoad(data, error) {\n    const { _Slide } = data;\n    removeClass(_Slide.slide, CLASS_LOADING);\n    if (!error) {\n      remove(data._spinner);\n      display(data._img, \"\");\n      emit(EVENT_LAZYLOAD_LOADED, data._img, _Slide);\n      emit(EVENT_RESIZE);\n    }\n    if (isSequential) {\n      loadNext();\n    }\n  }\n  function loadNext() {\n    if (index < images.length) {\n      load(images[index++]);\n    }\n  }\n  return {\n    mount,\n    destroy\n  };\n}\n\nfunction Pagination(Splide2, Components2, options) {\n  const { on, emit, bind, unbind } = EventInterface(Splide2);\n  const { Slides, Elements } = Components2;\n  const { go, toPage, hasFocus, getIndex } = Components2.Controller;\n  const items = [];\n  let list;\n  function mount() {\n    init();\n    on([EVENT_UPDATED, EVENT_REFRESH], init);\n    on([EVENT_MOVE, EVENT_SCROLLED], update);\n  }\n  function init() {\n    destroy();\n    if (options.pagination && Slides.isEnough()) {\n      createPagination();\n      emit(EVENT_PAGINATION_MOUNTED, { list, items }, getAt(Splide2.index));\n      update();\n    }\n  }\n  function destroy() {\n    if (list) {\n      remove(list);\n      items.forEach((item) => {\n        unbind(item.button, \"click\");\n      });\n      empty(items);\n      list = null;\n    }\n  }\n  function createPagination() {\n    const { length } = Splide2;\n    const { classes, i18n, perPage } = options;\n    const parent = options.pagination === \"slider\" && Elements.slider || Elements.root;\n    const max = hasFocus() ? length : ceil(length / perPage);\n    list = create(\"ul\", classes.pagination, parent);\n    for (let i = 0; i < max; i++) {\n      const li = create(\"li\", null, list);\n      const button = create(\"button\", { class: classes.page, type: \"button\" }, li);\n      const controls = Slides.getIn(i).map((Slide) => Slide.slide.id);\n      const text = !hasFocus() && perPage > 1 ? i18n.pageX : i18n.slideX;\n      bind(button, \"click\", () => {\n        go(`>${i}`, true);\n      });\n      setAttribute(button, ARIA_CONTROLS, controls.join(\" \"));\n      setAttribute(button, ARIA_LABEL, format(text, i + 1));\n      emit(EVENT_PAGINATION_PAGE, list, li, button, i);\n      items.push({ li, button, page: i });\n    }\n  }\n  function getAt(index) {\n    return items[toPage(index)];\n  }\n  function update() {\n    const prev = getAt(getIndex(true));\n    const curr = getAt(getIndex());\n    if (prev) {\n      removeClass(prev.button, CLASS_ACTIVE);\n      removeAttribute(prev.button, ARIA_CURRENT);\n    }\n    if (curr) {\n      addClass(curr.button, CLASS_ACTIVE);\n      setAttribute(curr.button, ARIA_CURRENT, true);\n    }\n    emit(EVENT_PAGINATION_UPDATED, { list, items }, prev, curr);\n  }\n  return {\n    items,\n    mount,\n    destroy,\n    getAt\n  };\n}\n\nconst TRIGGER_KEYS = [\" \", \"Enter\", \"Spacebar\"];\nfunction Sync(Splide2, Components2, options) {\n  const { splides } = Splide2;\n  function mount() {\n    if (options.isNavigation) {\n      navigate();\n    } else {\n      sync();\n    }\n  }\n  function sync() {\n    const processed = [];\n    splides.concat(Splide2).forEach((splide, index, instances) => {\n      EventInterface(splide).on(EVENT_MOVE, (index2, prev, dest) => {\n        instances.forEach((instance) => {\n          if (instance !== splide && !includes(processed, splide)) {\n            processed.push(instance);\n            instance.go(instance.is(LOOP) ? dest : index2);\n          }\n        });\n        empty(processed);\n      });\n    });\n  }\n  function navigate() {\n    const { on, emit } = EventInterface(Splide2);\n    on(EVENT_CLICK, (Slide) => {\n      Splide2.go(Slide.index);\n    });\n    on(EVENT_SLIDE_KEYDOWN, (Slide, e) => {\n      if (includes(TRIGGER_KEYS, e.key)) {\n        Splide2.go(Slide.index);\n        prevent(e);\n      }\n    });\n    emit(EVENT_NAVIGATION_MOUNTED, Splide2.splides);\n  }\n  return {\n    mount\n  };\n}\n\nfunction Wheel(Splide2, Components2, options) {\n  const { bind } = EventInterface(Splide2);\n  function mount() {\n    if (options.wheel) {\n      bind(Components2.Elements.track, \"wheel\", onWheel);\n    }\n  }\n  function onWheel(e) {\n    const { deltaY } = e;\n    if (deltaY) {\n      Splide2.go(deltaY < 0 ? \"<\" : \">\");\n      prevent(e);\n    }\n  }\n  return {\n    mount\n  };\n}\n\nvar ComponentConstructors = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Options: Options,\n  Direction: Direction,\n  Elements: Elements,\n  Style: Style,\n  Slides: Slides,\n  Clones: Clones,\n  Layout: Layout,\n  Move: Move,\n  Controller: Controller,\n  Arrows: Arrows,\n  Autoplay: Autoplay,\n  Cover: Cover,\n  Scroll: Scroll,\n  Drag: Drag,\n  Keyboard: Keyboard,\n  LazyLoad: LazyLoad,\n  Pagination: Pagination,\n  Sync: Sync,\n  Wheel: Wheel\n});\n\nconst I18N = {\n  prev: \"Previous slide\",\n  next: \"Next slide\",\n  first: \"Go to first slide\",\n  last: \"Go to last slide\",\n  slideX: \"Go to slide %s\",\n  pageX: \"Go to page %s\",\n  play: \"Start autoplay\",\n  pause: \"Pause autoplay\"\n};\n\nconst DEFAULTS = {\n  type: \"slide\",\n  speed: 400,\n  waitForTransition: true,\n  perPage: 1,\n  arrows: true,\n  pagination: true,\n  interval: 5e3,\n  pauseOnHover: true,\n  pauseOnFocus: true,\n  resetProgress: true,\n  easing: \"cubic-bezier(.42,.65,.27,.99)\",\n  drag: true,\n  direction: \"ltr\",\n  slideFocus: true,\n  trimSpace: true,\n  classes: CLASSES,\n  i18n: I18N\n};\n\nfunction Fade(Splide2, Components2, options) {\n  const { on } = EventInterface(Splide2);\n  const { ruleBy } = Components2.Style;\n  function mount() {\n    on([EVENT_MOUNTED, EVENT_REFRESH], () => {\n      nextTick(() => {\n        Components2.Slides.forEach((Slide) => {\n          ruleBy(Slide.slide, \"transition\", `opacity ${options.speed}ms ${options.easing}`);\n        });\n      });\n    });\n  }\n  function start(index, done) {\n    const { track } = Components2.Elements;\n    ruleBy(track, \"height\", unit(rect(track).height));\n    nextTick(() => {\n      done();\n      ruleBy(track, \"height\", \"\");\n    });\n  }\n  return {\n    mount,\n    start,\n    cancel: noop\n  };\n}\n\nfunction Slide(Splide2, Components2, options) {\n  const { bind } = EventInterface(Splide2);\n  const { Move, Controller } = Components2;\n  const { list } = Components2.Elements;\n  let endCallback;\n  function mount() {\n    bind(list, \"transitionend\", (e) => {\n      if (e.target === list && endCallback) {\n        cancel();\n        endCallback();\n      }\n    });\n  }\n  function start(index, done) {\n    const destination = Move.toPosition(index, true);\n    const position = Move.getPosition();\n    const speed = getSpeed(index);\n    if (abs(destination - position) >= 1 && speed >= 1) {\n      apply(`transform ${speed}ms ${options.easing}`);\n      Move.translate(destination);\n      endCallback = done;\n    } else {\n      Move.jump(index);\n      done();\n    }\n  }\n  function cancel() {\n    apply(\"\");\n  }\n  function getSpeed(index) {\n    const { rewindSpeed } = options;\n    if (Splide2.is(SLIDE) && rewindSpeed) {\n      const prev = Controller.getIndex(true);\n      const end = Controller.getEnd();\n      if (prev === 0 && index >= end || prev >= end && index === 0) {\n        return rewindSpeed;\n      }\n    }\n    return options.speed;\n  }\n  function apply(transition) {\n    Components2.Style.ruleBy(list, \"transition\", transition);\n  }\n  return {\n    mount,\n    start,\n    cancel\n  };\n}\n\nconst _Splide = class {\n  constructor(target, options) {\n    this.event = EventBus();\n    this.Components = {};\n    this.state = State(CREATED);\n    this.splides = [];\n    this._options = {};\n    this._Extensions = {};\n    const root = isString(target) ? query(document, target) : target;\n    assert(root, `${root} is invalid.`);\n    this.root = root;\n    merge(DEFAULTS, _Splide.defaults);\n    merge(merge(this._options, DEFAULTS), options || {});\n  }\n  mount(Extensions, Transition) {\n    const { state, Components: Components2 } = this;\n    assert(state.is([CREATED, DESTROYED]), \"Already mounted.\");\n    state.set(CREATED);\n    this._Components = Components2;\n    this._Transition = Transition || this._Transition || (this.is(FADE) ? Fade : Slide);\n    this._Extensions = Extensions || this._Extensions;\n    const Constructors = assign({}, ComponentConstructors, this._Extensions, { Transition: this._Transition });\n    forOwn(Constructors, (Component, key) => {\n      const component = Component(this, Components2, this._options);\n      Components2[key] = component;\n      component.setup && component.setup();\n    });\n    forOwn(Components2, (component) => {\n      component.mount && component.mount();\n    });\n    this.emit(EVENT_MOUNTED);\n    addClass(this.root, CLASS_INITIALIZED);\n    state.set(IDLE);\n    this.emit(EVENT_READY);\n    return this;\n  }\n  sync(splide) {\n    this.splides.push(splide);\n    splide.splides.push(this);\n    return this;\n  }\n  go(control) {\n    this._Components.Controller.go(control);\n  }\n  on(events, callback) {\n    this.event.on(events, callback, null, DEFAULT_USER_EVENT_PRIORITY);\n    return this;\n  }\n  off(events) {\n    this.event.off(events);\n    return this;\n  }\n  emit(event, ...args) {\n    this.event.emit(event, ...args);\n    return this;\n  }\n  add(slides, index) {\n    this._Components.Slides.add(slides, index);\n    return this;\n  }\n  remove(matcher) {\n    this._Components.Slides.remove(matcher);\n    return this;\n  }\n  is(type) {\n    return this._options.type === type;\n  }\n  refresh() {\n    this.emit(EVENT_REFRESH);\n    return this;\n  }\n  destroy(completely) {\n    const { event, state } = this;\n    if (state.is(CREATED)) {\n      event.on(EVENT_READY, this.destroy.bind(this, completely), this);\n    } else {\n      forOwn(this._Components, (component) => {\n        component.destroy && component.destroy(completely);\n      });\n      event.emit(EVENT_DESTROY);\n      event.destroy();\n      empty(this.splides);\n      state.set(DESTROYED);\n    }\n    return this;\n  }\n  get options() {\n    return this._options;\n  }\n  set options(options) {\n    const { _options } = this;\n    merge(_options, options);\n    if (!this.state.is(CREATED)) {\n      this.emit(EVENT_UPDATED, _options);\n    }\n  }\n  get length() {\n    return this._Components.Slides.getLength(true);\n  }\n  get index() {\n    return this._Components.Controller.getIndex();\n  }\n};\nlet Splide = _Splide;\nSplide.defaults = {};\nSplide.STATES = STATES;\n\nexport { CLASSES, CLASS_ACTIVE, CLASS_ARROW, CLASS_ARROWS, CLASS_ARROW_NEXT, CLASS_ARROW_PREV, CLASS_AUTOPLAY, CLASS_CLONE, CLASS_CONTAINER, CLASS_INITIALIZED, CLASS_LIST, CLASS_LOADING, CLASS_NEXT, CLASS_PAGINATION, CLASS_PAGINATION_PAGE, CLASS_PAUSE, CLASS_PLAY, CLASS_PREV, CLASS_PROGRESS, CLASS_PROGRESS_BAR, CLASS_ROOT, CLASS_SLIDE, CLASS_SLIDER, CLASS_SPINNER, CLASS_TRACK, CLASS_VISIBLE, EVENT_ACTIVE, EVENT_ARROWS_MOUNTED, EVENT_ARROWS_UPDATED, EVENT_AUTOPLAY_PAUSE, EVENT_AUTOPLAY_PLAY, EVENT_AUTOPLAY_PLAYING, EVENT_CLICK, EVENT_DESTROY, EVENT_DRAG, EVENT_DRAGGED, EVENT_DRAGGING, EVENT_HIDDEN, EVENT_INACTIVE, EVENT_LAZYLOAD_LOADED, EVENT_MOUNTED, EVENT_MOVE, EVENT_MOVED, EVENT_NAVIGATION_MOUNTED, EVENT_PAGINATION_MOUNTED, EVENT_PAGINATION_PAGE, EVENT_PAGINATION_UPDATED, EVENT_READY, EVENT_REFRESH, EVENT_RESIZE, EVENT_RESIZED, EVENT_SCROLL, EVENT_SCROLLED, EVENT_SLIDE_KEYDOWN, EVENT_UPDATED, EVENT_VISIBLE, EventBus, EventInterface, RequestInterval, STATUS_CLASSES, Splide, State, Throttle, Splide as default };\n","/**\r\n * Empties the array.\r\n *\r\n * @param array - A array to empty.\r\n */\r\nexport function empty( array: any[] ): void {\r\n  array.length = 0;\r\n}\r\n","/**\r\n * Checks if the given subject is an object or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an object, or otherwise `false`.\r\n */\r\nexport function isObject( subject: unknown ): subject is object {\r\n  return ! isNull( subject ) && typeof subject === 'object';\r\n}\r\n\r\n/**\r\n * Checks if the given subject is an array or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an array, or otherwise `false`.\r\n */\r\nexport function isArray<T>( subject: unknown ): subject is T[] {\r\n  return Array.isArray( subject );\r\n}\r\n\r\n/**\r\n * Checks if the given subject is a function or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is a function, or otherwise `false`.\r\n */\r\nexport function isFunction( subject: unknown ): subject is ( ...args: any[] ) => any {\r\n  return typeof subject === 'function';\r\n}\r\n\r\n/**\r\n * Checks if the given subject is a string or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is a string, or otherwise `false`.\r\n */\r\nexport function isString( subject: unknown ): subject is string {\r\n  return typeof subject === 'string';\r\n}\r\n\r\n/**\r\n * Checks if the given subject is `undefined` or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is `undefined`, or otherwise `false`.\r\n */\r\nexport function isUndefined( subject: unknown ): subject is undefined {\r\n  return typeof subject === 'undefined';\r\n}\r\n\r\n/**\r\n * Checks if the given subject is `null` or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is `null`, or otherwise `false`.\r\n */\r\nexport function isNull( subject: unknown ): subject is null {\r\n  return subject === null;\r\n}\r\n\r\n/**\r\n * Checks if the given subject is an HTMLElement or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an HTMLElement instance, or otherwise `false`.\r\n */\r\nexport function isHTMLElement( subject: unknown ): subject is HTMLElement {\r\n  return subject instanceof HTMLElement;\r\n}\r\n\r\n/**\r\n * Checks if the given subject is an HTMLButtonElement or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an HTMLButtonElement, or otherwise `false`.\r\n */\r\nexport function isHTMLButtonElement( subject: unknown ): subject is HTMLButtonElement {\r\n  return subject instanceof HTMLButtonElement;\r\n}\r\n","import { isArray } from '../../type/type';\r\n\r\n\r\n/**\r\n * Push the provided value to an array if the value is not an array.\r\n *\r\n * @param value - A value to push.\r\n *\r\n * @return An array containing the value, or the value itself if it is already an array.\r\n */\r\nexport function toArray<T>( value: T | T[] ): T[] {\r\n  return isArray( value ) ? value : [ value ];\r\n}\r\n","import { toArray } from '../toArray/toArray';\r\n\r\n\r\n/**\r\n * The extended `Array#forEach` method that accepts a single value as an argument.\r\n *\r\n * @param values   - A value or values to iterate over.\r\n * @param iteratee - An iteratee function.\r\n */\r\nexport function forEach<T>( values: T | T[], iteratee: ( value: T, index: number, array: T[] ) => void ): void {\r\n  toArray( values ).forEach( iteratee );\r\n}\r\n","import { toArray } from '../toArray/toArray';\r\n\r\n\r\n/**\r\n * Extended `Array#push()` that accepts an item or an array with items.\r\n *\r\n * @param array - An array to push items.\r\n * @param items - An item or items to push.\r\n *\r\n * @return A provided array itself.\r\n */\r\nexport function push<T>( array: T[], items: T | T[] ): T[] {\r\n  array.push( ...toArray( items ) );\r\n  return array;\r\n}\r\n","export { empty }    from './empty/empty';\r\nexport { forEach }  from './forEach/forEach';\r\nexport { includes } from './includes/includes';\r\nexport { push }     from './push/push';\r\nexport { toArray }  from './toArray/toArray';\r\n\r\nexport const arrayProto = Array.prototype;\r\n","import { arrayProto } from '../../array';\r\n\r\n\r\n/**\r\n * The slice method for an array-like object.\r\n *\r\n * @param arrayLike - An array-like object.\r\n * @param start     - Optional. A start index.\r\n * @param end       - Optional. A end index.\r\n *\r\n * @return An array with sliced elements.\r\n */\r\nexport function slice<T>( arrayLike: ArrayLike<T>, start?: number, end?: number ): T[] {\r\n  return arrayProto.slice.call( arrayLike, start, end );\r\n}\r\n","import { slice } from '../slice/slice';\r\n\r\n\r\n/**\r\n * The find method for an array or array-like object, works in IE.\r\n * This method is not performant for a huge array.\r\n *\r\n * @param arrayLike - An array-like object.\r\n * @param predicate - The predicate function to test each element in the object.\r\n *\r\n * @return A found value if available, or otherwise `undefined`.\r\n */\r\nexport function find<T>(\r\n  arrayLike: ArrayLike<T>,\r\n  predicate: ( value: T, index: number, array: T[] ) => any\r\n): T | undefined {\r\n  return slice( arrayLike ).filter( predicate )[ 0 ];\r\n}\r\n","import { forEach } from '../../array';\r\n\r\n\r\n/**\r\n * Toggles the provided class or classes by following the `add` boolean.\r\n *\r\n * @param elm     - An element whose classes are toggled.\r\n * @param classes - A class or class names.\r\n * @param add     - Whether to add or remove a class.\r\n */\r\nexport function toggleClass( elm: Element, classes: string | string[], add: boolean ): void {\r\n  if ( elm ) {\r\n    forEach( classes, name => {\r\n      if ( name ) {\r\n        elm.classList[ add ? 'add' : 'remove' ]( name );\r\n      }\r\n    } );\r\n  }\r\n}\r\n","import { toggleClass } from '../toggleClass/toggleClass';\r\n\r\n\r\n/**\r\n * Adds classes to the element.\r\n *\r\n * @param elm     - An element to add classes to.\r\n * @param classes - Classes to add.\r\n */\r\nexport function addClass( elm: Element, classes: string | string[] ): void {\r\n  toggleClass( elm, classes, true );\r\n}\r\n","import { forEach } from '../../array';\r\n\r\n\r\n/**\r\n * Appends children to the parent element.\r\n *\r\n * @param parent   - A parent element.\r\n * @param children - A child or children to append to the parent.\r\n */\r\nexport function append( parent: Element, children: Node | Node[] ): void {\r\n  forEach( children, parent.appendChild.bind( parent ) );\r\n}\r\n","/**\r\n * Checks if the element can be selected by the provided selector or not.\r\n *\r\n * @param elm      - An element to check.\r\n * @param selector - A selector to test.\r\n *\r\n * @return `true` if the selector matches the element, or otherwise `false`.\r\n */\r\nexport function matches( elm: Element, selector: string ): boolean {\r\n  return ( elm[ 'msMatchesSelector' ] || elm.matches ).call( elm, selector );\r\n}\r\n","import { slice } from '../../arrayLike';\r\nimport { matches } from '../matches/matches';\r\n\r\n\r\n/**\r\n * Finds children that has the specified tag or class name.\r\n *\r\n * @param parent   - A parent element.\r\n * @param selector - A selector to filter children.\r\n *\r\n * @return An array with filtered children.\r\n */\r\nexport function children<E extends HTMLElement>( parent: HTMLElement, selector: string ): E[] {\r\n  return parent ? slice( parent.children ).filter( child => matches( child, selector ) ) as E[] : [];\r\n}\r\n","import { children } from '../children/children';\r\n\r\n\r\n/**\r\n * Returns a child element that matches the specified tag or class name.\r\n *\r\n * @param parent   - A parent element.\r\n * @param selector - A selector to filter children.\r\n *\r\n * @return A matched child element if available, or otherwise `undefined`.\r\n */\r\nexport function child<E extends HTMLElement>( parent: HTMLElement, selector?: string ): E | undefined {\r\n  return selector ? children<E>( parent, selector )[ 0 ] : parent.firstElementChild as E;\r\n}\r\n","/**\r\n * Iterates over the provided object by own enumerable keys with calling the iteratee function.\r\n *\r\n * @param object   - An object to iterate over.\r\n * @param iteratee - An iteratee function that takes the value and key as arguments.\r\n *\r\n * @return A provided object itself.\r\n */\r\nexport function forOwn<T extends object>(\r\n  object: T,\r\n  iteratee: ( value: T[ keyof T ], key: string ) => boolean | void\r\n): T {\r\n  if ( object ) {\r\n    const keys = Object.keys( object );\r\n\r\n    for ( let i = 0; i < keys.length; i++ ) {\r\n      const key = keys[ i ];\r\n\r\n      if ( key !== '__proto__' ) {\r\n        if ( iteratee( object[ key ], key ) === false ) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return object;\r\n}\r\n","import { forOwn } from '../forOwn/forOwn';\r\n\r\n\r\n/**\r\n * Assign U to T.\r\n *\r\n * @typeParam T - An object to assign to.\r\n * @typeParam U - An object to assign.\r\n *\r\n * @return An assigned object type.\r\n */\r\nexport type Assign<T, U> = Omit<T, keyof U> & U;\r\n\r\nexport function assign<T extends object>( object: T ): T;\r\n\r\n// There is a way to type arguments recursively, but these fixed definitions are enough for this project.\r\nexport function assign<T extends object, U extends object>( object: T, source: U ): Assign<T, U>;\r\n\r\nexport function assign<T extends object, U1 extends object, U2 extends object>(\r\n  object: T, source1: U1, source2: U2\r\n): Assign<Assign<T, U1>, U2>;\r\n\r\nexport function assign<T extends object, U1 extends object, U2 extends object, U3 extends object>(\r\n  object: T, source1: U1, source2: U2, source3: U3\r\n): Assign<Assign<Assign<T, U1>, U2>, U3>;\r\n\r\n/**\r\n * Assigns all own enumerable properties of all source objects to the provided object.\r\n * `undefined` in source objects will be skipped.\r\n *\r\n * @param object  - An object to assign properties to.\r\n * @param sources - Objects to assign properties from.\r\n *\r\n * @return An object assigned properties of the sources to.\r\n */\r\nexport function assign<T extends object, U extends object>( object: T, ...sources: U[] ): any {\r\n  sources.forEach( source => {\r\n    forOwn( source, ( value, key ) => {\r\n      object[ key ] = source[ key ];\r\n    } );\r\n  } );\r\n\r\n  return object;\r\n}\r\n","import { forEach } from '../../array';\r\n\r\n\r\n/**\r\n * Removes attributes from the element.\r\n *\r\n * @param elm   - An element.\r\n * @param attrs - An attribute or attributes to remove.\r\n */\r\nexport function removeAttribute( elm: Element, attrs: string | string[] ): void {\r\n  if ( elm ) {\r\n    forEach( attrs, attr => {\r\n      elm.removeAttribute( attr );\r\n    } );\r\n  }\r\n}\r\n","import { forOwn } from '../../object';\r\nimport { isNull, isObject } from '../../type/type';\r\nimport { removeAttribute } from '../removeAttribute/removeAttribute';\r\n\r\n\r\nexport function setAttribute( elm: Element, attr: string, value: string | number | boolean ): void;\r\nexport function setAttribute( elm: Element, attrs: Record<string, string | number | boolean> ): void;\r\n\r\nexport function setAttribute(\r\n  elm: Element,\r\n  attrs: string | Record<string, string | number | boolean>,\r\n  value?: string | number | boolean\r\n): void {\r\n  if ( isObject( attrs ) ) {\r\n    forOwn( attrs, ( value, name ) => {\r\n      setAttribute( elm, name, value );\r\n    } );\r\n  } else {\r\n    isNull( value ) ? removeAttribute( elm, attrs ) : elm.setAttribute( attrs, String( value ) );\r\n  }\r\n}\r\n","import { isArray, isString } from '../../type/type';\r\nimport { addClass } from '../addClass/addClass';\r\nimport { append } from '../append/append';\r\nimport { setAttribute } from '../setAttribute/setAttribute';\r\n\r\n\r\nexport function create<K extends keyof HTMLElementTagNameMap>(\r\n  tag: K,\r\n  attrs?: Record<string, string | number | boolean> | string | string[],\r\n  parent?: HTMLElement\r\n): HTMLElementTagNameMap[ K ];\r\n\r\nexport function create(\r\n  tag: string,\r\n  attrs?: Record<string, string | number | boolean> | string | string[],\r\n  parent?: HTMLElement\r\n): HTMLElement;\r\n\r\n/**\r\n * Creates a HTML element.\r\n *\r\n * @param tag    - A tag name.\r\n * @param attrs  - Optional. An object with attributes to apply the created element to, or a string with classes.\r\n * @param parent - Optional. A parent element where the created element is appended.\r\n */\r\nexport function create<K extends keyof HTMLElementTagNameMap>(\r\n  tag: K,\r\n  attrs?: Record<string, string | number | boolean> | string | string[],\r\n  parent?: HTMLElement\r\n): HTMLElementTagNameMap[ K ] {\r\n  const elm = document.createElement( tag );\r\n\r\n  if ( attrs ) {\r\n    if ( isString( attrs ) || isArray( attrs ) ) {\r\n      addClass( elm, attrs );\r\n    } else {\r\n      setAttribute( elm, attrs );\r\n    }\r\n  }\r\n\r\n  if ( parent ) {\r\n    append( parent, elm );\r\n  }\r\n\r\n  return elm;\r\n}\r\n","/**\r\n * Checks if the element contains the specified class or not.\r\n *\r\n * @param elm       - An element to check.\r\n * @param className - A class name that may be contained by the element.\r\n *\r\n * @return `true` if the element contains the class, or otherwise `false`.\r\n */\r\nexport function hasClass( elm: Element, className: string ): boolean {\r\n  return elm && elm.classList.contains( className );\r\n}\r\n","import { forEach } from '../../array';\r\n\r\n\r\n/**\r\n * Removes the provided node from its parent.\r\n *\r\n * @param nodes - A node or nodes to remove.\r\n */\r\nexport function remove( nodes: Node | Node[] ): void {\r\n  forEach( nodes, node => {\r\n    if ( node && node.parentNode ) {\r\n      node.parentNode.removeChild( node );\r\n    }\r\n  } );\r\n}\r\n","import { slice } from '../../arrayLike';\r\n\r\n\r\n/**\r\n * Returns elements that match the provided selector.\r\n *\r\n * @param parent   - A parent element to start searching from.\r\n * @param selector - A selector to query.\r\n *\r\n * @return An array with matched elements.\r\n */\r\nexport function queryAll<E extends Element = Element>( parent: Element | Document, selector: string ): E[] {\r\n  return slice<E>( parent.querySelectorAll( selector ) );\r\n}\r\n","import { toggleClass } from '../toggleClass/toggleClass';\r\n\r\n\r\n/**\r\n * Removes classes from the element.\r\n *\r\n * @param elm     - An element to remove classes from.\r\n * @param classes - Classes to remove.\r\n */\r\nexport function removeClass( elm: Element, classes: string | string[] ): void {\r\n  toggleClass( elm, classes, false );\r\n}\r\n","import { isString } from '../../type/type';\r\n\r\n\r\n/**\r\n * Appends `px` to the provided number.\r\n * If the value is already string, just returns it.\r\n *\r\n * @param value - A value to append `px` to.\r\n *\r\n * @return A string with the CSS unit.\r\n */\r\nexport function unit( value: number | string ): string {\r\n  return isString( value ) ? value : value ? `${ value }px` : '';\r\n}\r\n","/**\r\n * The project code.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const PROJECT_CODE = 'splide';\r\n\r\n/**\r\n * The data attribute prefix.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const DATA_ATTRIBUTE = `data-${ PROJECT_CODE }`;\r\n","import { PROJECT_CODE } from '../../../constants/project';\r\n\r\n\r\n/**\r\n * Throws an error if the provided condition is falsy.\r\n *\r\n * @param condition - If falsy, an error is thrown.\r\n * @param message   - Optional. A message to display.\r\n */\r\nexport function assert( condition: any, message = '' ): void {\r\n  if ( ! condition ) {\r\n    throw new Error( `[${ PROJECT_CODE }] ${ message }` );\r\n  }\r\n}\r\n","export { approximatelyEqual } from './approximatelyEqual/approximatelyEqual';\r\nexport { between }            from './between/between';\r\nexport { clamp }              from './clamp/clamp';\r\nexport { sign }               from './sign/sign';\r\n\r\nexport const { min, max, floor, ceil, abs, round } = Math;\r\n","/**\r\n * Pads the number with 0.\r\n *\r\n * @param number - A number to pad.\r\n *\r\n * @return string - Padded number.\r\n */\r\nexport function pad( number: number ): string {\r\n  return number < 10 ? `0${ number }` : `${ number }`;\r\n}\r\n","import { CLASS_SLIDE } from '@splidejs/splide';\n\n\nexport const CLASS_SLIDE_ROW = `${ CLASS_SLIDE }__row`;\nexport const CLASS_SLIDE_COL = `${ CLASS_SLIDE }--col`;\n","import { GridOptions } from '../types/options';\n\n\n/**\n * Default options.\n *\n * @since 0.3.0\n */\nexport const DEFAULTS: GridOptions = {\n  rows      : 1,\n  cols      : 1,\n  dimensions: [],\n  gap       : {},\n};\n","import { isArray, min, assert } from '@splidejs/splide/src/js/utils';\nimport { GridOptions } from '../../types/options';\n\n\n/**\n * The interface for the Dimension sub component.\n *\n * @since 0.3.0\n */\nexport interface DimensionComponent {\n  get( index: number ): [ number, number ];\n  getAt( index: number ): [ number, number ];\n}\n\n/**\n * The sub component to calculate dimension at the specific index.\n *\n * @param options - Initialized grid options.\n *\n * @return A Dimension sub component.\n */\nexport function Dimension( options: GridOptions ): DimensionComponent {\n  /**\n   * Retrieves the dimension array from options.\n   * If it is not available, returns [ [ options.rows, options.cols ] ].\n   *\n   * @return An array with dimensions.\n   */\n  function normalize(): [ number, number ][] {\n    const { rows, cols, dimensions } = options;\n    return isArray( dimensions ) && dimensions.length ? dimensions : [ [ rows, cols ] ];\n  }\n\n  /**\n   * Returns the dimension (`[ row, col ]`) at the specified index.\n   *\n   * @param index - An index.\n   *\n   * @return A tuple with rows and cols.\n   */\n  function get( index: number ): [ number, number ] {\n    const dimensions = normalize();\n    return dimensions[ min( index, dimensions.length - 1 ) ];\n  }\n\n  /**\n   * Returns the dimension (`[ row, col ]`) where the slide at the specified index should belong.\n   *\n   * @param index - A slide index (before they are assigned to cols).\n   *\n   * @return A tuple with rows and cols.\n   */\n  function getAt( index: number ): [ number, number ] {\n    const dimensions = normalize();\n\n    let rows, cols, aggregator = 0\n\n    for ( let i = 0; i < dimensions.length; i++ ) {\n      const dimension = dimensions[ i ];\n      rows = dimension[ 0 ] || 1;\n      cols = dimension[ 1 ] || 1;\n\n      aggregator += rows * cols;\n\n      if ( index < aggregator ) {\n        break;\n      }\n    }\n\n    assert( rows && cols, 'Invalid dimension' );\n\n    return [ rows, cols ];\n  }\n\n  return {\n    get,\n    getAt,\n  }\n}\n","import { BaseComponent } from '../../types';\r\nimport { create, find, isHTMLElement, remove } from '../../utils';\r\n\r\n/**\r\n * The interface for the Style component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface StyleComponent extends BaseComponent {\r\n  rule( selector: string, prop: string, value: string | number ): void;\r\n  ruleBy( target: string | HTMLElement, prop: string, value: string | number ): void;\r\n}\r\n\r\n/**\r\n * The component for managing styles of the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @return A Style component object.\r\n */\r\nexport function Style(): StyleComponent {\r\n  /**\r\n   * The style element for the slider.\r\n   */\r\n  let style: HTMLStyleElement;\r\n\r\n  /**\r\n   * The CSSStyleSheet object of the created style element.\r\n   */\r\n  let sheet: CSSStyleSheet;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    style = create( 'style', {}, document.head );\r\n    sheet = style.sheet;\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    remove( style );\r\n    sheet = null;\r\n  }\r\n\r\n  /**\r\n   * Registers the style for the selector.\r\n   *\r\n   * @param selector - A selector string.\r\n   * @param prop     - A CSS property, accepting the camel case.\r\n   * @param value    - A CSS value.\r\n   */\r\n  function rule( selector: string, prop: string, value: string | number ): void {\r\n    const { cssRules } = sheet;\r\n    const cssRule = find( cssRules, cssRule => isCSSStyleRule( cssRule ) && cssRule.selectorText === selector )\r\n      || cssRules[ sheet.insertRule( `${ selector }{}`, 0 ) ];\r\n\r\n    if ( isCSSStyleRule( cssRule ) ) {\r\n      cssRule.style[ prop ] = `${ value }`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registers the style by the element or the ID.\r\n   *\r\n   * @param target - A target element or ID.\r\n   * @param prop   - A CSS property, accepting the camel case.\r\n   * @param value  - A CSS value.\r\n   */\r\n  function ruleBy( target: string | HTMLElement, prop: string, value: string | number ): void {\r\n    rule( `#${ isHTMLElement( target ) ? target.id : target }`, prop, value );\r\n  }\r\n\r\n  /**\r\n   * Checks if the provided rule is a CSSStyleRule instance or not.\r\n   *\r\n   * @param cssRule - An instance to check.\r\n   *\r\n   * @return `true` if the cssRule is an instance of CSSStyleRule, or otherwise `false`.\r\n   */\r\n  function isCSSStyleRule( cssRule: CSSRule ): cssRule is CSSStyleRule {\r\n    return cssRule instanceof CSSStyleRule;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy,\r\n    rule,\r\n    ruleBy,\r\n  };\r\n}\r\n","import { CLASS_CONTAINER, EVENT_HIDDEN, EVENT_VISIBLE, EventInterface, Splide } from '@splidejs/splide';\nimport { SlideComponent } from '@splidejs/splide/src/js/components/Slides/Slide';\nimport { Style as StyleConstructor } from '@splidejs/splide/src/js/components/Style/Style';\nimport { child, pad, queryAll, setAttribute, unit } from '@splidejs/splide/src/js/utils';\nimport { CLASS_SLIDE_COL, CLASS_SLIDE_ROW } from '../../constants/classes';\nimport { GridOptions } from '../../types/options';\nimport { DimensionComponent } from './Dimension';\n\n\n/**\n * The interface for the Layout sub component.\n *\n * @since 0.5.0\n */\nexport interface LayoutComponent {\n  mount(): void;\n  destroy(): void;\n}\n\n/**\n * The sub components to layout grids.\n *\n * @since 0.5.0\n *\n * @param Splide      - A Splide instance.\n * @param gridOptions - Initialized grid options.\n * @param Dimension   - A Dimension sub component.\n *\n * @return A Layout sub component object.\n */\nexport function Layout( Splide: Splide, gridOptions: GridOptions, Dimension: DimensionComponent ): LayoutComponent {\n  const { on, destroy: destroyEvent } = EventInterface( Splide );\n  const { Components, options } = Splide;\n  const { resolve } = Components.Direction;\n  const { forEach } = Components.Slides;\n  const Style = StyleConstructor();\n  const { rule } = Style;\n\n  /**\n   * Initializes the component.\n   */\n  function mount(): void {\n    Style.mount();\n\n    layout();\n\n    if ( options.slideFocus ) {\n      on( EVENT_VISIBLE, onVisible );\n      on( EVENT_HIDDEN, onHidden );\n    }\n  }\n\n  /**\n   * Destroys the component.\n   */\n  function destroy(): void {\n    forEach( Slide => {\n      toggleTabIndex( Slide.slide, false );\n    } );\n\n    Style.destroy();\n    destroyEvent();\n  }\n\n  /**\n   * Layouts grid elements.\n   */\n  function layout(): void {\n    forEach( Slide => {\n      const { slide } = Slide;\n      const [ rows, cols ] = Dimension.get( Slide.isClone ? Slide.slideIndex : Slide.index );\n      const rowSelector = buildSelector( slide );\n\n      layoutRow( rows, rowSelector );\n      layoutCol( cols, buildSelector( slide, true ) );\n\n      getColsIn( Slide.slide ).forEach( ( colSlide, index ) => {\n        colSlide.id = `${ Slide.slide.id }-col${ pad( index + 1 ) }`;\n        cover( colSlide );\n      } );\n    } );\n  }\n\n  /**\n   * Layouts row elements by CSS.\n   *\n   * @param rows     - A number of rows.\n   * @param selector - A selector.\n   */\n  function layoutRow( rows: number, selector: string ): void {\n    const { row: rowGap } = gridOptions.gap;\n    const height = `calc(${ 100 / rows }%${ rowGap ? ` - ${ unit( rowGap ) } * ${ ( rows - 1 ) / rows }` : '' })`;\n\n    rule( selector, 'height', height );\n    rule( selector, 'display', 'flex' );\n    rule( selector, 'margin', `0 0 ${ unit( rowGap ) } 0` );\n    rule( selector, 'padding', 0 );\n    rule( `${ selector }:last-child`, 'marginBottom', 0 );\n  }\n\n  /**\n   * Layouts col elements by CSS.\n   *\n   * @param cols     - A number of cols.\n   * @param selector - A selector.\n   */\n  function layoutCol( cols: number, selector: string ): void {\n    const { col: colGap } = gridOptions.gap;\n    const width = `calc(${ 100 / cols }%${ colGap ? ` - ${ unit( colGap ) } * ${ ( cols - 1 ) / cols }` : '' })`;\n\n    rule( selector, 'width', width );\n    rule( `${ selector }:not(:last-child)`, resolve( 'marginRight' ), unit( colGap ) );\n  }\n\n  /**\n   * Sets the background image to the col element by its own image element.\n   *\n   * @param colSlide - A col slide element.\n   */\n  function cover( colSlide: HTMLElement ): void {\n    const container = child( colSlide, `.${ CLASS_CONTAINER }` );\n    const img       = child<HTMLImageElement>( container || colSlide, 'img' );\n\n    if ( img && img.src ) {\n      const selector = `#${ colSlide.id }${ container ? ` > .${ CLASS_CONTAINER }` : '' }`;\n      rule( selector, 'background', `center/cover no-repeat url(\"${ img.src }\")` );\n      rule( `${ selector } > img`, 'display', 'none' );\n    }\n  }\n\n  /**\n   * Builds selector for a row or a col in the provided slide.\n   *\n   * @param slide - A slide element.\n   * @param col   - Optional. Determines whether to build a selector for a col or a row.\n   */\n  function buildSelector( slide: HTMLElement, col?: boolean ): string {\n    return `#${ slide.id } > .${ CLASS_SLIDE_ROW }${ col ? ` > .${ CLASS_SLIDE_COL }` : '' }`;\n  }\n\n  /**\n   * Returns col elements in the provided slide.\n   *\n   * @param slide - A slide element.\n   *\n   * @return An array with col elements.\n   */\n  function getColsIn( slide: HTMLElement ): HTMLElement[] {\n    return queryAll( slide.parentElement, buildSelector( slide, true ) );\n  }\n\n  /**\n   * Toggles the tab index of col elements.\n   *\n   * @param slide - A slide element.\n   * @param add   - Optional. Determines whether to add or remove tab index.\n   */\n  function toggleTabIndex( slide: HTMLElement, add?: boolean ): void {\n    getColsIn( slide ).forEach( colSlide => {\n      setAttribute( colSlide, 'tabindex', add ? 0 : null );\n    } );\n  }\n\n  /**\n   * Called when any slide becomes visible.\n   *\n   * @param Slide - A Slide component.\n   */\n  function onVisible( Slide: SlideComponent ): void {\n    toggleTabIndex( Slide.slide, true );\n  }\n\n  /**\n   * Called when any slide gets hidden.\n   *\n   * @param Slide - A Slide component.\n   */\n  function onHidden( Slide: SlideComponent ): void {\n    toggleTabIndex( Slide.slide, false );\n  }\n\n  return {\n    mount,\n    destroy,\n  }\n}\n","import {\n  BaseComponent, CLASS_ROOT,\n  CLASS_SLIDE,\n  Components,\n  EVENT_REFRESH,\n  EVENT_UPDATED,\n  EventInterface,\n  Options,\n  Splide,\n} from '@splidejs/splide';\nimport {\n  addClass,\n  append,\n  assign,\n  create,\n  remove,\n  removeClass,\n  isArray,\n  push,\n  empty,\n  hasClass,\n} from '@splidejs/splide/src/js/utils';\nimport { CLASS_SLIDE_COL, CLASS_SLIDE_ROW } from '../../constants/classes';\nimport { DEFAULTS } from '../../constants/defaults';\nimport { GridOptions } from '../../types/options';\nimport { Dimension as DimensionConstructor } from './Dimension';\nimport { Layout as LayoutConstructor } from './Layout';\n\n\n/**\n * Lets the compiler know the type of video options.\n */\ndeclare module '@splidejs/splide' {\n  interface Options {\n    grid?: GridOptions | null | false;\n  }\n}\n\n/**\n * The extension for the grid slider.\n *\n * @since 0.5.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return A Video component object.\n */\nexport function Grid( Splide: Splide, Components: Components, options: Options ): BaseComponent {\n  const { on, off } = EventInterface( Splide );\n  const { Elements } = Components;\n\n  /**\n   * Options for the extension.\n   */\n  const gridOptions: GridOptions = {};\n\n  /**\n   * The Dimension sub component.\n   */\n  const Dimension = DimensionConstructor( gridOptions );\n\n  /**\n   * The Layout sub component.\n   */\n  const Layout = LayoutConstructor( Splide, gridOptions, Dimension );\n\n  /**\n   * The modifier class to add to the root element.\n   */\n  const modifier = `${ CLASS_ROOT }--grid`;\n\n  /**\n   * Keeps original slides for restoration.\n   */\n  const originalSlides: HTMLElement[] = [];\n\n  /**\n   * Initializes the grid options.\n   */\n  function setup(): void {\n    options.grid = assign( {}, DEFAULTS, options.grid || {} );\n  }\n\n  /**\n   * Called when the extension is mounted.\n   */\n  function mount(): void {\n    init();\n    on( EVENT_UPDATED, init );\n  }\n\n  /**\n   * Initializes the extension when the slider gets active, or options are updated.\n   */\n  function init(): void {\n    assign( gridOptions, options.grid || DEFAULTS );\n\n    if ( shouldBuild() ) {\n      if ( isActive() ) {\n        destroy();\n      }\n\n      push( originalSlides, Elements.slides );\n      addClass( Splide.root, modifier );\n      append( Elements.list, build() );\n      on( EVENT_REFRESH, layout );\n      refresh();\n    } else if ( isActive() ) {\n      destroy();\n      refresh();\n    }\n  }\n\n  /**\n   * Destroys the extension.\n   * Deconstructs grids and restores original slides to the list element.\n   */\n  function destroy(): void {\n    const { slides } = Elements;\n\n    Layout.destroy();\n\n    originalSlides.forEach( slide => {\n      removeClass( slide, CLASS_SLIDE_COL );\n      append( Elements.list, slide );\n    } );\n\n    remove( slides );\n    removeClass( Splide.root, modifier );\n    empty( slides );\n    push( slides, originalSlides );\n    empty( originalSlides );\n\n    off( EVENT_REFRESH );\n  }\n\n  /**\n   * Requests to refresh the slider.\n   */\n  function refresh(): void {\n    Splide.refresh();\n  }\n\n  /**\n   * Layouts row and col slides via the Layout sub component.\n   * The extension calls this after requesting ths slider to refresh it.\n   */\n  function layout(): void {\n    if ( isActive() ) {\n      Layout.mount();\n    }\n  }\n\n  /**\n   * Builds grid and returns created outer slide elements.\n   *\n   * @return An array with outer slides.\n   */\n  function build(): HTMLElement[] {\n    const outerSlides: HTMLElement[] = [];\n\n    let row = 0, col = 0;\n    let outerSlide: HTMLElement, rowSlide: HTMLElement, colSlide: HTMLElement;\n\n    originalSlides.forEach( ( slide, index ) => {\n      const [ rows, cols ] = Dimension.getAt( index );\n\n      if ( ! col ) {\n        if ( ! row ) {\n          outerSlide = create( slide.tagName, CLASS_SLIDE );\n          outerSlides.push( outerSlide );\n        }\n\n        rowSlide = buildRow( rows, slide, outerSlide );\n      }\n\n      colSlide = buildCol( cols, slide, rowSlide );\n\n      if ( ++col >= cols ) {\n        col = 0;\n        row = ++row >= rows ? 0 : row;\n      }\n    } );\n\n    return outerSlides;\n  }\n\n  /**\n   * Creates an element for a row.\n   *\n   * @param rows       - A number of rows.\n   * @param slide      - An original slide element.\n   * @param outerSlide - An outer slide element.\n   *\n   * A created element.\n   */\n  function buildRow( rows: number, slide: HTMLElement, outerSlide: HTMLElement ): HTMLElement {\n    const tag = slide.tagName.toLowerCase() === 'li' ? 'ul' : 'div';\n    return create( tag, CLASS_SLIDE_ROW, outerSlide );\n  }\n\n  /**\n   * Creates an element for a col.\n   * Currently, uses the original slide element itself.\n   *\n   * @param cols     - A number of cols.\n   * @param slide    - An original slide element.\n   * @param rowSlide - A row slide element.\n   *\n   * @return A created element.\n   */\n  function buildCol( cols: number, slide: HTMLElement, rowSlide: HTMLElement ): HTMLElement {\n    addClass( slide, CLASS_SLIDE_COL );\n    append( rowSlide, slide );\n    return slide;\n  }\n\n  /**\n   * Tells if the extension should make grids or not by checking the current options.\n   *\n   * @return `true` if the extension should init grids, or otherwise `false`.\n   */\n  function shouldBuild(): boolean {\n    if ( options.grid ) {\n      const { rows, cols, dimensions } = gridOptions;\n      return rows > 1 || cols > 1 || ( isArray( dimensions ) && dimensions.length > 0 );\n    }\n\n    return false;\n  }\n\n  /**\n   * Checks if the grid mode is active or not.\n   *\n   * @return `true` if the grid extension is active, or `false` if not.\n   */\n  function isActive(): boolean {\n    return hasClass( Splide.root, modifier );\n  }\n\n  return {\n    setup,\n    mount,\n    destroy,\n  }\n}\n","import { Grid } from '../extensions';\n\n\ndeclare global {\n  interface Window {\n    splide: Record<string, any>;\n  }\n}\n\nif ( typeof window !== 'undefined' ) {\n  window.splide = window.splide || {};\n  window.splide.Extensions = window.splide.Extensions || {};\n  window.splide.Extensions.Grid = Grid;\n}\n"],"names":["PROJECT_CODE","subject","Array","isArray","value","values","iteratee","forEach","EVENT_VISIBLE","EVENT_HIDDEN","EVENT_REFRESH","EVENT_UPDATED","EVENT_DESTROY","Splide22","event","key","listeners","events","callback","priority","on","off","targets","options","target","event2","push","addEventListener","filter","listener","removeEventListener","split","bind","data","unbind","offBy","destroy","emit","CLASS_ROOT","CLASS_SLIDE","CLASS_CONTAINER","array","length","isNull2","HTMLElement","isArray2","items","toArray2","arrayProto2","prototype","arrayLike","start","end","slice","call","predicate","slice2","elm","classes","add","name","classList","parent","children3","appendChild","selector","matches","children","matches2","child3","children2","firstElementChild","object","keys","Object","i","sources","source","attrs","removeAttribute","attr","isObject2","value2","removeAttribute2","setAttribute","String","tag","document","createElement","isString2","className","contains","nodes","node","parentNode","removeChild","querySelectorAll","PROJECT_CODE2","condition","message","Error","Math","min","max","floor","ceil","abs","round","number","CLASS_SLIDE_ROW","CLASS_SLIDE_COL","DEFAULTS2","rows","cols","dimensions","gap","index","normalize","min2","aggregator","dimension","get","getAt","style3","sheet","create2","head","prop","cssRules","cssRule","find2","isCSSStyleRule","cssRule2","selectorText","insertRule","style","isHTMLElement2","id","CSSStyleRule","mount","rule","ruleBy","Splide4","gridOptions","Dimension2","EventInterface","destroyEvent","Components","resolve","Components2","Direction","Slides","Style3","Style2","slideFocus","onVisible","onHidden","Slide2","slide","isClone","slideIndex","rowSelector","buildSelector","colSlide","pad2","rowGap","row","height","unit2","colGap","col","width","container","child2","img","src","queryAll2","parentElement","Elements","Dimension","Layout3","Layout2","modifier","originalSlides","grid","assign2","init","shouldBuild","isActive","Elements2","slides","root","list","build","layout","refresh","outerSlides","outerSlide","rowSlide","tagName","buildRow","buildCol","toLowerCase","hasClass2","setup","window","splide","Extensions","Grid"],"mappings":"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"}