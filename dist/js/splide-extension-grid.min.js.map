{"version":3,"file":"splide-extension-grid.min.js","sources":["../../src/splide/dist/js/splide.esm.js","../../src/splide/src/js/utils/array/empty/empty.ts","../../src/splide/src/js/utils/type/type.ts","../../src/splide/src/js/utils/array/toArray/toArray.ts","../../src/splide/src/js/utils/array/forEach/forEach.ts","../../src/splide/src/js/utils/array/push/push.ts","../../src/splide/src/js/utils/array/index.ts","../../src/splide/src/js/utils/arrayLike/slice/slice.ts","../../src/splide/src/js/utils/arrayLike/find/find.ts","../../src/splide/src/js/utils/dom/toggleClass/toggleClass.ts","../../src/splide/src/js/utils/dom/addClass/addClass.ts","../../src/splide/src/js/utils/dom/append/append.ts","../../src/splide/src/js/utils/dom/matches/matches.ts","../../src/splide/src/js/utils/dom/children/children.ts","../../src/splide/src/js/utils/dom/child/child.ts","../../src/splide/src/js/utils/object/forOwn/forOwn.ts","../../src/splide/src/js/utils/object/assign/assign.ts","../../src/splide/src/js/utils/dom/removeAttribute/removeAttribute.ts","../../src/splide/src/js/utils/dom/setAttribute/setAttribute.ts","../../src/splide/src/js/utils/dom/create/create.ts","../../src/splide/src/js/utils/dom/queryAll/queryAll.ts","../../src/splide/src/js/utils/dom/remove/remove.ts","../../src/splide/src/js/utils/dom/removeClass/removeClass.ts","../../src/splide/src/js/utils/dom/unit/unit.ts","../../src/splide/src/js/utils/string/pad/pad.ts","../../src/js/src/js/constants/classes.ts","../../src/js/src/js/constants/defaults.ts","../../src/js/src/js/extensions/Grid/Dimension.ts","../../src/splide/src/js/components/Style/Style.ts","../../src/js/src/js/extensions/Grid/Layout.ts","../../src/js/src/js/extensions/Grid/Grid.ts","../../src/js/src/js/build/default.ts"],"sourcesContent":["function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*!\n * Splide.js\n * Version  : 3.0.0\n * License  : MIT\n * Copyright: 2021 Naotoshi Fujita\n */\n\n/**\r\n * The project code.\r\n *\r\n * @since 3.0.0\r\n */\nvar PROJECT_CODE = 'splide';\n/**\r\n * The data attribute prefix.\r\n *\r\n * @since 3.0.0\r\n */\n\nvar DATA_ATTRIBUTE = \"data-\" + PROJECT_CODE;\n/**\r\n * Splide has been just created.\r\n */\n\nvar CREATED = 1;\n/**\r\n * Splide has mounted components.\r\n */\n\nvar MOUNTED = 2;\n/**\r\n * Splide is ready.\r\n */\n\nvar IDLE = 3;\n/**\r\n * Splide is moving.\r\n */\n\nvar MOVING = 4;\n/**\r\n * Splide has been destroyed.\r\n */\n\nvar DESTROYED = 5;\n/**\r\n * The collection of all states.\r\n *\r\n * @since 3.0.0\r\n */\n\nvar STATES = {\n  CREATED: CREATED,\n  MOUNTED: MOUNTED,\n  IDLE: IDLE,\n  MOVING: MOVING,\n  DESTROYED: DESTROYED\n};\n/**\r\n * Empties the array.\r\n *\r\n * @param array - A array to empty.\r\n */\n\nfunction empty(array) {\n  array.length = 0;\n}\n/**\r\n * Checks if the given subject is an object or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an object, or otherwise `false`.\r\n */\n\n\nfunction isObject(subject) {\n  return !isNull(subject) && typeof subject === 'object';\n}\n/**\r\n * Checks if the given subject is an array or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an array, or otherwise `false`.\r\n */\n\n\nfunction isArray(subject) {\n  return Array.isArray(subject);\n}\n/**\r\n * Checks if the given subject is a function or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is a function, or otherwise `false`.\r\n */\n\n\nfunction isFunction(subject) {\n  return typeof subject === 'function';\n}\n/**\r\n * Checks if the given subject is a string or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is a string, or otherwise `false`.\r\n */\n\n\nfunction isString(subject) {\n  return typeof subject === 'string';\n}\n/**\r\n * Checks if the given subject is `undefined` or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is `undefined`, or otherwise `false`.\r\n */\n\n\nfunction isUndefined(subject) {\n  return typeof subject === 'undefined';\n}\n/**\r\n * Checks if the given subject is `null` or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is `null`, or otherwise `false`.\r\n */\n\n\nfunction isNull(subject) {\n  return subject === null;\n}\n/**\r\n * Checks if the given subject is an HTMLElement or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an HTMLElement instance, or otherwise `false`.\r\n */\n\n\nfunction isHTMLElement(subject) {\n  return subject instanceof HTMLElement;\n}\n/**\r\n * Checks if the given subject is an HTMLButtonElement or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an HTMLButtonElement, or otherwise `false`.\r\n */\n\n\nfunction isHTMLButtonElement(subject) {\n  return subject instanceof HTMLButtonElement;\n}\n/**\r\n * Push the provided value to an array if the value is not an array.\r\n *\r\n * @param value - A value to push.\r\n *\r\n * @return An array containing the value, or the value itself if it is already an array.\r\n */\n\n\nfunction toArray(value) {\n  return isArray(value) ? value : [value];\n}\n/**\r\n * The extended `Array#forEach` method that accepts a single value as an argument.\r\n *\r\n * @param values   - A value or values to iterate over.\r\n * @param iteratee - An iteratee function.\r\n */\n\n\nfunction forEach(values, iteratee) {\n  toArray(values).forEach(iteratee);\n}\n/**\r\n * Checks if the array includes the value or not.\r\n * `Array#includes` is not supported by IE.\r\n *\r\n * @param array - An array.\r\n * @param value - A value to search for.\r\n *\r\n * @return `true` if the array includes the value, or otherwise `false`.\r\n */\n\n\nfunction includes(array, value) {\n  return array.indexOf(value) > -1;\n}\n/**\r\n * Extended `Array#push()` that accepts an item or an array with items.\r\n *\r\n * @param array - An array to push items.\r\n * @param items - An item or items to push.\r\n *\r\n * @return A provided array itself.\r\n */\n\n\nfunction push(array, items) {\n  array.push.apply(array, toArray(items));\n  return array;\n}\n\nvar arrayProto = Array.prototype;\n/**\r\n * The slice method for an array-like object.\r\n *\r\n * @param arrayLike - An array-like object.\r\n * @param start     - Optional. A start index.\r\n * @param end       - Optional. A end index.\r\n *\r\n * @return An array with sliced elements.\r\n */\n\nfunction slice(arrayLike, start, end) {\n  return arrayProto.slice.call(arrayLike, start, end);\n}\n/**\r\n * The find method for an array or array-like object, works in IE.\r\n * This method is not performant for a huge array.\r\n *\r\n * @param arrayLike - An array-like object.\r\n * @param predicate - The predicate function to test each element in the object.\r\n *\r\n * @return A found value if available, or otherwise `undefined`.\r\n */\n\n\nfunction find(arrayLike, predicate) {\n  return slice(arrayLike).filter(predicate)[0];\n}\n/**\r\n * Toggles the provided class or classes by following the `add` boolean.\r\n *\r\n * @param elm     - An element whose classes are toggled.\r\n * @param classes - A class or class names.\r\n * @param add     - Whether to add or remove a class.\r\n */\n\n\nfunction toggleClass(elm, classes, add) {\n  if (elm) {\n    forEach(classes, function (name) {\n      if (name) {\n        elm.classList[add ? 'add' : 'remove'](name);\n      }\n    });\n  }\n}\n/**\r\n * Adds classes to the element.\r\n *\r\n * @param elm     - An element to add classes to.\r\n * @param classes - Classes to add.\r\n */\n\n\nfunction addClass(elm, classes) {\n  toggleClass(elm, classes, true);\n}\n/**\r\n * Appends children to the parent element.\r\n *\r\n * @param parent   - A parent element.\r\n * @param children - A child or children to append to the parent.\r\n */\n\n\nfunction append(parent, children) {\n  forEach(children, parent.appendChild.bind(parent));\n}\n/**\r\n * Inserts a node or nodes before the specified reference node.\r\n *\r\n * @param nodes - A node or nodes to insert.\r\n * @param ref   - A reference node.\r\n */\n\n\nfunction before(nodes, ref) {\n  forEach(nodes, function (node) {\n    var parent = ref.parentNode;\n\n    if (parent) {\n      parent.insertBefore(node, ref);\n    }\n  });\n}\n/**\r\n * Checks if the element can be selected by the provided selector or not.\r\n *\r\n * @param elm      - An element to check.\r\n * @param selector - A selector to test.\r\n *\r\n * @return `true` if the selector matches the element, or otherwise `false`.\r\n */\n\n\nfunction matches(elm, selector) {\n  return (elm['msMatchesSelector'] || elm.matches).call(elm, selector);\n}\n/**\r\n * Finds children that has the specified tag or class name.\r\n *\r\n * @param parent   - A parent element.\r\n * @param selector - A selector to filter children.\r\n *\r\n * @return An array with filtered children.\r\n */\n\n\nfunction children(parent, selector) {\n  return parent ? slice(parent.children).filter(function (child) {\n    return matches(child, selector);\n  }) : [];\n}\n/**\r\n * Returns a child element that matches the specified tag or class name.\r\n *\r\n * @param parent   - A parent element.\r\n * @param selector - A selector to filter children.\r\n *\r\n * @return A matched child element if available, or otherwise `undefined`.\r\n */\n\n\nfunction child(parent, selector) {\n  return selector ? children(parent, selector)[0] : parent.firstElementChild;\n}\n/**\r\n * Iterates over the provided object by own enumerable keys with calling the iteratee function.\r\n *\r\n * @param object   - An object to iterate over.\r\n * @param iteratee - An iteratee function that takes the value and key as arguments.\r\n *\r\n * @return A provided object itself.\r\n */\n\n\nfunction forOwn(object, iteratee) {\n  if (object) {\n    var keys = Object.keys(object);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== '__proto__') {\n        if (iteratee(object[key], key) === false) {\n          break;\n        }\n      }\n    }\n  }\n\n  return object;\n}\n/**\r\n * Assigns all own enumerable properties of all source objects to the provided object.\r\n * `undefined` in source objects will be skipped.\r\n *\r\n * @param object  - An object to assign properties to.\r\n * @param sources - Objects to assign properties from.\r\n *\r\n * @return An object assigned properties of the sources to.\r\n */\n\n\nfunction assign(object) {\n  for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    sources[_key - 1] = arguments[_key];\n  }\n\n  sources.forEach(function (source) {\n    forOwn(source, function (value, key) {\n      object[key] = source[key];\n    });\n  });\n  return object;\n}\n/**\r\n * Recursively merges source properties to the object.\r\n *\r\n * @param object - An object to merge properties to.\r\n * @param source - A source object to merge properties from.\r\n *\r\n * @return A new object with merged properties.\r\n */\n\n\nfunction merge(object, source) {\n  forOwn(source, function (value, key) {\n    object[key] = isObject(value) ? merge(isObject(object[key]) ? object[key] : {}, value) : value;\n  });\n  return object;\n}\n/**\r\n * Removes attributes from the element.\r\n *\r\n * @param elm   - An element.\r\n * @param attrs - An attribute or attributes to remove.\r\n */\n\n\nfunction removeAttribute(elm, attrs) {\n  if (elm) {\n    forEach(attrs, function (attr) {\n      elm.removeAttribute(attr);\n    });\n  }\n}\n\nfunction setAttribute(elm, attrs, value) {\n  if (isObject(attrs)) {\n    forOwn(attrs, function (value, name) {\n      setAttribute(elm, name, value);\n    });\n  } else {\n    isNull(value) ? removeAttribute(elm, attrs) : elm.setAttribute(attrs, String(value));\n  }\n}\n/**\r\n * Creates a HTML element.\r\n *\r\n * @param tag    - A tag name.\r\n * @param attrs  - Optional. An object with attributes to apply the created element to, or a string with classes.\r\n * @param parent - Optional. A parent element where the created element is appended.\r\n */\n\n\nfunction create(tag, attrs, parent) {\n  var elm = document.createElement(tag);\n\n  if (attrs) {\n    if (isString(attrs) || isArray(attrs)) {\n      addClass(elm, attrs);\n    } else {\n      setAttribute(elm, attrs);\n    }\n  }\n\n  if (parent) {\n    append(parent, elm);\n  }\n\n  return elm;\n}\n/**\r\n * Applies inline styles to the provided element by an object literal.\r\n *\r\n * @param elms   - An element or elements to apply styles to.\r\n * @param styles - An object literal with styles.\r\n */\n\n\nfunction style(elms, styles) {\n  if (isString(styles)) {\n    return isArray(elms) ? null : getComputedStyle(elms)[styles];\n  }\n\n  forOwn(styles, function (value, key) {\n    if (!isNull(value)) {\n      forEach(elms, function (elm) {\n        if (elm) {\n          elm.style[key] = \"\" + value;\n        }\n      });\n    }\n  });\n}\n/**\r\n * Sets the `display` CSS value to the element.\r\n *\r\n * @param elm     - An element to set a new value to.\r\n * @param display - A new `display` value.\r\n */\n\n\nfunction display(elm, display) {\n  style(elm, {\n    display: display\n  });\n}\n/**\r\n * Returns the specified attribute value.\r\n *\r\n * @param elm  - An element.\r\n * @param attr - An attribute to get.\r\n */\n\n\nfunction getAttribute(elm, attr) {\n  return elm.getAttribute(attr);\n}\n/**\r\n * Checks if the element contains the specified class or not.\r\n *\r\n * @param elm       - An element to check.\r\n * @param className - A class name that may be contained by the element.\r\n *\r\n * @return `true` if the element contains the class, or otherwise `false`.\r\n */\n\n\nfunction hasClass(elm, className) {\n  return elm && elm.classList.contains(className);\n}\n/**\r\n * Parses the provided HTML string and returns the first element.\r\n *\r\n * @param html - An HTML string to parse.\r\n *\r\n * @return An Element on success, or otherwise `undefined`.\r\n */\n\n\nfunction parseHtml(html) {\n  return child(new DOMParser().parseFromString(html, 'text/html').body);\n}\n/**\r\n * Call the `preventDefault()` of the provided event.\r\n *\r\n * @param e               - An Event object.\r\n * @param stopPropagation - Optional. Whether to stop the event propagation or not.\r\n */\n\n\nfunction prevent(e, stopPropagation) {\n  e.preventDefault();\n\n  if (stopPropagation) {\n    e.stopPropagation();\n    e.stopImmediatePropagation();\n  }\n}\n/**\r\n * Returns an element that matches the provided selector.\r\n *\r\n * @param parent   - A parent element to start searching from.\r\n * @param selector - A selector to query.\r\n *\r\n * @return A found element or `null`.\r\n */\n\n\nfunction query(parent, selector) {\n  return parent && parent.querySelector(selector);\n}\n/**\r\n * Returns elements that match the provided selector.\r\n *\r\n * @param parent   - A parent element to start searching from.\r\n * @param selector - A selector to query.\r\n *\r\n * @return An array with matched elements.\r\n */\n\n\nfunction queryAll(parent, selector) {\n  return slice(parent.querySelectorAll(selector));\n}\n/**\r\n * Returns a DOMRect object of the provided element.\r\n *\r\n * @param target - An element.\r\n */\n\n\nfunction rect(target) {\n  return target.getBoundingClientRect();\n}\n/**\r\n * Removes the provided node from its parent.\r\n *\r\n * @param nodes - A node or nodes to remove.\r\n */\n\n\nfunction remove(nodes) {\n  forEach(nodes, function (node) {\n    if (node && node.parentNode) {\n      node.parentNode.removeChild(node);\n    }\n  });\n}\n/**\r\n * Removes classes from the element.\r\n *\r\n * @param elm     - An element to remove classes from.\r\n * @param classes - Classes to remove.\r\n */\n\n\nfunction removeClass(elm, classes) {\n  toggleClass(elm, classes, false);\n}\n/**\r\n * Appends `px` to the provided number.\r\n * If the value is already string, just returns it.\r\n *\r\n * @param value - A value to append `px` to.\r\n *\r\n * @return A string with the CSS unit.\r\n */\n\n\nfunction unit(value) {\n  return isString(value) ? value : value ? value + \"px\" : '';\n}\n/**\r\n * Throws an error if the provided condition is falsy.\r\n *\r\n * @param condition - If falsy, an error is thrown.\r\n * @param message   - Optional. A message to display.\r\n */\n\n\nfunction assert(condition, message) {\n  if (message === void 0) {\n    message = '';\n  }\n\n  if (!condition) {\n    throw new Error(\"[\" + PROJECT_CODE + \"] \" + message);\n  }\n}\n/**\r\n * Invokes the callback on the next tick.\r\n *\r\n * @param callback - A callback function.\r\n */\n\n\nfunction nextTick(callback) {\n  setTimeout(callback);\n}\n/**\r\n * No operation.\r\n */\n\n\nvar noop = function noop() {}; // eslint-disable-line no-empty-function, @typescript-eslint/no-empty-function\n\n/**\r\n * The arias of `window.requestAnimationFrame()`.\r\n */\n\n\nfunction raf(func) {\n  return requestAnimationFrame(func);\n}\n/**\r\n * Checks if the subject number is between `minOrMax` and `maxOrMin`.\r\n *\r\n * @param number    - A subject number to check.\r\n * @param minOrMax  - A min or max number.\r\n * @param maxOrMin  - A max or min number.\r\n * @param exclusive - Optional. Whether to exclude `x` or `y`.\r\n */\n\n\nfunction between(number, minOrMax, maxOrMin, exclusive) {\n  var min = Math.min(minOrMax, maxOrMin);\n  var max = Math.max(minOrMax, maxOrMin);\n  return exclusive ? min < number && number < max : min <= number && number <= max;\n}\n\nvar max$1 = Math.max,\n    min$1 = Math.min;\n/**\r\n * Clamps a number.\r\n *\r\n * @param number - A subject number to check.\r\n * @param x      - A min or max number.\r\n * @param y      - A min or max number.\r\n */\n\nfunction clamp(number, x, y) {\n  var minimum = min$1(x, y);\n  var maximum = max$1(x, y);\n  return min$1(max$1(minimum, number), maximum);\n}\n/**\r\n * Returns the sign of the provided number.\r\n *\r\n * @param x - A number.\r\n *\r\n * @return `1` for positive numbers, `-1` for negative numbers, or `0` for `0`.\r\n */\n\n\nfunction sign(x) {\n  return +(x > 0) - +(x < 0);\n}\n\nvar min = Math.min,\n    max = Math.max,\n    floor = Math.floor,\n    ceil = Math.ceil,\n    abs = Math.abs,\n    round = Math.round;\n/**\r\n * Formats a string.\r\n *\r\n * @param string       - A string to format.\r\n * @param replacements - A replacement or replacements.\r\n *\r\n * @return A formatted string.\r\n */\n\nfunction format(string, replacements) {\n  forEach(replacements, function (replacement) {\n    string = string.replace('%s', \"\" + replacement);\n  });\n  return string;\n}\n/**\r\n * Pads the number with 0.\r\n *\r\n * @param number - A number to pad.\r\n *\r\n * @return string - Padded number.\r\n */\n\n\nfunction pad(number) {\n  return number < 10 ? \"0\" + number : \"\" + number;\n}\n/**\r\n * Stores unique IDs.\r\n *\r\n * @since 3.0.0\r\n */\n\n\nvar ids = {};\n/**\r\n * Returns a sequential unique ID as \"{ prefix }-{ number }\".\r\n *\r\n * @param prefix - A prefix for the ID.\r\n */\n\nfunction uniqueId(prefix) {\n  return \"\" + prefix + pad(ids[prefix] = (ids[prefix] || 0) + 1);\n}\n/**\r\n * The component for managing options.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return An Options component object.\r\n */\n\n\nfunction Options(Splide, Components, options) {\n  /**\r\n   * Keeps the initial options to apply when no matched query exists.\r\n   */\n  var initialOptions;\n  /**\r\n   * Stores breakpoints with the MediaQueryList object.\r\n   */\n\n  var points;\n  /**\r\n   * Holds the current breakpoint.\r\n   */\n\n  var currPoint;\n  /**\r\n   * Called when the component is constructed.\r\n   */\n\n  function setup() {\n    try {\n      merge(options, JSON.parse(getAttribute(Splide.root, DATA_ATTRIBUTE)));\n    } catch (e) {\n      assert(false, e.message);\n    }\n\n    initialOptions = merge({}, options);\n  }\n  /**\r\n   * Called when the component is mounted.\r\n   */\n\n\n  function mount() {\n    var breakpoints = options.breakpoints;\n\n    if (breakpoints) {\n      points = Object.keys(breakpoints).sort(function (n, m) {\n        return +n - +m;\n      }).map(function (point) {\n        return [point, matchMedia(\"(\" + (options.mediaQuery || 'max') + \"-width:\" + point + \"px)\")];\n      });\n      addEventListener('resize', observe);\n      observe();\n    }\n  }\n  /**\r\n   * Destroys the component.\r\n   *\r\n   * @param completely - Will be `true` for complete destruction.\r\n   */\n\n\n  function destroy(completely) {\n    if (completely) {\n      removeEventListener('resize', observe);\n    }\n  }\n  /**\r\n   * Observes breakpoints.\r\n   * The `currPoint` may be `undefined`.\r\n   */\n\n\n  function observe() {\n    var item = find(points, function (item) {\n      return item[1].matches;\n    }) || [];\n\n    if (item[0] !== currPoint) {\n      onMatch(currPoint = item[0]);\n    }\n  }\n  /**\r\n   * Called when the media query matches breakpoints.\r\n   *\r\n   * @param point - A matched point, or `undefined` that means no breakpoint matches a media query.\r\n   */\n\n\n  function onMatch(point) {\n    var newOptions = options.breakpoints[point] || initialOptions;\n\n    if (newOptions.destroy) {\n      Splide.options = initialOptions;\n      Splide.destroy(newOptions.destroy === 'completely');\n    } else {\n      if (Splide.state.is(DESTROYED)) {\n        destroy(true);\n        Splide.mount();\n      }\n\n      Splide.options = newOptions;\n    }\n  }\n\n  return {\n    setup: setup,\n    mount: mount,\n    destroy: destroy\n  };\n}\n/**\r\n * Enumerates slides from left to right.\r\n */\n\n/**\r\n * Enumerates slides from right to left.\r\n */\n\n\nvar RTL = 'rtl';\n/**\r\n * Enumerates slides in a col.\r\n */\n\nvar TTB = 'ttb';\n/**\r\n * The translation map for directions.\r\n *\r\n * @since 3.0.0\r\n */\n\nvar ORIENTATION_MAP = {\n  marginRight: ['marginBottom', 'marginLeft'],\n  width: ['height'],\n  autoWidth: ['autoHeight'],\n  fixedWidth: ['fixedHeight'],\n  paddingLeft: ['paddingTop', 'paddingRight'],\n  paddingRight: ['paddingBottom', 'paddingLeft'],\n  left: ['top', 'right'],\n  right: ['bottom', 'left'],\n  x: ['y'],\n  X: ['Y'],\n  pageX: ['pageY'],\n  ArrowLeft: ['ArrowUp', 'ArrowRight'],\n  ArrowRight: ['ArrowDown', 'ArrowLeft']\n};\n/**\r\n * The component that absorbs the difference among directions.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Direction component object.\r\n */\n\nfunction Direction(Splide, Components, options) {\n  /**\r\n   * Resolves the provided property name.\r\n   *\r\n   * @param prop     - A property name to translate.\r\n   * @param axisOnly - Optional. If `ture`, returns the same property for LTR and RTL.\r\n   */\n  function resolve(prop, axisOnly) {\n    var direction = options.direction;\n    var index = direction === RTL && !axisOnly ? 1 : direction === TTB ? 0 : -1;\n    return ORIENTATION_MAP[prop][index] || prop;\n  }\n  /**\r\n   * Orients the value towards the current direction.\r\n   *\r\n   * @param value - A value to orient.\r\n   *\r\n   * @return The oriented value.\r\n   */\n\n\n  function orient(value) {\n    return value * (options.direction === RTL ? 1 : -1);\n  }\n\n  return {\n    resolve: resolve,\n    orient: orient\n  };\n}\n\nvar CLASS_ROOT = PROJECT_CODE;\nvar CLASS_SLIDER = PROJECT_CODE + \"__slider\";\nvar CLASS_TRACK = PROJECT_CODE + \"__track\";\nvar CLASS_LIST = PROJECT_CODE + \"__list\";\nvar CLASS_SLIDE = PROJECT_CODE + \"__slide\";\nvar CLASS_CLONE = CLASS_SLIDE + \"--clone\";\nvar CLASS_CONTAINER = CLASS_SLIDE + \"__container\";\nvar CLASS_ARROWS = PROJECT_CODE + \"__arrows\";\nvar CLASS_ARROW = PROJECT_CODE + \"__arrow\";\nvar CLASS_ARROW_PREV = CLASS_ARROW + \"--prev\";\nvar CLASS_ARROW_NEXT = CLASS_ARROW + \"--next\";\nvar CLASS_PAGINATION = PROJECT_CODE + \"__pagination\";\nvar CLASS_PAGINATION_PAGE = CLASS_PAGINATION + \"__page\";\nvar CLASS_PROGRESS = PROJECT_CODE + \"__progress\";\nvar CLASS_PROGRESS_BAR = CLASS_PROGRESS + \"__bar\";\nvar CLASS_AUTOPLAY = PROJECT_CODE + \"__autoplay\";\nvar CLASS_PLAY = PROJECT_CODE + \"__play\";\nvar CLASS_PAUSE = PROJECT_CODE + \"__pause\";\nvar CLASS_SPINNER = PROJECT_CODE + \"__spinner\";\nvar CLASS_INITIALIZED = 'is-initialized';\nvar CLASS_ACTIVE = 'is-active';\nvar CLASS_PREV = 'is-prev';\nvar CLASS_NEXT = 'is-next';\nvar CLASS_VISIBLE = 'is-visible';\nvar CLASS_LOADING = 'is-loading';\n/**\r\n * The array with all status classes.\r\n *\r\n * @since 3.0.0\r\n */\n\nvar STATUS_CLASSES = [CLASS_ACTIVE, CLASS_VISIBLE, CLASS_PREV, CLASS_NEXT, CLASS_LOADING];\n/**\r\n * The collection of classes for elements that Splide dynamically creates.\r\n *\r\n * @since 3.0.0\r\n */\n\nvar CLASSES = {\n  slide: CLASS_SLIDE,\n  clone: CLASS_CLONE,\n  arrows: CLASS_ARROWS,\n  arrow: CLASS_ARROW,\n  prev: CLASS_ARROW_PREV,\n  next: CLASS_ARROW_NEXT,\n  pagination: CLASS_PAGINATION,\n  page: CLASS_PAGINATION_PAGE,\n  spinner: CLASS_SPINNER\n};\nvar EVENT_MOUNTED = 'mounted';\nvar EVENT_READY = 'ready';\nvar EVENT_MOVE = 'move';\nvar EVENT_MOVED = 'moved';\nvar EVENT_CLICK = 'click';\nvar EVENT_ACTIVE = 'active';\nvar EVENT_INACTIVE = 'inactive';\nvar EVENT_VISIBLE = 'visible';\nvar EVENT_HIDDEN = 'hidden';\nvar EVENT_SLIDE_KEYDOWN = 'slide:keydown';\nvar EVENT_REFRESH = 'refresh';\nvar EVENT_UPDATED = 'undated';\nvar EVENT_RESIZE = 'resize';\nvar EVENT_RESIZED = 'resized';\nvar EVENT_DRAG = 'drag';\nvar EVENT_DRAGGING = 'dragging';\nvar EVENT_DRAGGED = 'dragged';\nvar EVENT_SCROLL = 'scroll';\nvar EVENT_SCROLLED = 'scrolled';\nvar EVENT_DESTROY = 'destroy';\nvar EVENT_ARROWS_MOUNTED = 'arrows:mounted';\nvar EVENT_ARROWS_UPDATED = 'arrows:updated';\nvar EVENT_PAGINATION_MOUNTED = 'pagination:mounted';\nvar EVENT_PAGINATION_PAGE = 'pagination:page';\nvar EVENT_PAGINATION_UPDATED = 'pagination:updated';\nvar EVENT_NAVIGATION_MOUNTED = 'navigation:mounted';\nvar EVENT_AUTOPLAY_PLAY = 'autoplay:play';\nvar EVENT_AUTOPLAY_PLAYING = 'autoplay:playing';\nvar EVENT_AUTOPLAY_PAUSE = 'autoplay:pause';\nvar EVENT_LAZYLOAD_LOADED = 'lazyload:loaded';\n/**\r\n * The constructor to provided a simple event system.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @return An EventBus object.\r\n */\n\nfunction EventBus() {\n  /**\r\n   * The collection of registered handlers.\r\n   */\n  var handlers = {};\n  /**\r\n   * Registers an event handler.\r\n   *\r\n   * @param events   - An event name or names separated by spaces. Use a dot(.) to add a namespace.\r\n   * @param callback - A callback function to register.\r\n   * @param key      - Optional. An object for an identifier of the handler.\r\n   * @param priority - Optional. A priority number for the order in which the callbacks are invoked.\r\n   *                   Lower numbers correspond with earlier execution. The default value is 10.\r\n   */\n\n  function on(events, callback, key, priority) {\n    if (priority === void 0) {\n      priority = 10;\n    }\n\n    forEachEvent(events, function (event, namespace) {\n      handlers[event] = handlers[event] || [];\n      push(handlers[event], {\n        event: event,\n        callback: callback,\n        namespace: namespace,\n        priority: priority,\n        key: key\n      }).sort(function (handler1, handler2) {\n        return handler1.priority - handler2.priority;\n      });\n    });\n  }\n  /**\r\n   * Removes event handlers registered by `on()`.\r\n   * If only the event name is provided, all handlers that associate with the event are removed.\r\n   * If the event name and namespace are specified, handlers that associate with the event and namespace are removed.\r\n   *\r\n   * @param events - An event name or names separated by spaces. Use a dot(.) to add a namespace.\r\n   * @param key    - Optional. An object for an identifier of the handler.\r\n   */\n\n\n  function off(events, key) {\n    forEachEvent(events, function (event, namespace) {\n      var eventHandlers = handlers[event];\n      handlers[event] = eventHandlers && eventHandlers.filter(function (handler) {\n        return handler.key ? handler.key !== key : handler.namespace !== namespace;\n      });\n    });\n  }\n  /**\r\n   * Removes all handlers locked by the specified key.\r\n   *\r\n   * @param key - A key.\r\n   */\n\n\n  function offBy(key) {\n    forOwn(handlers, function (eventHandlers, event) {\n      off(event, key);\n    });\n  }\n  /**\r\n   * Triggers callback functions.\r\n   * This accepts additional arguments and passes them to callbacks.\r\n   *\r\n   * @param event - An event name.\r\n   */\n\n\n  function emit(event) {\n    var _arguments = arguments;\n    (handlers[event] || []).forEach(function (handler) {\n      // eslint-disable-next-line prefer-rest-params, prefer-spread\n      handler.callback.apply(handler, slice(_arguments, 1));\n    });\n  }\n  /**\r\n   * Removes all handlers.\r\n   */\n\n\n  function destroy() {\n    handlers = {};\n  }\n  /**\r\n   * Parses provided events and iterates over them.\r\n   *\r\n   * @param events   - An event or events.\r\n   * @param iteratee - An iteratee function.\r\n   */\n\n\n  function forEachEvent(events, iteratee) {\n    toArray(events).join(' ').split(' ').forEach(function (eventNS) {\n      var fragments = eventNS.split('.');\n      iteratee(fragments[0], fragments[1]);\n    });\n  }\n\n  return {\n    on: on,\n    off: off,\n    offBy: offBy,\n    emit: emit,\n    destroy: destroy\n  };\n}\n/**\r\n * The function that provides interface for internal and native events.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide - A Splide instance.\r\n *\r\n * @return A collection of interface functions.\r\n */\n\n\nfunction EventInterface(Splide) {\n  /**\r\n   * Holds the event object.\r\n   */\n  var event = Splide.event;\n  /**\r\n   * The key for events.\r\n   */\n\n  var key = {};\n  /**\r\n   * Stores all handlers that listen to native events.\r\n   */\n\n  var listeners = [];\n  /**\r\n   * Registers an event handler with an unique key.\r\n   * It can only be removed by `off()` method below.\r\n   *\r\n   * @param events   - An event name or names separated by spaces. Use a dot(.) to add a namespace.\r\n   * @param callback - A callback function to register.\r\n   * @param priority - Optional. A priority number for the order in which the callbacks are invoked.\r\n   *                   Lower numbers correspond with earlier execution. The default value is 10.\r\n   */\n\n  function on(events, callback, priority) {\n    event.on(events, callback, key, priority);\n  }\n  /**\r\n   * Removes event handlers registered by `on()`.\r\n   *\r\n   * @param events - An event name or names separated by spaces. Use a dot(.) to add a namespace.\r\n   */\n\n\n  function off(events) {\n    event.off(events, key);\n  }\n  /**\r\n   * Listens to native events.\r\n   * Splide#destory() will remove all registered listeners.\r\n   *\r\n   * @param targets  - A target element, the window object or the document object.\r\n   * @param events   - An event or events to listen to.\r\n   * @param callback - A callback function.\r\n   * @param options  - Optional. The options to pass to the `addEventListener` function.\r\n   */\n\n\n  function bind(targets, events, callback, options) {\n    forEachEvent(targets, events, function (target, event) {\n      listeners.push([target, event, callback, options]);\n      target.addEventListener(event, callback, options);\n    });\n  }\n  /**\r\n   * Removes the event handler.\r\n   *\r\n   * @param targets - A target element, the window object or the document object.\r\n   * @param events  - An event name or names to remove.\r\n   */\n\n\n  function unbind(targets, events) {\n    forEachEvent(targets, events, function (target, event) {\n      listeners = listeners.filter(function (listener) {\n        if (listener[0] === target && listener[1] === event) {\n          target.removeEventListener(event, listener[2], listener[3]);\n          return false;\n        }\n\n        return true;\n      });\n    });\n  }\n  /**\r\n   * Iterates over each target and event.\r\n   *\r\n   * @param targets  - A target element, the window object or the document object.\r\n   * @param events   - An event name or names.\r\n   * @param iteratee - An iteratee function.\r\n   */\n\n\n  function forEachEvent(targets, events, iteratee) {\n    forEach(targets, function (target) {\n      if (target) {\n        events.split(' ').forEach(iteratee.bind(null, target));\n      }\n    });\n  }\n  /**\r\n   * Removes all listeners.\r\n   */\n\n\n  function destroy() {\n    listeners = listeners.filter(function (data) {\n      return unbind(data[0], data[1]);\n    });\n    event.offBy(key);\n  }\n  /**\r\n   * Invokes destroy when the slider is destroyed.\r\n   */\n\n\n  event.on(EVENT_DESTROY, destroy, key);\n  return {\n    on: on,\n    off: off,\n    emit: event.emit,\n    bind: bind,\n    unbind: unbind,\n    destroy: destroy\n  };\n}\n/**\r\n * Requests interval like the native `setInterval()` with using `requestAnimationFrame`.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param interval   - The interval duration in milliseconds.\r\n * @param onInterval - The callback fired on every interval.\r\n * @param onUpdate   - Optional. Called on every animation frame, taking the progress rate.\r\n * @param limit      - Optional. Limits the number of interval.\r\n */\n\n\nfunction RequestInterval(interval, onInterval, onUpdate, limit) {\n  var now = Date.now;\n  /**\r\n   * The time when the interval starts.\r\n   */\n\n  var startTime;\n  /**\r\n   * The current progress rate.\r\n   */\n\n  var rate = 0;\n  /**\r\n   * The animation frame ID.\r\n   */\n\n  var id;\n  /**\r\n   * Indicates whether the interval is currently paused or not.\r\n   */\n\n  var paused = true;\n  /**\r\n   * The loop count. This only works when the `limit` argument is provided.\r\n   */\n\n  var count = 0;\n  /**\r\n   * The update function called on every animation frame.\r\n   */\n\n  function update() {\n    if (!paused) {\n      var elapsed = now() - startTime;\n\n      if (elapsed >= interval) {\n        rate = 1;\n        startTime = now();\n      } else {\n        rate = elapsed / interval;\n      }\n\n      if (onUpdate) {\n        onUpdate(rate);\n      }\n\n      if (rate === 1) {\n        onInterval();\n\n        if (limit && ++count >= limit) {\n          pause();\n          return;\n        }\n      }\n\n      raf(update);\n    }\n  }\n  /**\r\n   * Starts the interval.\r\n   *\r\n   * @param resume - Optional. Whether to resume the paused progress or not.\r\n   */\n\n\n  function start(resume) {\n    !resume && cancel();\n    startTime = now() - (resume ? rate * interval : 0);\n    paused = false;\n    raf(update);\n  }\n  /**\r\n   * Pauses the interval.\r\n   */\n\n\n  function pause() {\n    paused = true;\n  }\n  /**\r\n   * Rewinds the current progress.\r\n   */\n\n\n  function rewind() {\n    startTime = now();\n    rate = 0;\n\n    if (onUpdate) {\n      onUpdate(rate);\n    }\n  }\n  /**\r\n   * Cancels the interval.\r\n   */\n\n\n  function cancel() {\n    cancelAnimationFrame(id);\n    rate = 0;\n    id = 0;\n    paused = true;\n  }\n  /**\r\n   * Checks if the interval is paused or not.\r\n   *\r\n   * @return `true` if the interval is paused, or otherwise `false`.\r\n   */\n\n\n  function isPaused() {\n    return paused;\n  }\n\n  return {\n    start: start,\n    rewind: rewind,\n    pause: pause,\n    cancel: cancel,\n    isPaused: isPaused\n  };\n}\n/**\r\n * The function providing a super simple state system.\r\n *\r\n * @param initialState - Specifies the initial state.\r\n */\n\n\nfunction State(initialState) {\n  /**\r\n   * The current state.\r\n   */\n  var state = initialState;\n  /**\r\n   * Sets a new state.\r\n   *\r\n   * @param value - A new state value.\r\n   */\n\n  function set(value) {\n    state = value;\n  }\n  /**\r\n   * Checks if the current state matches the provided one.\r\n   *\r\n   * @param states - A state to check.\r\n   *\r\n   * @return `true` if the current state is the provided one.\r\n   */\n\n\n  function is(states) {\n    return includes(toArray(states), state);\n  }\n\n  return {\n    set: set,\n    is: is\n  };\n}\n/**\r\n * Returns the throttled function.\r\n *\r\n * @param func     - A function to throttle.\r\n * @param duration - Optional. Throttle duration in milliseconds.\r\n *\r\n * @return A throttled function.\r\n */\n\n\nfunction Throttle(func, duration) {\n  var interval;\n\n  function throttled() {\n    var _arguments2 = arguments,\n        _this = this;\n\n    if (!interval) {\n      interval = RequestInterval(duration || 0, function () {\n        // eslint-disable-next-line prefer-rest-params\n        func.apply(_this, _arguments2);\n        interval = null;\n      }, null, 1);\n      interval.start();\n    }\n  }\n\n  return throttled;\n}\n/**\r\n * The component that collects and handles elements which the slider consists of.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return An Elements component object.\r\n */\n\n\nfunction Elements(Splide, Components, options) {\n  var _EventInterface = EventInterface(Splide),\n      on = _EventInterface.on;\n\n  var root = Splide.root;\n  var elements = {};\n  /**\r\n   * Stores all slide elements.\r\n   */\n\n  var slides = [];\n  /**\r\n   * Stores all root classes.\r\n   */\n\n  var classes;\n  /**\r\n   * The slider element that may be `undefined`.\r\n   */\n\n  var slider;\n  /**\r\n   * The track element.\r\n   */\n\n  var track;\n  /**\r\n   * The list element.\r\n   */\n\n  var list;\n  /**\r\n   * Called when the component is constructed.\r\n   */\n\n  function setup() {\n    collect();\n    identify();\n    addClass(root, classes = getClasses());\n  }\n  /**\r\n   * Called when the component is mounted.\r\n   */\n\n\n  function mount() {\n    on(EVENT_REFRESH, refresh);\n    on(EVENT_UPDATED, update);\n  }\n  /**\r\n   * Destroys the component.\r\n   */\n\n\n  function destroy() {\n    empty(slides);\n    removeClass(root, classes);\n  }\n  /**\r\n   * Recollects slide elements.\r\n   */\n\n\n  function refresh() {\n    destroy();\n    setup();\n  }\n  /**\r\n   * Updates the status of elements.\r\n   */\n\n\n  function update() {\n    removeClass(root, classes);\n    addClass(root, classes = getClasses());\n  }\n  /**\r\n   * Collects elements which the slider consists of.\r\n   */\n\n\n  function collect() {\n    slider = child(root, \".\" + CLASS_SLIDER);\n    track = query(root, \".\" + CLASS_TRACK);\n    list = child(track, \".\" + CLASS_LIST);\n    assert(track && list, 'Missing a track/list element.');\n    push(slides, children(list, \".\" + CLASS_SLIDE + \":not(.\" + CLASS_CLONE + \")\"));\n    var autoplay = find(\".\" + CLASS_AUTOPLAY);\n    var arrows = find(\".\" + CLASS_ARROWS);\n    assign(elements, {\n      root: root,\n      slider: slider,\n      track: track,\n      list: list,\n      slides: slides,\n      arrows: arrows,\n      prev: query(arrows, \".\" + CLASS_ARROW_PREV),\n      next: query(arrows, \".\" + CLASS_ARROW_NEXT),\n      bar: query(find(\".\" + CLASS_PROGRESS), \".\" + CLASS_PROGRESS_BAR),\n      play: query(autoplay, \".\" + CLASS_PLAY),\n      pause: query(autoplay, \".\" + CLASS_PAUSE)\n    });\n  }\n  /**\r\n   * Assigns unique IDs to essential elements.\r\n   */\n\n\n  function identify() {\n    var id = root.id || uniqueId(PROJECT_CODE);\n    root.id = id;\n    track.id = track.id || id + \"-track\";\n    list.id = list.id || id + \"-list\";\n  }\n  /**\r\n   * Finds an element only in children of the root or slider element.\r\n   *\r\n   * @return {Element} - A found element or undefined.\r\n   */\n\n\n  function find(selector) {\n    return child(root, selector) || child(slider, selector);\n  }\n  /**\r\n   * Return an array with classes for the root element.\r\n   *\r\n   * @return An array with classes.\r\n   */\n\n\n  function getClasses() {\n    return [CLASS_ROOT + \"--\" + options.type, CLASS_ROOT + \"--\" + options.direction, options.drag && CLASS_ROOT + \"--draggable\", options.isNavigation && CLASS_ROOT + \"--nav\", CLASS_ACTIVE];\n  }\n\n  return assign(elements, {\n    setup: setup,\n    mount: mount,\n    destroy: destroy\n  });\n}\n/**\r\n * The component for managing styles of the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @return A Style component object.\r\n */\n\n\nfunction Style() {\n  /**\r\n   * The style element for the slider.\r\n   */\n  var style;\n  /**\r\n   * The CSSStyleSheet object of the created style element.\r\n   */\n\n  var sheet;\n  /**\r\n   * Called when the component is mounted.\r\n   */\n\n  function mount() {\n    style = create('style', {}, document.head);\n    sheet = style.sheet;\n  }\n  /**\r\n   * Destroys the component.\r\n   */\n\n\n  function destroy() {\n    remove(style);\n    sheet = null;\n  }\n  /**\r\n   * Registers the style for the selector.\r\n   *\r\n   * @param selector - A selector string.\r\n   * @param prop     - A CSS property, accepting the camel case.\r\n   * @param value    - A CSS value.\r\n   */\n\n\n  function rule(selector, prop, value) {\n    var _sheet = sheet,\n        cssRules = _sheet.cssRules;\n    var cssRule = find(cssRules, function (cssRule) {\n      return isCSSStyleRule(cssRule) && cssRule.selectorText === selector;\n    }) || cssRules[sheet.insertRule(selector + \"{}\", 0)];\n\n    if (isCSSStyleRule(cssRule)) {\n      cssRule.style[prop] = \"\" + value;\n    }\n  }\n  /**\r\n   * Registers the style by the element or the ID.\r\n   *\r\n   * @param target - A target element or ID.\r\n   * @param prop   - A CSS property, accepting the camel case.\r\n   * @param value  - A CSS value.\r\n   */\n\n\n  function ruleBy(target, prop, value) {\n    rule(\"#\" + (isHTMLElement(target) ? target.id : target), prop, value);\n  }\n  /**\r\n   * Checks if the provided rule is a CSSStyleRule instance or not.\r\n   *\r\n   * @param cssRule - An instance to check.\r\n   *\r\n   * @return `true` if the cssRule is an instance of CSSStyleRule, or otherwise `false`.\r\n   */\n\n\n  function isCSSStyleRule(cssRule) {\n    return cssRule instanceof CSSStyleRule;\n  }\n\n  return {\n    mount: mount,\n    destroy: destroy,\n    rule: rule,\n    ruleBy: ruleBy\n  };\n}\n\nvar ROLE = 'role';\nvar ARIA_CONTROLS = 'aria-controls';\nvar ARIA_CURRENT = 'aria-current';\nvar ARIA_LABEL = 'aria-label';\nvar ARIA_HIDDEN = 'aria-hidden';\nvar TAB_INDEX = 'tabindex';\nvar DISABLED = 'disabled';\n/**\r\n * The array with all attributes.\r\n *\r\n * @since 3.0.0\r\n */\n\nvar ALL_ATTRIBUTES = [ROLE, ARIA_CONTROLS, ARIA_CURRENT, ARIA_LABEL, ARIA_HIDDEN, TAB_INDEX, DISABLED];\n/**\r\n * The type for the regular slider.\r\n *\r\n * @since 3.0.0\r\n */\n\nvar SLIDE = 'slide';\n/**\r\n * The type for the carousel slider.\r\n *\r\n * @since 3.0.0\r\n */\n\nvar LOOP = 'loop';\n/**\r\n * The type for the fade slider that can not have multiple slides in a page.\r\n *\r\n * @since 3.0.0\r\n */\n\nvar FADE = 'fade';\n/**\r\n * The sub component for managing each slide.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param index      - A slide index.\r\n * @param slideIndex - A slide index for clones. This must be `-1` if the slide is not clone.\r\n * @param slide      - A slide element.\r\n *\r\n * @return A Slide sub component.\r\n */\n\nfunction Slide$1(Splide, index, slideIndex, slide) {\n  var _EventInterface2 = EventInterface(Splide),\n      on = _EventInterface2.on,\n      emit = _EventInterface2.emit,\n      bind = _EventInterface2.bind,\n      destroyEvents = _EventInterface2.destroy;\n\n  var Components = Splide.Components,\n      root = Splide.root,\n      options = Splide.options;\n  var isNavigation = options.isNavigation,\n      updateOnMove = options.updateOnMove;\n  var resolve = Components.Direction.resolve;\n  var isClone = slideIndex > -1;\n  var container = child(slide, \".\" + CLASS_CONTAINER);\n  /**\r\n   * Called when the component is mounted.\r\n   */\n\n  function mount() {\n    var _this2 = this;\n\n    init();\n    bind(slide, 'click keydown', function (e) {\n      emit(e.type === 'click' ? EVENT_CLICK : EVENT_SLIDE_KEYDOWN, _this2, e);\n    });\n    on(EVENT_MOUNTED, onMounted.bind(this));\n  }\n  /**\r\n   * Called after all components are mounted.\r\n   * Updating the status on mount is too early to notify other components of the active slide.\r\n   */\n\n\n  function onMounted() {\n    var boundUpdate = update.bind(this);\n    boundUpdate();\n    on([EVENT_MOVED, EVENT_UPDATED, EVENT_RESIZED, EVENT_SCROLLED], boundUpdate);\n\n    if (updateOnMove) {\n      on(EVENT_MOVE, onMove.bind(this));\n    }\n  }\n  /**\r\n   * If the `updateOnMove` option is `true`, called when the slider starts moving.\r\n   *\r\n   * @param next - A next index.\r\n   * @param prev - A previous index.\r\n   * @param dest - A destination index.\r\n   */\n\n\n  function onMove(next, prev, dest) {\n    if (dest === index) {\n      updateActivity.call(this, true);\n    }\n\n    update.call(this);\n  }\n  /**\r\n   * Initializes the component.\r\n   */\n\n\n  function init() {\n    if (!isClone) {\n      slide.id = root.id + \"-slide\" + pad(index + 1);\n    }\n\n    if (isNavigation) {\n      if (!isHTMLButtonElement(slide)) {\n        setAttribute(slide, ROLE, 'button');\n      }\n\n      var idx = isClone ? slideIndex : index;\n      var label = format(options.i18n.slideX, idx + 1);\n      var controls = Splide.splides.map(function (splide) {\n        return splide.root.id;\n      }).join(' ');\n      setAttribute(slide, ARIA_LABEL, label);\n      setAttribute(slide, ARIA_CONTROLS, controls);\n    }\n  }\n  /**\r\n   * Destroys the component.\r\n   */\n\n\n  function destroy() {\n    destroyEvents();\n    removeClass(slide, STATUS_CLASSES);\n    removeAttribute(slide, ALL_ATTRIBUTES);\n  }\n  /**\r\n   * Updates attribute and classes of the slide.\r\n   */\n\n\n  function update() {\n    var currIndex = Splide.index;\n    updateActivity.call(this, isActive());\n    updateVisibility.call(this, isVisible());\n    toggleClass(slide, CLASS_PREV, index === currIndex - 1);\n    toggleClass(slide, CLASS_NEXT, index === currIndex + 1);\n  }\n  /**\r\n   * Updates the status related with activity.\r\n   *\r\n   * @param active - Set `true` if the slide is active.\r\n   */\n\n\n  function updateActivity(active) {\n    if (active !== hasClass(slide, CLASS_ACTIVE)) {\n      toggleClass(slide, CLASS_ACTIVE, active);\n\n      if (isNavigation) {\n        setAttribute(slide, ARIA_CURRENT, active || null);\n      }\n\n      emit(active ? EVENT_ACTIVE : EVENT_INACTIVE, this);\n    }\n  }\n  /**\r\n   * Updates the status related with visibility.\r\n   *\r\n   * @param visible - Set `true` if the slide is visible.\r\n   */\n\n\n  function updateVisibility(visible) {\n    setAttribute(slide, ARIA_HIDDEN, !visible || null);\n    setAttribute(slide, TAB_INDEX, visible && options.slideFocus ? 0 : null);\n\n    if (visible !== hasClass(slide, CLASS_VISIBLE)) {\n      toggleClass(slide, CLASS_VISIBLE, visible);\n      emit(visible ? EVENT_VISIBLE : EVENT_HIDDEN, this);\n    }\n  }\n  /**\r\n   * Adds a CSS rule to the slider or the container.\r\n   *\r\n   * @param prop         - A property name.\r\n   * @param value        - A CSS value to add.\r\n   * @param useContainer - Optional. Determines whether to apply the rule to the container or not.\r\n   */\n\n\n  function rule(prop, value, useContainer) {\n    var selector = \"#\" + slide.id + (container && useContainer ? \" > .\" + CLASS_CONTAINER : '');\n    Components.Style.rule(selector, prop, value);\n  }\n  /**\r\n   * Checks if the slide is active or not.\r\n   *\r\n   * @return `true` if the slide is active.\r\n   */\n\n\n  function isActive() {\n    return Splide.index === index;\n  }\n  /**\r\n   * Checks if the slide is visible or not.\r\n   */\n\n\n  function isVisible() {\n    if (Splide.is(FADE)) {\n      return isActive();\n    }\n\n    var trackRect = rect(Components.Elements.track);\n    var slideRect = rect(slide);\n    var left = resolve('left');\n    var right = resolve('right');\n    return floor(trackRect[left]) <= slideRect[left] && slideRect[right] <= ceil(trackRect[right]);\n  }\n  /**\r\n   * Calculates how far this slide is from another slide and\r\n   * returns `true` if the distance is within the given number.\r\n   *\r\n   * @param from     - An index of a base slide.\r\n   * @param distance - `true` if the slide is within this number.\r\n   *\r\n   * @return `true` if the slide is within the `distance` from the base slide, or otherwise `false`.\r\n   */\n\n\n  function isWithin(from, distance) {\n    var diff = abs(from - index);\n\n    if (!Splide.is(SLIDE) && !isClone) {\n      diff = min(diff, Splide.length - diff);\n    }\n\n    return diff <= distance;\n  }\n\n  return {\n    index: index,\n    slideIndex: slideIndex,\n    slide: slide,\n    container: container,\n    isClone: isClone,\n    mount: mount,\n    destroy: destroy,\n    rule: rule,\n    isWithin: isWithin\n  };\n}\n/**\r\n * The component for managing all slides include clones.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return An Slides component object.\r\n */\n\n\nfunction Slides(Splide, Components, options) {\n  var _EventInterface3 = EventInterface(Splide),\n      on = _EventInterface3.on,\n      emit = _EventInterface3.emit,\n      bind = _EventInterface3.bind;\n\n  var _Components$Elements = Components.Elements,\n      slides = _Components$Elements.slides,\n      list = _Components$Elements.list;\n  /**\r\n   * Stores all SlideComponent objects.\r\n   */\n\n  var Slides = [];\n  /**\r\n   * Called when the component is mounted.\r\n   */\n\n  function mount() {\n    init();\n    on(EVENT_REFRESH, refresh);\n  }\n  /**\r\n   * Initializes the component.\r\n   */\n\n\n  function init() {\n    slides.forEach(function (slide, index) {\n      register(slide, index, -1);\n    });\n  }\n  /**\r\n   * Destroys the component.\r\n   */\n\n\n  function destroy() {\n    forEach$1(function (Slide) {\n      Slide.destroy();\n    });\n    empty(Slides);\n  }\n  /**\r\n   * Discards all Slide components and regenerates them.\r\n   */\n\n\n  function refresh() {\n    destroy();\n    init();\n  }\n  /**\r\n   * Registers a slide element and creates a Slide object.\r\n   *\r\n   * @param slide      - A slide element to register.\r\n   * @param index      - A slide index.\r\n   * @param slideIndex - A slide index for clones. This must be `-1` for regular slides.\r\n   */\n\n\n  function register(slide, index, slideIndex) {\n    var object = Slide$1(Splide, index, slideIndex, slide);\n    object.mount();\n    Slides.push(object);\n  }\n  /**\r\n   * Returns all Slide objects.\r\n   *\r\n   * @param excludeClones - Optional. Determines whether to exclude clones or not.\r\n   *\r\n   * @return An array with Slide objects.\r\n   */\n\n\n  function get(excludeClones) {\n    return excludeClones ? filter(function (Slide) {\n      return !Slide.isClone;\n    }) : Slides;\n  }\n  /**\r\n   * Returns slides in the specified page.\r\n   *\r\n   * @param page - A page index.\r\n   *\r\n   * @return An array with slides that belong to the page.\r\n   */\n\n\n  function getIn(page) {\n    var Controller = Components.Controller;\n    var index = Controller.toIndex(page);\n    var max = Controller.hasFocus() ? 1 : options.perPage;\n    return filter(function (Slide) {\n      return between(Slide.index, index, index + max - 1);\n    });\n  }\n  /**\r\n   * Returns a Slide object at the specified index.\r\n   *\r\n   * @param index - A slide index.\r\n   *\r\n   * @return A Slide object if available, or otherwise `undefined`.\r\n   */\n\n\n  function getAt(index) {\n    return filter(index)[0];\n  }\n  /**\r\n   * Inserts a slide or slides at a specified index.\r\n   *\r\n   * @param items - A slide element, an HTML string or an array with them.\r\n   * @param index - Optional. An index to insert the slide at. If omitted, appends it to the list.\r\n   */\n\n\n  function add(items, index) {\n    forEach(items, function (slide) {\n      if (isString(slide)) {\n        slide = parseHtml(slide);\n      }\n\n      if (isHTMLElement(slide)) {\n        var ref = slides[index];\n        ref ? before(slide, ref) : append(list, slide);\n        addClass(slide, options.classes.slide);\n        observeImages(slide, emit.bind(null, EVENT_RESIZE));\n      }\n    });\n    emit(EVENT_REFRESH);\n  }\n  /**\r\n   * Removes slides that match the matcher\r\n   * that can be an index, an array with indices, a selector, or an iteratee function.\r\n   *\r\n   * @param matcher - An index, an array with indices, a selector string, or an iteratee function.\r\n   */\n\n\n  function remove$1(matcher) {\n    remove(filter(matcher).map(function (Slide) {\n      return Slide.slide;\n    }));\n    emit(EVENT_REFRESH);\n  }\n  /**\r\n   * Iterates over Slide objects by the iteratee function.\r\n   *\r\n   * @param iteratee      - An iteratee function that takes a Slide object, an index and an array with Slides.\r\n   * @param excludeClones - Optional. Determines whether to exclude clones or not.\r\n   */\n\n\n  function forEach$1(iteratee, excludeClones) {\n    get(excludeClones).forEach(iteratee);\n  }\n  /**\r\n   * Filters Slides by the matcher\r\n   * that can be an index, an array with indices, a selector, or an predicate function.\r\n   *\r\n   * @param matcher - An index, an array with indices, a selector string, or an predicate function.\r\n   *\r\n   * @return An array with SlideComponent objects.\r\n   */\n\n\n  function filter(matcher) {\n    return Slides.filter(isFunction(matcher) ? matcher : function (Slide) {\n      return isString(matcher) ? matches(Slide.slide, matcher) : includes(toArray(matcher), Slide.index);\n    });\n  }\n  /**\r\n   * Adds a CSS rule to all slides or containers.\r\n   *\r\n   * @param prop         - A property name.\r\n   * @param value        - A CSS value to add.\r\n   * @param useContainer - Optional. Determines whether to apply the rule to the container or not.\r\n   */\n\n\n  function rule(prop, value, useContainer) {\n    forEach$1(function (Slide) {\n      Slide.rule(prop, value, useContainer);\n    });\n  }\n  /**\r\n   * Invokes the callback after all images in the element are loaded.\r\n   *\r\n   * @param elm      - An element that may contain images.\r\n   * @param callback - A callback function.\r\n   */\n\n\n  function observeImages(elm, callback) {\n    var images = queryAll(elm, 'img');\n    var length = images.length;\n\n    if (length) {\n      images.forEach(function (img) {\n        bind(img, 'load error', function () {\n          if (! --length) {\n            callback();\n          }\n        });\n      });\n    } else {\n      callback();\n    }\n  }\n  /**\r\n   * Returns the length of slides.\r\n   *\r\n   * @param excludeClones - Optional. Determines whether to exclude clones or not.\r\n   *\r\n   * @return The length of slides.\r\n   */\n\n\n  function getLength(excludeClones) {\n    return excludeClones ? slides.length : Slides.length;\n  }\n  /**\r\n   * Checks if the number of slides is over than the `perPage` option, including clones.\r\n   *\r\n   * @return `true` if there are enough slides, or otherwise `false`.\r\n   */\n\n\n  function isEnough() {\n    return Slides.length > options.perPage;\n  }\n\n  return {\n    mount: mount,\n    destroy: destroy,\n    register: register,\n    get: get,\n    getIn: getIn,\n    getAt: getAt,\n    add: add,\n    remove: remove$1,\n    forEach: forEach$1,\n    filter: filter,\n    rule: rule,\n    getLength: getLength,\n    isEnough: isEnough\n  };\n}\n/**\r\n * The component that generates clones for the loop slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Clones component object.\r\n */\n\n\nfunction Clones(Splide, Components, options) {\n  var _EventInterface4 = EventInterface(Splide),\n      on = _EventInterface4.on,\n      emit = _EventInterface4.emit;\n\n  var Elements = Components.Elements,\n      Slides = Components.Slides;\n  var resolve = Components.Direction.resolve;\n  var clones = [];\n  /**\r\n   * Keeps the current number of clones.\r\n   */\n\n  var cloneCount;\n  /**\r\n   * The index used for generating IDs.\r\n   */\n\n  var cloneIndex;\n  /**\r\n   * Called when the component is mounted.\r\n   */\n\n  function mount() {\n    init();\n    on(EVENT_REFRESH, refresh);\n    on([EVENT_UPDATED, EVENT_RESIZE], observe);\n  }\n  /**\r\n   * Removes all clones if available, and generates new clones.\r\n   */\n\n\n  function init() {\n    if (cloneCount = computeCloneCount()) {\n      generate(cloneCount);\n    }\n  }\n  /**\r\n   * Destroys clones.\r\n   */\n\n\n  function destroy() {\n    remove(clones);\n    empty(clones);\n  }\n  /**\r\n   * Discards all clones and regenerates them.\r\n   * Must do this before the Elements component collects slide elements.\r\n   */\n\n\n  function refresh() {\n    destroy();\n    init();\n  }\n  /**\r\n   * Observes the required clone count and refreshes the slider if necessary.\r\n   */\n\n\n  function observe() {\n    if (cloneCount !== computeCloneCount()) {\n      emit(EVENT_REFRESH);\n    }\n  }\n  /**\r\n   * Generates the specified number of clones.\r\n   *\r\n   * @param count - The number of clones to generate for each side.\r\n   */\n\n\n  function generate(count) {\n    var slides = Slides.get().slice();\n    var length = slides.length;\n\n    if (length) {\n      cloneIndex = 0;\n\n      while (slides.length < count) {\n        push(slides, slides);\n      }\n\n      slides.slice(-count).concat(slides.slice(0, count)).forEach(function (Slide, index) {\n        var isHead = index < count;\n        var clone = cloneDeep(Slide.slide);\n        isHead ? before(clone, slides[0].slide) : append(Elements.list, clone);\n        push(clones, clone);\n        Slides.register(clone, index - count + (isHead ? 0 : length), Slide.index);\n      });\n    }\n  }\n  /**\r\n   * Deeply clones the provided element with removing the ID attribute.\r\n   *\r\n   * @param elm - An element to clone.\r\n   *\r\n   * @return A cloned element.\r\n   */\n\n\n  function cloneDeep(elm) {\n    var clone = elm.cloneNode(true);\n    addClass(clone, options.classes.clone);\n    clone.id = Splide.root.id + \"-clone\" + pad(++cloneIndex);\n    return clone;\n  }\n  /**\r\n   * Returns the number of elements to generate.\r\n   * This always returns 0 if the slider type is not `'loop'`.\r\n   *\r\n   * @return The number of clones.\r\n   */\n\n\n  function computeCloneCount() {\n    var clones = options.clones;\n\n    if (!Splide.is(LOOP)) {\n      clones = 0;\n    } else if (!clones) {\n      var fixedSize = options[resolve('fixedWidth')];\n      var fixedCount = fixedSize && ceil(rect(Elements.track)[resolve('width')] / fixedSize);\n      var baseCount = fixedCount || options[resolve('autoWidth')] && Splide.length || options.perPage;\n      clones = baseCount * (options.drag ? (options.flickMaxPages || 1) + 1 : 2);\n    }\n\n    return clones;\n  }\n\n  return {\n    mount: mount,\n    destroy: destroy\n  };\n}\n/**\r\n * The component that layouts slider components and provides methods for dimensions.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return An Layout component object.\r\n */\n\n\nfunction Layout(Splide, Components, options) {\n  var _EventInterface5 = EventInterface(Splide),\n      on = _EventInterface5.on,\n      bind = _EventInterface5.bind,\n      emit = _EventInterface5.emit;\n\n  var Slides = Components.Slides;\n  var ruleBy = Components.Style.ruleBy;\n  var resolve = Components.Direction.resolve;\n  var _Components$Elements2 = Components.Elements,\n      root = _Components$Elements2.root,\n      track = _Components$Elements2.track,\n      list = _Components$Elements2.list;\n  var getAt = Slides.getAt;\n  var vertical = options.direction === TTB;\n  /**\r\n   * Called when the component is mounted.\r\n   */\n\n  function mount() {\n    init();\n    bind(window, 'resize load', Throttle(emit.bind(this, EVENT_RESIZE)));\n    on([EVENT_UPDATED, EVENT_REFRESH], init);\n    on(EVENT_RESIZE, resize);\n  }\n  /**\r\n   * Initializes the component on `mount` or `updated`.\r\n   * Uses `max-width` for the root to prevent the slider from exceeding the parent element.\r\n   */\n\n\n  function init() {\n    ruleBy(root, 'maxWidth', unit(options.width));\n    ruleBy(track, resolve('paddingLeft'), cssPadding(false));\n    ruleBy(track, resolve('paddingRight'), cssPadding(true));\n    Slides.rule(resolve('marginRight'), unit(options.gap));\n    Slides.rule('width', cssSlideWidth());\n    setSlidesHeight();\n    resize();\n  }\n  /**\r\n   * Updates dimensions of some elements when the slider is resized.\r\n   */\n\n\n  function resize() {\n    ruleBy(track, 'height', cssTrackHeight());\n    options.heightRatio && setSlidesHeight();\n    emit(EVENT_RESIZED);\n  }\n  /**\r\n   * Updates the height of slides or their container elements if available.\r\n   */\n\n\n  function setSlidesHeight() {\n    Slides.rule('height', cssSlideHeight(), true);\n  }\n  /**\r\n   * Parses the padding option and returns the value for each side.\r\n   * This method returns `paddingTop` or `paddingBottom` for the vertical slider.\r\n   *\r\n   * @param right - Determines whether to get `paddingRight/Bottom` or `paddingLeft/Top`.\r\n   *\r\n   * @return The padding value as a CSS string.\r\n   */\n\n\n  function cssPadding(right) {\n    var padding = options.padding;\n    var prop = resolve(right ? 'right' : 'left', true);\n    return padding ? unit(padding[prop] || (isObject(padding) ? '0' : padding)) : '';\n  }\n  /**\r\n   * Returns the height of the track element as a CSS string.\r\n   *\r\n   * @return The height of the track.\r\n   */\n\n\n  function cssTrackHeight() {\n    var height = '';\n\n    if (vertical) {\n      height = cssHeight();\n      assert(height, '\"height\" or \"heightRatio\" is missing.');\n      var paddingTop = cssPadding(false);\n      var paddingBottom = cssPadding(true);\n\n      if (paddingTop || paddingBottom) {\n        height = \"calc(\" + height;\n        height += \"\" + (paddingTop ? \" - \" + paddingTop : '') + (paddingBottom ? \" - \" + paddingBottom : '') + \")\";\n      }\n    }\n\n    return height;\n  }\n  /**\r\n   * Converts options related with height to a CSS string.\r\n   *\r\n   * @return The height as a CSS string if available, or otherwise an empty string.\r\n   */\n\n\n  function cssHeight() {\n    return unit(options.height || rect(list).width * options.heightRatio);\n  }\n  /**\r\n   * Returns the width of the slide as a CSS string.\r\n   *\r\n   * @return The width of the slide.\r\n   */\n\n\n  function cssSlideWidth() {\n    return options.autoWidth ? '' : unit(options.fixedWidth) || (vertical ? '' : cssSlideSize());\n  }\n  /**\r\n   * Returns the height of the slide as a CSS string.\r\n   *\r\n   * @return The height of the slide.\r\n   */\n\n\n  function cssSlideHeight() {\n    return unit(options.fixedHeight) || (vertical ? options.autoHeight ? '' : cssSlideSize() : cssHeight());\n  }\n  /**\r\n   * Returns the CSS string for slide width or height without gap.\r\n   *\r\n   * @return The CSS string for slide width or height.\r\n   */\n\n\n  function cssSlideSize() {\n    var gap = unit(options.gap);\n    return \"calc((100%\" + (gap && \" + \" + gap) + \")/\" + (options.perPage || 1) + (gap && \" - \" + gap) + \")\";\n  }\n  /**\r\n   * Returns the list width for the horizontal slider, or the height for the vertical slider.\r\n   *\r\n   * @return The size of the track element in pixel.\r\n   */\n\n\n  function listSize() {\n    return rect(list)[resolve('width')];\n  }\n  /**\r\n   * Returns the slide width for the horizontal slider, or the height for the vertical slider.\r\n   *\r\n   * @param index      - Optional. A slide index.\r\n   * @param withoutGap - Optional. Determines whether to exclude the gap amount or not.\r\n   *\r\n   * @return The size of the specified slide element in pixel.\r\n   */\n\n\n  function slideSize(index, withoutGap) {\n    var Slide = getAt(index || 0);\n    return Slide ? rect(Slide.slide)[resolve('width')] + (withoutGap ? 0 : getGap()) : 0;\n  }\n  /**\r\n   * Returns the total width or height of slides from 0 to the specified index.\r\n   *\r\n   * @param index      - A slide index. If omitted, uses the last index.\r\n   * @param withoutGap - Optional. Determines whether to exclude the last gap or not.\r\n   *\r\n   * @return The total width of slides in the horizontal slider, or the height in the vertical one.\r\n   */\n\n\n  function totalSize(index, withoutGap) {\n    var Slide = getAt(index);\n\n    if (Slide) {\n      var right = rect(Slide.slide)[resolve('right')];\n      var left = rect(list)[resolve('left')];\n      return abs(right - left) + (withoutGap ? 0 : getGap());\n    }\n\n    return 0;\n  }\n  /**\r\n   * Returns the slider size without clones.\r\n   *\r\n   * @return The slider size.\r\n   */\n\n\n  function sliderSize() {\n    var firstSlide = getAt(0);\n    var lastSlide = getAt(Slides.getLength(true) - 1);\n\n    if (firstSlide && lastSlide) {\n      return rect(lastSlide.slide)[resolve('right')] - rect(firstSlide.slide)[resolve('left')];\n    }\n\n    return 0;\n  }\n  /**\r\n   * Returns the gap value.\r\n   *\r\n   *\r\n   * @return The gap value in pixel.\r\n   */\n\n\n  function getGap() {\n    var Slide = getAt(0);\n    return Slide ? parseFloat(style(Slide.slide, resolve('marginRight'))) || 0 : 0;\n  }\n  /**\r\n   * Returns the padding value.\r\n   *\r\n   * @param right - Determines whether to get `paddingRight/Bottom` or `paddingLeft/Top`.\r\n   *\r\n   * @return The padding value in pixel.\r\n   */\n\n\n  function getPadding(right) {\n    return parseFloat(style(track, resolve(\"padding\" + (right ? 'Right' : 'Left'), true))) || 0;\n  }\n\n  return {\n    mount: mount,\n    listSize: listSize,\n    slideSize: slideSize,\n    sliderSize: sliderSize,\n    totalSize: totalSize,\n    getPadding: getPadding\n  };\n}\n/**\r\n * The component for moving the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Move component object.\r\n */\n\n\nfunction Move(Splide, Components, options) {\n  var _EventInterface6 = EventInterface(Splide),\n      on = _EventInterface6.on,\n      emit = _EventInterface6.emit;\n\n  var _Components$Layout = Components.Layout,\n      slideSize = _Components$Layout.slideSize,\n      getPadding = _Components$Layout.getPadding,\n      totalSize = _Components$Layout.totalSize,\n      listSize = _Components$Layout.listSize,\n      sliderSize = _Components$Layout.sliderSize;\n  var _Components$Direction = Components.Direction,\n      resolve = _Components$Direction.resolve,\n      orient = _Components$Direction.orient;\n  var _Components$Elements3 = Components.Elements,\n      list = _Components$Elements3.list,\n      track = _Components$Elements3.track;\n  /**\r\n   * Indicates whether the slider is just looping or not.\r\n   */\n\n  var looping;\n  /**\r\n   * Indicates whether the component can move the slider or not.\r\n   */\n\n  var waiting;\n  /**\r\n   * Keeps the current position.\r\n   */\n\n  var currPosition = 0;\n  /**\r\n   * Keeps the rate of position to the slider width.\r\n   */\n\n  var positionRate = 0;\n  /**\r\n   * Called when the component is mounted.\r\n   */\n\n  function mount() {\n    on([EVENT_RESIZE, EVENT_UPDATED, EVENT_REFRESH], reposition);\n  }\n  /**\r\n   * Repositions the slider.\r\n   */\n\n\n  function reposition() {\n    if (options.drag !== 'free') {\n      jump(Splide.index);\n    } else {\n      if (!options[resolve('fixedWidth')] && !options[resolve('autoWidth')]) {\n        translate(listSize() * positionRate);\n      }\n\n      if (isExceededMax(currPosition)) {\n        translate(getLimit(true));\n      }\n    }\n  }\n  /**\r\n   * Goes to the slide at the specified index with the Transition component.\r\n   *\r\n   * @param dest  - A destination index to go to.\r\n   * @param index - A slide index.\r\n   * @param prev  - A previous index.\r\n   */\n\n\n  function move(dest, index, prev) {\n    if (!isBusy()) {\n      var position = getPosition();\n      looping = dest !== index;\n      waiting = options.waitForTransition;\n      Splide.state.set(MOVING);\n      emit(EVENT_MOVE, index, prev, dest);\n      Components.Transition.start(dest, function () {\n        onMoved(dest, index, prev, position);\n      });\n    }\n  }\n  /**\r\n   * Called after the transition ends.\r\n   *\r\n   * @param dest        - A destination index to go to.\r\n   * @param index       - A slide index.\r\n   * @param prev        - A previous index.\r\n   * @param oldPosition - An old position.\r\n   */\n\n\n  function onMoved(dest, index, prev, oldPosition) {\n    if (looping) {\n      jump(index);\n      looping = false;\n    }\n\n    waiting = false;\n    Splide.state.set(IDLE);\n    emit(EVENT_MOVED, index, prev, dest);\n\n    if (options.trimSpace === 'move' && dest !== prev && oldPosition === getPosition()) {\n      Components.Controller.go(dest > prev ? '>' : '<');\n    }\n  }\n  /**\r\n   * Jumps to the slide at the specified index.\r\n   *\r\n   * @param index - An index to jump to.\r\n   */\n\n\n  function jump(index) {\n    translate(toPosition(index, true));\n  }\n  /**\r\n   * Moves the slider to the specified position.\r\n   *\r\n   * @param position - The destination.\r\n   */\n\n\n  function translate(position) {\n    currPosition = loop(position);\n    positionRate = currPosition / listSize();\n    Components.Style.ruleBy(list, 'transform', \"translate\" + resolve('X') + \"(\" + currPosition + \"px)\");\n  }\n  /**\r\n   * Loops the provided position if it exceeds limits.\r\n   *\r\n   * @param position - A position to loop.\r\n   */\n\n\n  function loop(position) {\n    if (!looping && Splide.is(LOOP)) {\n      var diff = position - currPosition;\n      var exceededMin = isExceededMin(position);\n      var exceededMax = isExceededMax(position);\n\n      if (exceededMin && diff > 0 || exceededMax && diff < 0) {\n        position += orient(sliderSize() * (exceededMin ? 1 : -1));\n      }\n    }\n\n    return position;\n  }\n  /**\r\n   * Cancels transition.\r\n   */\n\n\n  function cancel() {\n    translate(getPosition());\n    Components.Transition.cancel();\n  }\n  /**\r\n   * Returns the closest index to the position.\r\n   *\r\n   * @param position - A position to convert.\r\n   *\r\n   * @return The closest index to the position.\r\n   */\n\n\n  function toIndex(position) {\n    var Slides = Components.Slides.get();\n    var index = 0;\n    var minDistance = Infinity;\n\n    for (var i = 0; i < Slides.length; i++) {\n      var slideIndex = Slides[i].index;\n      var distance = abs(toPosition(slideIndex) - position);\n\n      if (distance < minDistance) {\n        minDistance = distance;\n        index = slideIndex;\n      } else {\n        break;\n      }\n    }\n\n    return index;\n  }\n  /**\r\n   * Converts the slide index to the position.\r\n   *\r\n   * @param index    - An index to convert.\r\n   * @param trimming - Optional. Whether to trim edge spaces or not.\r\n   *\r\n   * @return The position corresponding with the index.\r\n   */\n\n\n  function toPosition(index, trimming) {\n    var position = orient(totalSize(index - 1) - offset(index));\n    return trimming ? trim(position) : position;\n  }\n  /**\r\n   * Returns the current position.\r\n   *\r\n   * @return The position of the list element.\r\n   */\n\n\n  function getPosition() {\n    var left = resolve('left');\n    return rect(list)[left] - rect(track)[left] + orient(getPadding(false));\n  }\n  /**\r\n   * Trims spaces on the edge of the slider.\r\n   *\r\n   * @param position - A position to trim.\r\n   *\r\n   * @return A trimmed position.\r\n   */\n\n\n  function trim(position) {\n    if (options.trimSpace && Splide.is(SLIDE)) {\n      position = clamp(position, 0, orient(sliderSize() - listSize()));\n    }\n\n    return position;\n  }\n  /**\r\n   * Returns the offset amount.\r\n   *\r\n   * @param index - An index.\r\n   */\n\n\n  function offset(index) {\n    var focus = options.focus;\n\n    if (focus === 'center') {\n      return (listSize() - slideSize(index, true)) / 2;\n    }\n\n    return (+focus || 0) * slideSize(index);\n  }\n  /**\r\n   * Returns the limit number that the slider can move to.\r\n   *\r\n   * @param max - Determines whether to return the maximum or minimum limit.\r\n   *\r\n   * @return The border number.\r\n   */\n\n\n  function getLimit(max) {\n    var trimming = !!options.trimSpace;\n    return max ? toPosition(Components.Controller.getEnd(), trimming) : toPosition(0, trimming);\n  }\n  /**\r\n   * Checks if the slider can move now or not.\r\n   *\r\n   * @return `true` if the slider can move, or otherwise `false`.\r\n   */\n\n\n  function isBusy() {\n    return !!(looping || waiting);\n  }\n  /**\r\n   * Checks if the provided position exceeds the minimum limit or not.\r\n   *\r\n   * @param position - A position to test.\r\n   * @param offset   - Optional. Offsets the limit in pixel.\r\n   *\r\n   * @return `true` if the position exceeds the limit, or otherwise `false`.\r\n   */\n\n\n  function isExceededMin(position, offset) {\n    return orient(position) + (offset || 0) < orient(getLimit(false));\n  }\n  /**\r\n   * Checks if the provided position exceeds the maximum limit or not.\r\n   *\r\n   * @param position - A position to test.\r\n   * @param offset   - Optional. Offsets the limit in pixel.\r\n   *\r\n   * @return `true` if the position exceeds the limit, or otherwise `false`.\r\n   */\n\n\n  function isExceededMax(position, offset) {\n    return orient(position) + (offset || 0) > orient(getLimit(true));\n  }\n  /**\r\n   * Checks if the slider position exceeds borders or not.\r\n   *\r\n   * @return `true` if the position is over borders, or otherwise `false`.\r\n   */\n\n\n  function isExceeded() {\n    return isExceededMin(currPosition) || isExceededMax(currPosition);\n  }\n\n  return {\n    mount: mount,\n    move: move,\n    jump: jump,\n    translate: translate,\n    cancel: cancel,\n    toIndex: toIndex,\n    toPosition: toPosition,\n    getPosition: getPosition,\n    getLimit: getLimit,\n    isBusy: isBusy,\n    isExceededMin: isExceededMin,\n    isExceededMax: isExceededMax,\n    isExceeded: isExceeded\n  };\n}\n/**\r\n * The component for controlling the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Controller component object.\r\n */\n\n\nfunction Controller(Splide, Components, options) {\n  var _EventInterface7 = EventInterface(Splide),\n      on = _EventInterface7.on;\n\n  var Move = Components.Move;\n  var _Components$Slides = Components.Slides,\n      isEnough = _Components$Slides.isEnough,\n      getLength = _Components$Slides.getLength;\n  var isLoop = Splide.is(LOOP);\n  /**\r\n   * The current index.\r\n   */\n\n  var currIndex = options.start || 0;\n  /**\r\n   * The previous index.\r\n   */\n\n  var prevIndex = currIndex;\n  /**\r\n   * The latest number of slides.\r\n   */\n\n  var slideCount;\n  /**\r\n   * The latest `perMove` value.\r\n   */\n\n  var perMove;\n  /**\r\n   * The latest `perMove` value.\r\n   */\n\n  var perPage;\n  /**\r\n   * Called when the component is mounted.\r\n   */\n\n  function mount() {\n    init();\n    Move.jump(currIndex);\n    on([EVENT_UPDATED, EVENT_REFRESH], init);\n    on(EVENT_SCROLLED, function () {\n      setIndex(Move.toIndex(Move.getPosition()));\n    }, 0);\n  }\n  /**\r\n   * Initializes the component.\r\n   */\n\n\n  function init() {\n    slideCount = getLength(true);\n    perMove = options.perMove;\n    perPage = options.perPage;\n  }\n  /**\r\n   * Moves the slider by the control pattern.\r\n   *\r\n   * @see `Splide#go()`\r\n   *\r\n   * @param control        - A control pattern.\r\n   * @param allowSameIndex - Optional. Determines whether to allow to go to the current index or not.\r\n   */\n\n\n  function go(control, allowSameIndex) {\n    var dest = parse(control);\n    var index = loop(dest);\n\n    if (index > -1 && !Move.isBusy() && (allowSameIndex || index !== currIndex)) {\n      setIndex(index);\n      Move.move(dest, index, prevIndex);\n    }\n  }\n  /**\r\n   * Parses the control and returns a slide index.\r\n   *\r\n   * @param control - A control pattern to parse.\r\n   */\n\n\n  function parse(control) {\n    var index = currIndex;\n\n    if (isString(control)) {\n      var _ref = control.match(/([+\\-<>])(\\d+)?/) || [],\n          indicator = _ref[1],\n          number = _ref[2];\n\n      if (indicator === '+' || indicator === '-') {\n        index = computeDestIndex(currIndex + +(\"\" + indicator + (+number || 1)), currIndex, true);\n      } else if (indicator === '>') {\n        index = number ? toIndex(+number) : getNext(true);\n      } else if (indicator === '<') {\n        index = getPrev(true);\n      }\n    } else {\n      if (isLoop) {\n        index = clamp(control, -perPage, slideCount + perPage - 1);\n      } else {\n        index = clamp(control, 0, getEnd());\n      }\n    }\n\n    return index;\n  }\n  /**\r\n   * Returns a next destination index.\r\n   *\r\n   * @param destination - Optional. Determines whether to get a destination index or a slide one.\r\n   *\r\n   * @return A next index if available, or otherwise `-1`.\r\n   */\n\n\n  function getNext(destination) {\n    return getAdjacent(false, destination);\n  }\n  /**\r\n   * Returns a previous destination index.\r\n   *\r\n   * @param destination - Optional. Determines whether to get a destination index or a slide one.\r\n   *\r\n   * @return A previous index if available, or otherwise `-1`.\r\n   */\n\n\n  function getPrev(destination) {\n    return getAdjacent(true, destination);\n  }\n  /**\r\n   * Returns an adjacent destination index.\r\n   *\r\n   * @param prev        - Determines whether to return a previous or next index.\r\n   * @param destination - Optional. Determines whether to get a destination index or a slide one.\r\n   *\r\n   * @return An adjacent index if available, or otherwise `-1`.\r\n   */\n\n\n  function getAdjacent(prev, destination) {\n    var dest = computeDestIndex(currIndex + getPerMove() * (prev ? -1 : 1), currIndex);\n    return destination ? dest : loop(dest);\n  }\n  /**\r\n   * Converts the desired destination index to the valid one.\r\n   * - This may return clone indices if the editor is the loop mode,\r\n   *   or `-1` if there is no slide to go.\r\n   * - There are still slides where the slider can go if borders are between `from` and `dest`.\r\n   *\r\n   * @param dest        - The desired destination.\r\n   * @param from        - A base index.\r\n   * @param incremental - Optional. Whether the control is incremental or not.\r\n   *\r\n   * @return A converted destination index, including clones.\r\n   */\n\n\n  function computeDestIndex(dest, from, incremental) {\n    if (isEnough()) {\n      var end = getEnd(); // Will overrun:\n\n      if (dest < 0 || dest > end) {\n        if (between(0, dest, from, true) || between(end, from, dest, true)) {\n          dest = toIndex(toPage(dest));\n        } else {\n          if (isLoop) {\n            dest = perMove ? dest : dest < 0 ? -(slideCount % perPage || perPage) : slideCount;\n          } else if (options.rewind) {\n            dest = dest < 0 ? end : 0;\n          } else {\n            dest = -1;\n          }\n        }\n      } else {\n        if (!isLoop && !incremental && dest !== from) {\n          dest = toIndex(toPage(from) + (dest < from ? -1 : 1));\n        }\n      }\n    } else {\n      dest = -1;\n    }\n\n    return dest;\n  }\n  /**\r\n   * Returns the end index where the slider can go.\r\n   * For example, if the slider has 10 slides and the `perPage` option is 3,\r\n   * the slider can go to the slide 8 (the index is 7).\r\n   *\r\n   * @return An end index.\r\n   */\n\n\n  function getEnd() {\n    var end = slideCount - perPage;\n\n    if (hasFocus() || isLoop && perMove) {\n      end = slideCount - 1;\n    }\n\n    return max(end, 0);\n  }\n  /**\r\n   * Loops the provided index only in the loop mode.\r\n   *\r\n   * @param index - An index to loop.\r\n   *\r\n   * @return A looped index.\r\n   */\n\n\n  function loop(index) {\n    if (isLoop) {\n      return isEnough() ? index % slideCount + (index < 0 ? slideCount : 0) : -1;\n    }\n\n    return index;\n  }\n  /**\r\n   * Converts the page index to the slide index.\r\n   *\r\n   * @param page - A page index to convert.\r\n   *\r\n   * @return A slide index.\r\n   */\n\n\n  function toIndex(page) {\n    return clamp(hasFocus() ? page : perPage * page, 0, getEnd());\n  }\n  /**\r\n   * Converts the slide index to the page index.\r\n   *\r\n   * @param index - An index to convert.\r\n   */\n\n\n  function toPage(index) {\n    if (!hasFocus()) {\n      index = between(index, slideCount - perPage, slideCount - 1) ? slideCount - 1 : index;\n      index = floor(index / perPage);\n    }\n\n    return index;\n  }\n  /**\r\n   * Returns the number of slides to move for '>' and '<'.\r\n   *\r\n   * @return The number of slides to move.\r\n   */\n\n\n  function getPerMove() {\n    return perMove || hasFocus() ? 1 : perPage;\n  }\n  /**\r\n   * Sets a new index and retains old one.\r\n   *\r\n   * @param index - A new index to set.\r\n   */\n\n\n  function setIndex(index) {\n    if (index !== currIndex) {\n      prevIndex = currIndex;\n      currIndex = index;\n    }\n  }\n  /**\r\n   * Returns the current/previous index slide index.\r\n   *\r\n   * @param prev - Optional. Whether to return previous index or not.\r\n   */\n\n\n  function getIndex(prev) {\n    return prev ? prevIndex : currIndex;\n  }\n  /**\r\n   * Verifies if the focus option is available or not.\r\n   *\r\n   * @return `true` if the slider has the focus option.\r\n   */\n\n\n  function hasFocus() {\n    return !isUndefined(options.focus) || options.isNavigation;\n  }\n\n  return {\n    mount: mount,\n    go: go,\n    getNext: getNext,\n    getPrev: getPrev,\n    getEnd: getEnd,\n    setIndex: setIndex,\n    getIndex: getIndex,\n    toIndex: toIndex,\n    toPage: toPage,\n    hasFocus: hasFocus\n  };\n}\n/**\r\n * The namespace for SVG elements.\r\n */\n\n\nvar XML_NAME_SPACE = 'http://www.w3.org/2000/svg';\n/**\r\n * The arrow path.\r\n */\n\nvar PATH = 'm15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z';\n/**\r\n * SVG width and height.\r\n */\n\nvar SIZE = 40;\n/**\r\n * The component for handling previous and next arrows.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return An Arrows component object.\r\n */\n\nfunction Arrows(Splide, Components, options) {\n  var _EventInterface8 = EventInterface(Splide),\n      on = _EventInterface8.on,\n      bind = _EventInterface8.bind,\n      emit = _EventInterface8.emit;\n\n  var classes = options.classes,\n      i18n = options.i18n;\n  var Elements = Components.Elements,\n      Controller = Components.Controller;\n  var slider = Elements.slider,\n      track = Elements.track;\n  /**\r\n   * The wrapper element.\r\n   */\n\n  var wrapper = Elements.arrows;\n  /**\r\n   * The previous arrow element.\r\n   */\n\n  var prev = Elements.prev;\n  /**\r\n   * The next arrow element.\r\n   */\n\n  var next = Elements.next;\n  /**\r\n   * Indicates whether the component creates arrows or retrieved from the DOM.\r\n   */\n\n  var created;\n  /**\r\n   * An object with previous and next arrows.\r\n   */\n\n  var arrows = {};\n  /**\r\n   * Called when the component is mounted.\r\n   */\n\n  function mount() {\n    init();\n    on(EVENT_UPDATED, init);\n  }\n  /**\r\n   * Initializes the component.\r\n   */\n\n\n  function init() {\n    if (options.arrows) {\n      if (!prev || !next) {\n        createArrows();\n      }\n    }\n\n    if (prev && next) {\n      if (!arrows.prev) {\n        setAttribute(prev, ARIA_CONTROLS, track.id);\n        setAttribute(next, ARIA_CONTROLS, track.id);\n        arrows.prev = prev;\n        arrows.next = next;\n        listen();\n        emit(EVENT_ARROWS_MOUNTED, prev, next);\n      } else {\n        display(wrapper, options.arrows === false ? 'none' : '');\n      }\n    }\n  }\n  /**\r\n   * Destroys the component.\r\n   */\n\n\n  function destroy() {\n    if (created) {\n      remove(wrapper);\n    } else {\n      removeAttribute(prev, ALL_ATTRIBUTES);\n      removeAttribute(next, ALL_ATTRIBUTES);\n    }\n  }\n  /**\r\n   * Listens to some events.\r\n   */\n\n\n  function listen() {\n    var go = Controller.go;\n    on([EVENT_MOUNTED, EVENT_MOVE, EVENT_UPDATED, EVENT_REFRESH, EVENT_SCROLLED], update);\n    bind(next, 'click', function () {\n      go('>');\n    });\n    bind(prev, 'click', function () {\n      go('<');\n    });\n  }\n  /**\r\n   * Create arrows and append them to the slider.\r\n   */\n\n\n  function createArrows() {\n    var parent = options.arrows === 'slider' && slider ? slider : Splide.root;\n    wrapper = create('div', classes.arrows);\n    prev = createArrow(true);\n    next = createArrow(false);\n    created = true;\n    append(wrapper, [prev, next]);\n    before(wrapper, child(parent));\n  }\n  /**\r\n   * Creates an arrow button.\r\n   *\r\n   * @param prev - Determines whether to create a previous or next arrow.\r\n   *\r\n   * @return A created button element.\r\n   */\n\n\n  function createArrow(prev) {\n    var arrow = \"<button class=\\\"\" + classes.arrow + \" \" + (prev ? classes.prev : classes.next) + \"\\\" type=\\\"button\\\">\" + (\"<svg xmlns=\\\"\" + XML_NAME_SPACE + \"\\\" viewBox=\\\"0 0 \" + SIZE + \" \" + SIZE + \"\\\" width=\\\"\" + SIZE + \"\\\" height=\\\"\" + SIZE + \"\\\">\") + (\"<path d=\\\"\" + (options.arrowPath || PATH) + \"\\\" />\");\n    return parseHtml(arrow);\n  }\n  /**\r\n   * Updates status of arrows, such as `disabled` and `aria-label`.\r\n   */\n\n\n  function update() {\n    var index = Splide.index;\n    var prevIndex = Controller.getPrev();\n    var nextIndex = Controller.getNext();\n    var prevLabel = prevIndex > -1 && index < prevIndex ? i18n.last : i18n.prev;\n    var nextLabel = nextIndex > -1 && index > nextIndex ? i18n.first : i18n.next;\n    prev.disabled = prevIndex < 0;\n    next.disabled = nextIndex < 0;\n    setAttribute(prev, ARIA_LABEL, prevLabel);\n    setAttribute(next, ARIA_LABEL, nextLabel);\n    emit(EVENT_ARROWS_UPDATED, prev, next, prevIndex, nextIndex);\n  }\n\n  return {\n    arrows: arrows,\n    mount: mount,\n    destroy: destroy\n  };\n}\n/**\r\n * The component for auto playing sliders.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return An Autoplay component object.\r\n */\n\n\nfunction Autoplay(Splide, Components, options) {\n  var _EventInterface9 = EventInterface(Splide),\n      on = _EventInterface9.on,\n      bind = _EventInterface9.bind,\n      emit = _EventInterface9.emit;\n\n  var _Components$Elements4 = Components.Elements,\n      root = _Components$Elements4.root,\n      track = _Components$Elements4.track,\n      bar = _Components$Elements4.bar,\n      playButton = _Components$Elements4.play,\n      pauseButton = _Components$Elements4.pause;\n  var interval = RequestInterval(options.interval, Splide.go.bind(Splide, '>'), update);\n  var isPaused = interval.isPaused;\n  /**\r\n   * Indicates whether the slider is hovered or not.\r\n   */\n\n  var hovered;\n  /**\r\n   * Indicates whether one of slider elements has focus or not.\r\n   */\n\n  var focused;\n  /**\r\n   * Turns into `true` when autoplay is manually paused.\r\n   */\n\n  var paused;\n  /**\r\n   * Called when the component is mounted.\r\n   */\n\n  function mount() {\n    var autoplay = options.autoplay;\n\n    if (autoplay) {\n      initButton(true);\n      initButton(false);\n      listen();\n\n      if (autoplay !== 'pause') {\n        play();\n      }\n    }\n  }\n  /**\r\n   * Initializes a play/pause button.\r\n   *\r\n   * @param forPause - Determines whether to initialize a pause or play button.\r\n   */\n\n\n  function initButton(forPause) {\n    var button = forPause ? pauseButton : playButton;\n\n    if (button) {\n      if (!isHTMLButtonElement(button)) {\n        setAttribute(button, ROLE, 'button');\n      }\n\n      setAttribute(button, ARIA_CONTROLS, track.id);\n      setAttribute(button, ARIA_LABEL, options.i18n[forPause ? 'pause' : 'play']);\n      bind(button, 'click', forPause ? pause : play);\n    }\n  }\n  /**\r\n   * Listens to some events.\r\n   */\n\n\n  function listen() {\n    if (options.pauseOnHover) {\n      bind(root, 'mouseenter mouseleave', function (e) {\n        hovered = e.type === 'mouseenter';\n        autoToggle();\n      });\n    }\n\n    if (options.pauseOnFocus) {\n      bind(root, 'focusin focusout', function (e) {\n        focused = e.type === 'focusin';\n        autoToggle();\n      });\n    }\n\n    on([EVENT_MOVE, EVENT_SCROLL, EVENT_REFRESH], interval.rewind);\n  }\n  /**\r\n   * Starts autoplay and clears all flags.\r\n   */\n\n\n  function play() {\n    if (isPaused() && Components.Slides.isEnough()) {\n      interval.start(!options.resetProgress);\n      focused = false;\n      hovered = false;\n      emit(EVENT_AUTOPLAY_PLAY);\n    }\n  }\n  /**\r\n   * Pauses autoplay.\r\n   *\r\n   * @param manual - If `true`, autoplay keeps paused until `play()` is explicitly called.\r\n   */\n\n\n  function pause(manual) {\n    if (manual === void 0) {\n      manual = true;\n    }\n\n    if (!isPaused()) {\n      interval.pause();\n      emit(EVENT_AUTOPLAY_PAUSE);\n    }\n\n    paused = manual;\n  }\n  /**\r\n   * Toggles play/pause according to current flags.\r\n   * If autoplay is manually paused, this will do nothing.\r\n   */\n\n\n  function autoToggle() {\n    if (!paused) {\n      if (!hovered && !focused) {\n        play();\n      } else {\n        pause(false);\n      }\n    }\n  }\n  /**\r\n   * Called on every animation frame when auto playing.\r\n   *\r\n   * @param rate - The progress rate between 0 to 1.\r\n   */\n\n\n  function update(rate) {\n    emit(EVENT_AUTOPLAY_PLAYING, rate);\n\n    if (bar) {\n      style(bar, {\n        width: rate * 100 + \"%\"\n      });\n    }\n  }\n\n  return {\n    mount: mount,\n    destroy: interval.cancel,\n    play: play,\n    pause: pause,\n    isPaused: isPaused\n  };\n}\n/**\r\n * The component for setting the image as the slide background.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Cover component object.\r\n */\n\n\nfunction Cover(Splide, Components, options) {\n  var _EventInterface10 = EventInterface(Splide),\n      on = _EventInterface10.on;\n  /**\r\n   * Called when the component is mounted.\r\n   */\n\n\n  function mount() {\n    if (options.cover) {\n      on(EVENT_LAZYLOAD_LOADED, function (img, Slide) {\n        toggle(true, img, Slide);\n      });\n      on([EVENT_MOUNTED, EVENT_UPDATED, EVENT_REFRESH], apply.bind(null, true));\n    }\n  }\n  /**\r\n   * Destroys the component.\r\n   */\n\n\n  function destroy() {\n    apply(false);\n  }\n  /**\r\n   * Sets/removes the background image to/from all slides.\r\n   *\r\n   * @param cover - If `false`, removes the background image.\r\n   */\n\n\n  function apply(cover) {\n    Components.Slides.forEach(function (Slide) {\n      var img = child(Slide.container || Slide.slide, 'img');\n\n      if (img && img.src) {\n        toggle(cover, img, Slide);\n      }\n    });\n  }\n  /**\r\n   * Sets/removes the background image to/from the parent element.\r\n   *\r\n   * @param cover - If `false`, removes the background image.\r\n   * @param img   - A target image element.\r\n   * @param Slide - A SlideComponent object where the image belongs.\r\n   */\n\n\n  function toggle(cover, img, Slide) {\n    Slide.rule('background', cover ? \"center/cover no-repeat url(\\\"\" + img.src + \"\\\")\" : '', true);\n    display(img, cover ? 'none' : '');\n  }\n\n  return {\n    mount: mount,\n    destroy: destroy\n  };\n}\n/**\r\n * Triggers the bounce effect when the diff becomes less than this value.\r\n *\r\n * @since 3.0.0\r\n */\n\n\nvar BOUNCE_DIFF_THRESHOLD = 10;\n/**\r\n * The duration of the bounce effect.\r\n *\r\n * @since 3.0.0\r\n */\n\nvar BOUNCE_DURATION = 600;\n/**\r\n * The friction factor.\r\n *\r\n * @since 3.0.0\r\n */\n\nvar FRICTION_FACTOR = 0.6;\n/**\r\n * The velocity to calculate the scroll duration.\r\n *\r\n * @since 3.0.0\r\n */\n\nvar BASE_VELOCITY = 1.2;\n/**\r\n * The minimum duration of scroll.\r\n *\r\n * @since 3.0.0\r\n */\n\nvar MIN_DURATION = 800;\n/**\r\n * The component for scrolling the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Scroll component object.\r\n */\n\nfunction Scroll(Splide, Components, options) {\n  var _EventInterface11 = EventInterface(Splide),\n      on = _EventInterface11.on,\n      emit = _EventInterface11.emit;\n\n  var Move = Components.Move;\n  var getPosition = Move.getPosition,\n      getLimit = Move.getLimit;\n  /**\r\n   * Retains the active RequestInterval object.\r\n   */\n\n  var interval;\n  /**\r\n   * Called when the component is mounted.\r\n   */\n\n  function mount() {\n    on(EVENT_MOVE, clear);\n    on([EVENT_UPDATED, EVENT_REFRESH], cancel);\n  }\n  /**\r\n   * Scrolls the slider to the provided destination.\r\n   *\r\n   * @param destination        - The destination to scroll to.\r\n   * @param duration           - Optional. The scroll duration. If omitted, calculates it by the distance.\r\n   * @param suppressConstraint - Optional. Whether to suppress constraint process when the slider exceeds bounds.\r\n   */\n\n\n  function scroll(destination, duration, suppressConstraint) {\n    var start = getPosition();\n    var friction = 1;\n    duration = duration || computeDuration(abs(destination - start));\n    clear();\n    interval = RequestInterval(duration, onScrolled, function (rate) {\n      var position = getPosition();\n      var target = start + (destination - start) * easing(rate);\n      var diff = (target - getPosition()) * friction;\n      Move.translate(position + diff);\n\n      if (Splide.is(SLIDE) && !suppressConstraint && Move.isExceeded()) {\n        friction *= FRICTION_FACTOR;\n\n        if (abs(diff) < BOUNCE_DIFF_THRESHOLD) {\n          bounce(Move.isExceededMin(getPosition()));\n        }\n      }\n    }, 1);\n    emit(EVENT_SCROLL);\n    interval.start();\n  }\n  /**\r\n   * Triggers the bounce effect when the slider reaches bounds.\r\n   *\r\n   * @param backwards - The direction the slider is going towards.\r\n   */\n\n\n  function bounce(backwards) {\n    scroll(getLimit(!backwards), BOUNCE_DURATION, true);\n  }\n  /**\r\n   * Called when scroll ends or is canceled.\r\n   */\n\n\n  function onScrolled() {\n    emit(EVENT_SCROLLED);\n  }\n  /**\r\n   * Computes the scroll duration by the distance and the base velocity.\r\n   *\r\n   * @param distance - Distance in pixel.\r\n   *\r\n   * @return The duration for scroll.\r\n   */\n\n\n  function computeDuration(distance) {\n    return max(distance / BASE_VELOCITY, MIN_DURATION);\n  }\n  /**\r\n   * Clears the active interval.\r\n   */\n\n\n  function clear() {\n    if (interval) {\n      interval.cancel();\n    }\n  }\n  /**\r\n   * Cancels the active interval and emits the `scrolled` event.\r\n   */\n\n\n  function cancel() {\n    if (interval && !interval.isPaused()) {\n      clear();\n      onScrolled();\n    }\n  }\n  /**\r\n   * The easing function.\r\n   *\r\n   * @param t - A value to ease.\r\n   *\r\n   * @return An eased value.\r\n   */\n\n\n  function easing(t) {\n    var easingFunc = options.easingFunc;\n    return easingFunc ? easingFunc(t) : 1 - Math.pow(1 - t, 4);\n  }\n\n  return {\n    mount: mount,\n    destroy: clear,\n    scroll: scroll,\n    cancel: cancel\n  };\n}\n/**\r\n * The power of the friction.\r\n *\r\n * @since 3.0.0\r\n */\n\n\nvar FRICTION = 5;\n/**\r\n * If the user stops dragging for this duration with keeping the pointer down, updates the base coord and time.\r\n *\r\n * @since 3.0.0\r\n */\n\nvar SAMPLING_INTERVAL = 50;\n/**\r\n * Start events for dragging.\r\n *\r\n * @since 3.0.0\r\n */\n\nvar POINTER_DOWN_EVENTS = 'touchstart mousedown';\n/**\r\n * Update events for dragging.\r\n *\r\n * @since 3.0.0\r\n */\n\nvar POINTER_MOVE_EVENTS = 'touchmove mousemove';\n/**\r\n * End events for dragging.\r\n *\r\n * @since 3.0.0\r\n */\n\nvar POINTER_UP_EVENTS = 'touchend touchcancel mouseup mouseleave';\n/**\r\n * The component for dragging the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Drag component object.\r\n */\n\nfunction Drag(Splide, Components, options) {\n  var _EventInterface12 = EventInterface(Splide),\n      emit = _EventInterface12.emit,\n      bind = _EventInterface12.bind,\n      unbind = _EventInterface12.unbind;\n\n  var track = Components.Elements.track;\n  var _Components$Direction2 = Components.Direction,\n      resolve = _Components$Direction2.resolve,\n      orient = _Components$Direction2.orient;\n  var listSize = Components.Layout.listSize;\n  var _Components$Controlle = Components.Controller,\n      go = _Components$Controlle.go,\n      getEnd = _Components$Controlle.getEnd;\n  var Move = Components.Move,\n      Scroll = Components.Scroll;\n  var translate = Move.translate,\n      toIndex = Move.toIndex,\n      getPosition = Move.getPosition,\n      isExceeded = Move.isExceeded;\n  var isSlide = Splide.is(SLIDE);\n  var isFade = Splide.is(FADE);\n  var isFree = options.drag === 'free';\n  /**\r\n   * The coord where a pointer becomes active.\r\n   */\n\n  var startCoord;\n  /**\r\n   * Keeps the last time when the component detects dragging.\r\n   */\n\n  var lastTime;\n  /**\r\n   * The base slider position where the diff of coords is applied.\r\n   */\n\n  var basePosition;\n  /**\r\n   * The base coord to calculate the diff of coords.\r\n   */\n\n  var baseCoord;\n  /**\r\n   * The base time when the base position and the base coord are saved.\r\n   */\n\n  var baseTime;\n  /**\r\n   * Keeps the last TouchEvent/MouseEvent object.\r\n   */\n\n  var lastEvent;\n  /**\r\n   * Indicates whether the user is dragging the slider or not.\r\n   */\n\n  var moving;\n  /**\r\n   * Indicates whether the user drags the slider by the mouse or not.\r\n   */\n\n  var isMouse;\n  /**\r\n   * The target element to attach listeners.\r\n   */\n\n  var target;\n  /**\r\n   * Indicates whether the slider exceeds borders or not.\r\n   */\n\n  var exceeded;\n  /**\r\n   * Called when the component is mounted.\r\n   */\n\n  function mount() {\n    if (options.drag) {\n      bind(track, POINTER_DOWN_EVENTS, onPointerDown);\n    }\n  }\n  /**\r\n   * Called when the user clicks or touches the slider.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   */\n\n\n  function onPointerDown(e) {\n    isMouse = e.type === 'mousedown';\n    target = isMouse ? window : track;\n\n    if (!(isMouse && e.button)) {\n      if (!Move.isBusy()) {\n        bind(target, POINTER_MOVE_EVENTS, onPointerMove);\n        bind(target, POINTER_UP_EVENTS, onPointerUp);\n        Move.cancel();\n        Scroll.cancel();\n        startCoord = getCoord(e);\n      } else {\n        prevent(e);\n      }\n    }\n  }\n  /**\r\n   * Called while the user moves the pointer on the slider.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   */\n\n\n  function onPointerMove(e) {\n    if (e.cancelable) {\n      var _min = options.dragMinThreshold || 15;\n\n      if (isMouse || abs(getCoord(e) - startCoord) > _min) {\n        moving = true;\n        onDrag();\n      }\n\n      if (moving) {\n        onDragging(e);\n        prevent(e, true);\n      }\n    } else {\n      onPointerUp(e);\n    }\n  }\n  /**\r\n   * Called when the user releases pointing devices.\r\n   * Be aware that the TouchEvent object provided by the `touchend` does not contain `Touch` objects,\r\n   * which means the last touch position is not available.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   */\n\n\n  function onPointerUp(e) {\n    unbind(target, POINTER_MOVE_EVENTS + \" \" + POINTER_UP_EVENTS);\n    moving = false;\n\n    if (lastEvent) {\n      onDragged(e);\n      lastEvent = null;\n    }\n  }\n  /**\r\n   * Called when the user starts dragging the slider.\r\n   */\n\n\n  function onDrag() {\n    bind(track, 'click', function (e) {\n      unbind(track, 'click');\n      prevent(e, true);\n    }, {\n      capture: true\n    });\n    emit(EVENT_DRAG);\n  }\n  /**\r\n   * Called while the user is dragging the slider.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   */\n\n\n  function onDragging(e) {\n    var timeStamp = e.timeStamp;\n    var expired = !lastTime || timeStamp - lastTime > SAMPLING_INTERVAL;\n\n    if (expired || isExceeded() !== exceeded) {\n      basePosition = getPosition();\n      baseCoord = getCoord(e);\n      baseTime = timeStamp;\n    }\n\n    exceeded = isExceeded();\n    lastTime = timeStamp;\n    lastEvent = e;\n\n    if (!isFade) {\n      translate(basePosition + constrain(getCoord(e) - baseCoord));\n    }\n\n    emit(EVENT_DRAGGING);\n  }\n  /**\r\n   * Called when the user finishes dragging.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   */\n\n\n  function onDragged(e) {\n    var velocity = computeVelocity(e);\n\n    if (isFade) {\n      go(Splide.index + orient(sign(velocity)));\n    } else {\n      var destination = computeDestination(velocity);\n\n      if (isFree) {\n        Scroll.scroll(destination);\n      } else {\n        go(computeIndex(destination), true);\n      }\n    }\n\n    lastTime = 0;\n    emit(EVENT_DRAGGED);\n  }\n  /**\r\n   * Computes the drag velocity.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   *\r\n   * @return The drag velocity.\r\n   */\n\n\n  function computeVelocity(e) {\n    if (Splide.is(LOOP) || !isExceeded()) {\n      var diffCoord = getCoord(lastEvent) - baseCoord;\n      var diffTime = lastEvent.timeStamp - baseTime;\n      var isFlick = e.timeStamp - lastTime < SAMPLING_INTERVAL;\n\n      if (diffTime && isFlick) {\n        return diffCoord / diffTime;\n      }\n    }\n\n    return 0;\n  }\n  /**\r\n   * Computes the destination by the velocity and the `flickPower` option.\r\n   *\r\n   * @param velocity - The drag velocity.\r\n   *\r\n   * @return The destination.\r\n   */\n\n\n  function computeDestination(velocity) {\n    var flickPower = options.flickPower || 600;\n    return getPosition() + sign(velocity) * min(abs(velocity) * flickPower, isFree ? Infinity : listSize() * (options.flickMaxPages || 1));\n  }\n  /**\r\n   * Converts the destination to the slide index.\r\n   *\r\n   * @param destination - The target destination.\r\n   *\r\n   * @return The destination index.\r\n   */\n\n\n  function computeIndex(destination) {\n    var dest = toIndex(destination);\n    return isSlide ? clamp(dest, 0, getEnd()) : dest;\n  }\n  /**\r\n   * Returns the `pageX` and `pageY` coordinates provided by the event.\r\n   * Be aware that IE does not support both TouchEvent and MouseEvent constructors.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   *\r\n   * @return A pageX or pageY coordinate.\r\n   */\n\n\n  function getCoord(e) {\n    return (isMouse ? e : e.touches[0])[resolve('pageX')];\n  }\n  /**\r\n   * Reduces the distance to move by the predefined friction.\r\n   * This does nothing when the slider type is not `slide`, or the position is inside borders.\r\n   *\r\n   * @param diff - Diff to constrain.\r\n   *\r\n   * @return The constrained diff.\r\n   */\n\n\n  function constrain(diff) {\n    return diff / (exceeded && isSlide ? FRICTION : 1);\n  }\n\n  return {\n    mount: mount\n  };\n}\n/**\r\n * The collection of arrow keys of IE.\r\n *\r\n * @since 3.0.0\r\n */\n\n\nvar IE_ARROW_KEYS = ['Left', 'Right', 'Up', 'Down'];\n/**\r\n * The component for controlling the slider by keyboards.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Keyboard component object.\r\n */\n\nfunction Keyboard(Splide, Components, options) {\n  var _EventInterface13 = EventInterface(Splide),\n      on = _EventInterface13.on,\n      bind = _EventInterface13.bind,\n      unbind = _EventInterface13.unbind;\n\n  var root = Components.Elements.root;\n  var resolve = Components.Direction.resolve;\n  /**\r\n   * The target element of the keyboard event.\r\n   */\n\n  var target;\n  /**\r\n   * Called when the component is mounted.\r\n   */\n\n  function mount() {\n    init();\n    on(EVENT_UPDATED, function () {\n      destroy();\n      init();\n    });\n  }\n  /**\r\n   * Initializes the component.\r\n   */\n\n\n  function init() {\n    var _options$keyboard = options.keyboard,\n        keyboard = _options$keyboard === void 0 ? 'global' : _options$keyboard;\n\n    if (keyboard) {\n      if (keyboard === 'focused') {\n        target = root;\n        setAttribute(root, TAB_INDEX, 0);\n      } else {\n        target = window;\n      }\n\n      bind(target, 'keydown', function (e) {\n        var key = normalize(e.key);\n\n        if (key === resolve('ArrowLeft')) {\n          Splide.go('<');\n        } else if (key === resolve('ArrowRight')) {\n          Splide.go('>');\n        }\n      });\n    }\n  }\n  /**\r\n   * Destroys the component.\r\n   */\n\n\n  function destroy() {\n    if (target) {\n      unbind(target, 'keydown');\n\n      if (isHTMLElement(target)) {\n        removeAttribute(target, TAB_INDEX);\n      }\n    }\n  }\n  /**\r\n   * Absorbs the difference of key names among browsers.\r\n   *\r\n   * @param key - A key to normalize.\r\n   *\r\n   * @return A normalized key.\r\n   */\n\n\n  function normalize(key) {\n    return includes(IE_ARROW_KEYS, key) ? \"Arrow\" + key : key;\n  }\n\n  return {\n    mount: mount,\n    destroy: destroy\n  };\n}\n/**\r\n * The data attribute for the src value.\r\n *\r\n * @since 3.0.0\r\n */\n\n\nvar SRC_DATA_ATTRIBUTE = DATA_ATTRIBUTE + \"-lazy\";\n/**\r\n * The data attribute for the srcset value.\r\n *\r\n * @since 3.0.0\r\n */\n\nvar SRCSET_DATA_ATTRIBUTE = SRC_DATA_ATTRIBUTE + \"-srcset\";\n/**\r\n * The selector string for images to load.\r\n *\r\n * @since 3.0.0\r\n */\n\nvar IMAGE_SELECTOR = \"[\" + SRC_DATA_ATTRIBUTE + \"], [\" + SRCSET_DATA_ATTRIBUTE + \"]\";\n/**\r\n * The component for lazily loading images.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return An LazyLoad component object.\r\n */\n\nfunction LazyLoad(Splide, Components, options) {\n  var _EventInterface14 = EventInterface(Splide),\n      on = _EventInterface14.on,\n      off = _EventInterface14.off,\n      bind = _EventInterface14.bind,\n      emit = _EventInterface14.emit;\n\n  var isSequential = options.lazyLoad === 'sequential';\n  /**\r\n   * Stores data of images.\r\n   */\n\n  var images = [];\n  /**\r\n   * The current index of images.\r\n   */\n\n  var index = 0;\n  /**\r\n   * Called when the component is mounted.\r\n   */\n\n  function mount() {\n    if (options.lazyLoad) {\n      on([EVENT_MOUNTED, EVENT_REFRESH], function () {\n        destroy();\n        init();\n      });\n\n      if (!isSequential) {\n        on([EVENT_MOUNTED, EVENT_REFRESH, EVENT_MOVED], observe);\n      }\n    }\n  }\n  /**\r\n   * Finds images that contain specific data attributes.\r\n   */\n\n\n  function init() {\n    Components.Slides.forEach(function (Slide) {\n      queryAll(Slide.slide, IMAGE_SELECTOR).forEach(function (img) {\n        var src = getAttribute(img, SRC_DATA_ATTRIBUTE);\n        var srcset = getAttribute(img, SRCSET_DATA_ATTRIBUTE);\n\n        if (src !== img.src || srcset !== img.srcset) {\n          var spinner = create('span', options.classes.spinner, img.parentElement);\n          setAttribute(spinner, ROLE, 'presentation');\n          images.push({\n            img: img,\n            Slide: Slide,\n            src: src,\n            srcset: srcset,\n            spinner: spinner\n          });\n          display(img, 'none');\n        }\n      });\n    });\n\n    if (isSequential) {\n      loadNext();\n    }\n  }\n  /**\r\n   * Destroys the component.\r\n   */\n\n\n  function destroy() {\n    index = 0;\n    images = [];\n  }\n  /**\r\n   * Checks how close each image is from the active slide, and determines whether to start loading or not.\r\n   * The last `+1` is for the current page.\r\n   */\n\n\n  function observe() {\n    images = images.filter(function (data) {\n      if (data.Slide.isWithin(Splide.index, options.perPage * ((options.preloadPages || 1) + 1))) {\n        return load(data);\n      }\n\n      return true;\n    });\n\n    if (!images.length) {\n      off(EVENT_MOVED);\n    }\n  }\n  /**\r\n   * Starts loading the image in the data.\r\n   *\r\n   * @param data - A LazyLoadImagesData object.\r\n   */\n\n\n  function load(data) {\n    var img = data.img;\n    addClass(data.Slide.slide, CLASS_LOADING);\n    bind(img, 'load error', function (e) {\n      onLoad(data, e.type === 'error');\n    });\n    ['src', 'srcset'].forEach(function (name) {\n      if (data[name]) {\n        setAttribute(img, name, data[name]);\n        removeAttribute(img, name === 'src' ? SRC_DATA_ATTRIBUTE : SRCSET_DATA_ATTRIBUTE);\n      }\n    });\n  }\n  /**\r\n   * Called when the image is loaded or any error occurs.\r\n   *\r\n   * @param data  - A LazyLoadImagesData object.\r\n   * @param error - `true` if this method is called on error.\r\n   */\n\n\n  function onLoad(data, error) {\n    var Slide = data.Slide;\n    removeClass(Slide.slide, CLASS_LOADING);\n\n    if (!error) {\n      remove(data.spinner);\n      display(data.img, '');\n      emit(EVENT_LAZYLOAD_LOADED, data.img, Slide);\n      emit(EVENT_RESIZE);\n    }\n\n    if (isSequential) {\n      loadNext();\n    }\n  }\n  /**\r\n   * Starts loading a next image.\r\n   */\n\n\n  function loadNext() {\n    if (index < images.length) {\n      load(images[index++]);\n    }\n  }\n\n  return {\n    mount: mount,\n    destroy: destroy\n  };\n}\n/**\r\n * The component for handling previous and next arrows.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Arrows component object.\r\n */\n\n\nfunction Pagination(Splide, Components, options) {\n  var _EventInterface15 = EventInterface(Splide),\n      on = _EventInterface15.on,\n      emit = _EventInterface15.emit,\n      bind = _EventInterface15.bind,\n      unbind = _EventInterface15.unbind;\n\n  var Slides = Components.Slides;\n  var _Components$Controlle2 = Components.Controller,\n      go = _Components$Controlle2.go,\n      toPage = _Components$Controlle2.toPage,\n      hasFocus = _Components$Controlle2.hasFocus,\n      getIndex = _Components$Controlle2.getIndex;\n  /**\r\n   * Stores all pagination items.\r\n   */\n\n  var items = [];\n  /**\r\n   * The pagination element.\r\n   */\n\n  var list;\n  /**\r\n   * Called when the component is mounted.\r\n   */\n\n  function mount() {\n    init();\n    on([EVENT_UPDATED, EVENT_REFRESH], init);\n    on([EVENT_MOVE, EVENT_SCROLLED], update);\n  }\n  /**\r\n   * Initializes the pagination.\r\n   */\n\n\n  function init() {\n    destroy();\n\n    if (options.pagination && Slides.isEnough()) {\n      createPagination();\n      emit(EVENT_PAGINATION_MOUNTED, {\n        list: list,\n        items: items\n      }, getAt(Splide.index));\n      update();\n    }\n  }\n  /**\r\n   * Destroys the component.\r\n   */\n\n\n  function destroy() {\n    if (list) {\n      remove(list);\n      items.forEach(function (item) {\n        unbind(item.button, 'click');\n      });\n      empty(items);\n      list = null;\n    }\n  }\n  /**\r\n   * Creates the pagination element and appends it to the slider.\r\n   */\n\n\n  function createPagination() {\n    var length = Splide.length;\n    var classes = options.classes,\n        i18n = options.i18n,\n        perPage = options.perPage;\n    var _Components$Elements5 = Components.Elements,\n        slider = _Components$Elements5.slider,\n        root = _Components$Elements5.root;\n    var parent = options.pagination === 'slider' && slider ? slider : root;\n    var max = hasFocus() ? length : ceil(length / perPage);\n    list = create('ul', classes.pagination, parent);\n\n    var _loop = function _loop(i) {\n      var li = create('li', null, list);\n      var button = create('button', {\n        class: classes.page,\n        type: 'button'\n      }, li);\n      var controls = Slides.getIn(i).map(function (Slide) {\n        return Slide.slide.id;\n      });\n      var text = !hasFocus() && perPage > 1 ? i18n.pageX : i18n.slideX;\n      bind(button, 'click', function () {\n        go(\">\" + i);\n      });\n      setAttribute(button, ARIA_CONTROLS, controls.join(' '));\n      setAttribute(button, ARIA_LABEL, format(text, i + 1));\n      emit(EVENT_PAGINATION_PAGE, list, li, button, i);\n      items.push({\n        li: li,\n        button: button,\n        page: i\n      });\n    };\n\n    for (var i = 0; i < max; i++) {\n      _loop(i);\n    }\n  }\n  /**\r\n   * Returns the pagination item at the specified index.\r\n   *\r\n   * @param index - An index.\r\n   *\r\n   * @return A pagination item object if available, or otherwise `undefined`.\r\n   */\n\n\n  function getAt(index) {\n    return items[toPage(index)];\n  }\n  /**\r\n   * Updates the pagination status.\r\n   */\n\n\n  function update() {\n    var prev = getAt(getIndex(true));\n    var curr = getAt(getIndex());\n\n    if (prev) {\n      removeClass(prev.button, CLASS_ACTIVE);\n      removeAttribute(prev.button, ARIA_CURRENT);\n    }\n\n    if (curr) {\n      addClass(curr.button, CLASS_ACTIVE);\n      setAttribute(curr.button, ARIA_CURRENT, true);\n    }\n\n    emit(EVENT_PAGINATION_UPDATED, {\n      list: list,\n      items: items\n    }, prev, curr);\n  }\n\n  return {\n    items: items,\n    mount: mount,\n    destroy: destroy,\n    getAt: getAt\n  };\n}\n/**\r\n * The keys for triggering the navigation slide.\r\n *\r\n * @since 3.0.0\r\n */\n\n\nvar TRIGGER_KEYS = [' ', 'Enter', 'Spacebar'];\n/**\r\n * The component for syncing multiple sliders.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Sync component object.\r\n */\n\nfunction Sync(Splide, Components, options) {\n  var splides = Splide.splides;\n  /**\r\n   * Called when the component is mounted.\r\n   */\n\n  function mount() {\n    if (options.isNavigation) {\n      navigate();\n    } else {\n      sync();\n    }\n  }\n  /**\r\n   * Syncs the current index among all slides.\r\n   * The `processed` array prevents recursive call of handlers.\r\n   */\n\n\n  function sync() {\n    var processed = [];\n    splides.concat(Splide).forEach(function (splide, index, instances) {\n      EventInterface(splide).on(EVENT_MOVE, function (index, prev, dest) {\n        instances.forEach(function (instance) {\n          if (instance !== splide && !includes(processed, splide)) {\n            processed.push(instance);\n            instance.go(instance.is(LOOP) ? dest : index);\n          }\n        });\n        empty(processed);\n      });\n    });\n  }\n  /**\r\n   * Makes slides clickable and moves the slider to the index of clicked slide.\r\n   */\n\n\n  function navigate() {\n    var _EventInterface16 = EventInterface(Splide),\n        on = _EventInterface16.on,\n        emit = _EventInterface16.emit;\n\n    on(EVENT_CLICK, function (Slide) {\n      Splide.go(Slide.index);\n    });\n    on(EVENT_SLIDE_KEYDOWN, function (Slide, e) {\n      if (includes(TRIGGER_KEYS, e.key)) {\n        Splide.go(Slide.index);\n        prevent(e);\n      }\n    });\n    emit(EVENT_NAVIGATION_MOUNTED, Splide.splides);\n  }\n\n  return {\n    mount: mount\n  };\n}\n/**\r\n * The component for observing the mouse wheel and moving the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Wheel component object.\r\n */\n\n\nfunction Wheel(Splide, Components, options) {\n  var _EventInterface17 = EventInterface(Splide),\n      bind = _EventInterface17.bind;\n  /**\r\n   * Called when the component is mounted.\r\n   */\n\n\n  function mount() {\n    if (options.wheel) {\n      bind(Components.Elements.track, 'wheel', onWheel);\n    }\n  }\n  /**\r\n   * Called when the user rotates the mouse wheel.\r\n   *\r\n   * @param e - A WheelEvent object.\r\n   */\n\n\n  function onWheel(e) {\n    var deltaY = e.deltaY;\n\n    if (deltaY) {\n      Splide.go(deltaY < 0 ? '<' : '>');\n      prevent(e);\n    }\n  }\n\n  return {\n    mount: mount\n  };\n}\n\nvar ComponentConstructors = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Options: Options,\n  Direction: Direction,\n  Elements: Elements,\n  Style: Style,\n  Slides: Slides,\n  Clones: Clones,\n  Layout: Layout,\n  Move: Move,\n  Controller: Controller,\n  Arrows: Arrows,\n  Autoplay: Autoplay,\n  Cover: Cover,\n  Scroll: Scroll,\n  Drag: Drag,\n  Keyboard: Keyboard,\n  LazyLoad: LazyLoad,\n  Pagination: Pagination,\n  Sync: Sync,\n  Wheel: Wheel\n});\n/**\r\n * The collection of i18n strings.\r\n *\r\n * @since 3.0.0\r\n */\n\nvar I18N = {\n  prev: 'Previous slide',\n  next: 'Next slide',\n  first: 'Go to first slide',\n  last: 'Go to last slide',\n  slideX: 'Go to slide %s',\n  pageX: 'Go to page %s',\n  play: 'Start autoplay',\n  pause: 'Pause autoplay'\n};\n/**\r\n * The collection of default options.\r\n * Note that this collection does not contain all options.\r\n *\r\n * @since 3.0.0\r\n */\n\nvar DEFAULTS = {\n  type: 'slide',\n  speed: 400,\n  waitForTransition: true,\n  perPage: 1,\n  arrows: true,\n  pagination: true,\n  interval: 5000,\n  pauseOnHover: true,\n  pauseOnFocus: true,\n  resetProgress: true,\n  easing: 'cubic-bezier(.42,.65,.27,.99)',\n  drag: true,\n  direction: 'ltr',\n  slideFocus: true,\n  trimSpace: true,\n  classes: CLASSES,\n  i18n: I18N\n};\n/**\r\n * The component for the fade transition.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Transition component object.\r\n */\n\nfunction Fade(Splide, Components, options) {\n  var _EventInterface18 = EventInterface(Splide),\n      on = _EventInterface18.on;\n\n  var ruleBy = Components.Style.ruleBy;\n  /**\r\n   * Called when the component is mounted.\r\n   * The nextTick disables the initial fade transition of the first slide.\r\n   */\n\n  function mount() {\n    on([EVENT_MOUNTED, EVENT_REFRESH], function () {\n      nextTick(function () {\n        Components.Slides.forEach(function (Slide) {\n          ruleBy(Slide.slide, 'transition', \"opacity \" + options.speed + \"ms \" + options.easing);\n        });\n      });\n    });\n  }\n  /**\r\n   * Starts the transition.\r\n   * Explicitly sets the track height to avoid it will collapse in Safari.\r\n   *\r\n   * @param index - A destination index.\r\n   * @param done  - The callback function that must be called after the transition ends.\r\n   */\n\n\n  function start(index, done) {\n    var track = Components.Elements.track;\n    ruleBy(track, 'height', unit(rect(track).height));\n    nextTick(function () {\n      done();\n      ruleBy(track, 'height', '');\n    });\n  }\n\n  return {\n    mount: mount,\n    start: start,\n    cancel: noop\n  };\n}\n/**\r\n * The component for the slide transition.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Transition component object.\r\n */\n\n\nfunction Slide(Splide, Components, options) {\n  var _EventInterface19 = EventInterface(Splide),\n      bind = _EventInterface19.bind;\n\n  var Move = Components.Move,\n      Controller = Components.Controller;\n  var list = Components.Elements.list;\n  /**\r\n   * Holds the `done` callback function.\r\n   */\n\n  var endCallback;\n  /**\r\n   * Called when the component is mounted.\r\n   */\n\n  function mount() {\n    bind(list, 'transitionend', function (e) {\n      if (e.target === list && endCallback) {\n        cancel();\n        endCallback();\n      }\n    });\n  }\n  /**\r\n   * Starts the transition.\r\n   * The Move component calls this method just before the slider moves.\r\n   *\r\n   * @param index - A destination index.\r\n   * @param done  - The callback function that must be called after the transition ends.\r\n   */\n\n\n  function start(index, done) {\n    var destination = Move.toPosition(index, true);\n    var position = Move.getPosition();\n    var speed = getSpeed(index);\n\n    if (abs(destination - position) >= 1 && speed >= 1) {\n      apply(\"transform \" + speed + \"ms \" + options.easing);\n      Move.translate(destination);\n      endCallback = done;\n    } else {\n      Move.jump(index);\n      done();\n    }\n  }\n  /**\r\n   * Cancels the transition.\r\n   */\n\n\n  function cancel() {\n    apply('');\n  }\n  /**\r\n   * Returns the transition speed.\r\n   *\r\n   * @param index - A destination index.\r\n   */\n\n\n  function getSpeed(index) {\n    var rewindSpeed = options.rewindSpeed;\n\n    if (Splide.is(SLIDE) && rewindSpeed) {\n      var prev = Controller.getIndex(true);\n      var end = Controller.getEnd();\n\n      if (prev === 0 && index >= end || prev >= end && index === 0) {\n        return rewindSpeed;\n      }\n    }\n\n    return options.speed;\n  }\n  /**\r\n   * Applies the transition CSS property to the list element.\r\n   *\r\n   * @param transition - A transition CSS value.\r\n   */\n\n\n  function apply(transition) {\n    Components.Style.ruleBy(list, 'transition', transition);\n  }\n\n  return {\n    mount: mount,\n    start: start,\n    cancel: cancel\n  };\n}\n/**\r\n * The frontend class for the Splide slider.\r\n *\r\n * @since 3.0.0\r\n */\n\n\nvar Splide = /*#__PURE__*/function () {\n  /**\r\n   * The Splide constructor.\r\n   *\r\n   * @param target  - The selector for the target element, or the element itself.\r\n   * @param options - Optional. An object with options.\r\n   */\n  function Splide(target, options) {\n    /**\r\n     * The EventBusObject object.\r\n     */\n    this.event = EventBus();\n    /**\r\n     * The collection of all component objects.\r\n     */\n\n    this.Components = {};\n    /**\r\n     * The StateObject object.\r\n     */\n\n    this.state = State(CREATED);\n    /**\r\n     * Splide instances to sync with.\r\n     */\n\n    this.splides = [];\n    /**\r\n     * The collection of options.\r\n     */\n\n    this.opts = {};\n    /**\r\n     * The collection of extensions.\r\n     */\n\n    this.Extensions = {};\n    var root = isString(target) ? query(document, target) : target;\n    assert(root, root + \" is invalid.\");\n    this.root = root;\n    merge(DEFAULTS, Splide.defaults);\n    merge(merge(this.opts, DEFAULTS), options || {});\n  }\n  /**\r\n   * Initializes the instance.\r\n   *\r\n   * @param Extensions - Optional. An object with extensions.\r\n   * @param Transition - Optional. A Transition component.\r\n   *\r\n   * @return `this`\r\n   */\n\n\n  var _proto = Splide.prototype;\n\n  _proto.mount = function mount(Extensions, Transition) {\n    var _this3 = this;\n\n    this.state.set(CREATED);\n    this.Transition = Transition || this.Transition || (this.is(FADE) ? Fade : Slide);\n    this.Extensions = Extensions || this.Extensions;\n    var Constructors = assign({}, ComponentConstructors, this.Extensions, {\n      Transition: this.Transition\n    });\n    var Components = this.Components;\n    forOwn(Constructors, function (Component, key) {\n      var component = Component(_this3, _this3.Components, _this3.opts);\n      Components[key] = component;\n      component.setup && component.setup();\n    });\n    forOwn(Components, function (component) {\n      component.mount && component.mount();\n    });\n    forOwn(Components, function (component) {\n      component.mounted && component.mounted();\n    });\n    this.emit(EVENT_MOUNTED);\n    addClass(this.root, CLASS_INITIALIZED);\n    this.state.set(IDLE);\n    this.emit(EVENT_READY);\n    return this;\n  }\n  /**\r\n   * Syncs the slider with the provided one.\r\n   * This method must be called before the `mount()`.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * var primary   = new Splide();\r\n   * var secondary = new Splide();\r\n   *\r\n   * primary.sync( secondary );\r\n   * primary.mount();\r\n   * secondary.mount();\r\n   * ```\r\n   *\r\n   * @param splide - A Splide instance to sync with.\r\n   *\r\n   * @return `this`\r\n   */\n  ;\n\n  _proto.sync = function sync(splide) {\n    this.splides.push(splide);\n    splide.splides.push(this);\n    return this;\n  }\n  /**\r\n   * Moves the slider with the following control pattern.\r\n   *\r\n   * | Pattern | Description |\r\n   * |---|---|\r\n   * | `i` | Goes to the slide `i` |\r\n   * | `'+${i}'` | Increments the slide index by `i` |\r\n   * | `'-${i}'` | Decrements the slide index by `i` |\r\n   * | `'>'` | Goes to the next page |\r\n   * | `'<'` | Goes to the previous page |\r\n   * | `>${i}` | Goes to the page `i` |\r\n   *\r\n   * In most cases, `'>'` and `'<'` notations are enough to control the slider\r\n   * because they respect `perPage` and `perMove` options.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * var splide = new Splide();\r\n   *\r\n   * // Goes to the slide 1:\r\n   * splide.go( 1 );\r\n   *\r\n   * // Increments the index:\r\n   * splide.go( '+2' );\r\n   *\r\n   * // Goes to the next page:\r\n   * splide.go( '>' );\r\n   *\r\n   * // Goes to the page 2:\r\n   * splide.go( '>2' );\r\n   * ```\r\n   *\r\n   * @param control\r\n   */\n  ;\n\n  _proto.go = function go(control) {\n    this.Components.Controller.go(control);\n  }\n  /**\r\n   * Registers an event handler.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * var splide = new Splide();\r\n   *\r\n   * // Listens to a single event:\r\n   * splide.on( 'move', function() {} );\r\n   *\r\n   * // Listens to multiple events:\r\n   * splide.on( 'move resize', function() {} );\r\n   *\r\n   * // Appends a namespace:\r\n   * splide.on( 'move.myNamespace resize.myNamespace', function() {} );\r\n   * ```\r\n   *\r\n   * @param events   - An event name or names separated by spaces. Use a dot(.) to append a namespace.\r\n   * @param callback - A callback function.\r\n   *\r\n   * @return `this`\r\n   */\n  ;\n\n  _proto.on = function on(events, callback) {\n    this.event.on(events, callback);\n    return this;\n  }\n  /**\r\n   * Removes the registered all handlers for the specified event or events.\r\n   * If you want to only remove a particular handler, use namespace to identify it.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * var splide = new Splide();\r\n   *\r\n   * // Removes all handlers assigned to \"move\":\r\n   * splide.off( 'move' );\r\n   *\r\n   * // Only removes handlers that belong to the specified namespace:\r\n   * splide.off( 'move.myNamespace' );\r\n   * ```\r\n   *\r\n   * @param events - An event name or names separated by spaces. Use a dot(.) to append a namespace.\r\n   *\r\n   * @return `this`\r\n   */\n  ;\n\n  _proto.off = function off(events) {\n    this.event.off(events);\n    return this;\n  }\n  /**\r\n   * Emits an event and triggers registered handlers.\r\n   *\r\n   * @param event - An event name to emit.\r\n   * @param args  - Optional. Any number of arguments to pass to handlers.\r\n   *\r\n   * @return `this`\r\n   */\n  ;\n\n  _proto.emit = function emit(event) {\n    var _this$event;\n\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    (_this$event = this.event).emit.apply(_this$event, [event].concat(args));\n\n    return this;\n  }\n  /**\r\n   * Inserts a slide at the specified position.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * var splide = new Splide();\r\n   * splide.mount();\r\n   *\r\n   * // Adds the slide by the HTML:\r\n   * splide.add( '<li></li> );\r\n   *\r\n   * // or adds the element:\r\n   * splide.add( document.createElement( 'li' ) );\r\n   * ```\r\n   *\r\n   * @param slides - A slide element, an HTML string that represents a slide, or an array with them.\r\n   * @param index  - Optional. An index to insert a slide at.\r\n   *\r\n   * @return `this`\r\n   */\n  ;\n\n  _proto.add = function add(slides, index) {\n    this.Components.Slides.add(slides, index);\n    return this;\n  }\n  /**\r\n   * Removes slides that match the matcher\r\n   * that can be an index, an array with indices, a selector, or an iteratee function.\r\n   *\r\n   * @param matcher - An index, an array with indices, a selector string, or an iteratee function.\r\n   */\n  ;\n\n  _proto.remove = function remove(matcher) {\n    this.Components.Slides.remove(matcher);\n    return this;\n  }\n  /**\r\n   * Checks the slider type.\r\n   *\r\n   * @param type - A type to test.\r\n   *\r\n   * @return `true` if the type matches the current one, or otherwise `false`.\r\n   */\n  ;\n\n  _proto.is = function is(type) {\n    return this.opts.type === type;\n  }\n  /**\r\n   * Refreshes the slider.\r\n   *\r\n   * @return `this`\r\n   */\n  ;\n\n  _proto.refresh = function refresh() {\n    this.emit(EVENT_REFRESH);\n    return this;\n  }\n  /**\r\n   * Destroys the slider.\r\n   *\r\n   * @param completely - Optional. If `true`, Splide will not remount the slider by breakpoints.\r\n   *\r\n   * @return `this`\r\n   */\n  ;\n\n  _proto.destroy = function destroy(completely) {\n    var event = this.event,\n        state = this.state;\n\n    if (state.is(CREATED)) {\n      // Postpones destruction requested before the slider becomes ready.\n      event.on(EVENT_READY, this.destroy.bind(this, completely), this);\n    } else {\n      forOwn(this.Components, function (component) {\n        component.destroy && component.destroy(completely);\n      });\n      event.emit(EVENT_DESTROY);\n      event.destroy();\n      empty(this.splides);\n      state.set(DESTROYED);\n    }\n\n    return this;\n  }\n  /**\r\n   * Returns options.\r\n   *\r\n   * @return An object with the latest options.\r\n   */\n  ;\n\n  _createClass(Splide, [{\n    key: \"options\",\n    get: function get() {\n      return this.opts;\n    }\n    /**\r\n     * Merges options to the current options and emits `updated` event.\r\n     *\r\n     * @param options - An object with new options.\r\n     */\n    ,\n    set: function set(options) {\n      var opts = this.opts;\n      merge(opts, options);\n\n      if (!this.state.is(CREATED)) {\n        this.emit(EVENT_UPDATED, opts);\n      }\n    }\n    /**\r\n     * Returns the number of slides without clones.\r\n     *\r\n     * @return The number of slides.\r\n     */\n\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.Components.Slides.getLength(true);\n    }\n    /**\r\n     * Returns the active slide index.\r\n     *\r\n     * @return The active slide index.\r\n     */\n\n  }, {\n    key: \"index\",\n    get: function get() {\n      return this.Components.Controller.getIndex();\n    }\n  }]);\n\n  return Splide;\n}();\n/**\r\n * Changes the default options for all Splide instances.\r\n */\n\n\nSplide.defaults = {};\n/**\r\n * The collection of state numbers.\r\n */\n\nSplide.STATES = STATES;\nexport { CLASSES, CLASS_ACTIVE, CLASS_ARROW, CLASS_ARROWS, CLASS_ARROW_NEXT, CLASS_ARROW_PREV, CLASS_AUTOPLAY, CLASS_CLONE, CLASS_CONTAINER, CLASS_INITIALIZED, CLASS_LIST, CLASS_LOADING, CLASS_NEXT, CLASS_PAGINATION, CLASS_PAGINATION_PAGE, CLASS_PAUSE, CLASS_PLAY, CLASS_PREV, CLASS_PROGRESS, CLASS_PROGRESS_BAR, CLASS_ROOT, CLASS_SLIDE, CLASS_SLIDER, CLASS_SPINNER, CLASS_TRACK, CLASS_VISIBLE, EVENT_ACTIVE, EVENT_ARROWS_MOUNTED, EVENT_ARROWS_UPDATED, EVENT_AUTOPLAY_PAUSE, EVENT_AUTOPLAY_PLAY, EVENT_AUTOPLAY_PLAYING, EVENT_CLICK, EVENT_DESTROY, EVENT_DRAG, EVENT_DRAGGED, EVENT_DRAGGING, EVENT_HIDDEN, EVENT_INACTIVE, EVENT_LAZYLOAD_LOADED, EVENT_MOUNTED, EVENT_MOVE, EVENT_MOVED, EVENT_NAVIGATION_MOUNTED, EVENT_PAGINATION_MOUNTED, EVENT_PAGINATION_PAGE, EVENT_PAGINATION_UPDATED, EVENT_READY, EVENT_REFRESH, EVENT_RESIZE, EVENT_RESIZED, EVENT_SCROLL, EVENT_SCROLLED, EVENT_SLIDE_KEYDOWN, EVENT_UPDATED, EVENT_VISIBLE, EventBus, EventInterface, RequestInterval, STATUS_CLASSES, Splide, State, Throttle, Splide as default };\n","/**\n * Empties the array.\n *\n * @param array - A array to empty.\n */\nexport function empty( array: any[] ): void {\n  array.length = 0;\n}\n","/**\n * Checks if the given subject is an object or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is an object, or otherwise `false`.\n */\nexport function isObject( subject: unknown ): subject is object {\n  return ! isNull( subject ) && typeof subject === 'object';\n}\n\n/**\n * Checks if the given subject is an array or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is an array, or otherwise `false`.\n */\nexport function isArray<T>( subject: unknown ): subject is T[] {\n  return Array.isArray( subject );\n}\n\n/**\n * Checks if the given subject is a function or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is a function, or otherwise `false`.\n */\nexport function isFunction( subject: unknown ): subject is ( ...args: any[] ) => any {\n  return typeof subject === 'function';\n}\n\n/**\n * Checks if the given subject is a string or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is a string, or otherwise `false`.\n */\nexport function isString( subject: unknown ): subject is string {\n  return typeof subject === 'string';\n}\n\n/**\n * Checks if the given subject is `undefined` or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is `undefined`, or otherwise `false`.\n */\nexport function isUndefined( subject: unknown ): subject is undefined {\n  return typeof subject === 'undefined';\n}\n\n/**\n * Checks if the given subject is `null` or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is `null`, or otherwise `false`.\n */\nexport function isNull( subject: unknown ): subject is null {\n  return subject === null;\n}\n\n/**\n * Checks if the given subject is an HTMLElement or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is an HTMLElement instance, or otherwise `false`.\n */\nexport function isHTMLElement( subject: unknown ): subject is HTMLElement {\n  return subject instanceof HTMLElement;\n}\n\n/**\n * Checks if the given subject is an HTMLButtonElement or not.\n *\n * @param subject - A subject to check.\n *\n * @return `true` if the subject is an HTMLButtonElement, or otherwise `false`.\n */\nexport function isHTMLButtonElement( subject: unknown ): subject is HTMLButtonElement {\n  return subject instanceof HTMLButtonElement;\n}\n","import { isArray } from '../../type/type';\n\n\n/**\n * Push the provided value to an array if the value is not an array.\n *\n * @param value - A value to push.\n *\n * @return An array containing the value, or the value itself if it is already an array.\n */\nexport function toArray<T>( value: T | T[] ): T[] {\n  return isArray( value ) ? value : [ value ];\n}\n","import { toArray } from '../toArray/toArray';\n\n\n/**\n * The extended `Array#forEach` method that accepts a single value as an argument.\n *\n * @param values   - A value or values to iterate over.\n * @param iteratee - An iteratee function.\n */\nexport function forEach<T>( values: T | T[], iteratee: ( value: T, index: number, array: T[] ) => void ): void {\n  toArray( values ).forEach( iteratee );\n}\n","import { toArray } from '../toArray/toArray';\n\n\n/**\n * Extended `Array#push()` that accepts an item or an array with items.\n *\n * @param array - An array to push items.\n * @param items - An item or items to push.\n *\n * @return A provided array itself.\n */\nexport function push<T>( array: T[], items: T | T[] ): T[] {\n  array.push( ...toArray( items ) );\n  return array;\n}\n","export { empty }    from './empty/empty';\nexport { forEach }  from './forEach/forEach';\nexport { includes } from './includes/includes';\nexport { push }     from './push/push';\nexport { toArray }  from './toArray/toArray';\n\nexport const arrayProto = Array.prototype;\n","import { arrayProto } from '../../array';\r\n\r\n\r\n/**\r\n * The slice method for an array-like object.\r\n *\r\n * @param arrayLike - An array-like object.\r\n * @param start     - Optional. A start index.\r\n * @param end       - Optional. A end index.\r\n *\r\n * @return An array with sliced elements.\r\n */\r\nexport function slice<T>( arrayLike: ArrayLike<T>, start?: number, end?: number ): T[] {\r\n  return arrayProto.slice.call( arrayLike, start, end );\r\n}\r\n","import { slice } from '../slice/slice';\n\n\n/**\n * The find method for an array or array-like object, works in IE.\n * This method is not performant for a huge array.\n *\n * @param arrayLike - An array-like object.\n * @param predicate - The predicate function to test each element in the object.\n *\n * @return A found value if available, or otherwise `undefined`.\n */\nexport function find<T>(\n  arrayLike: ArrayLike<T>,\n  predicate: ( value: T, index: number, array: T[] ) => any\n): T | undefined {\n  return slice( arrayLike ).filter( predicate )[ 0 ];\n}\n","import { forEach } from '../../array';\n\n\n/**\n * Toggles the provided class or classes by following the `add` boolean.\n *\n * @param elm     - An element whose classes are toggled.\n * @param classes - A class or class names.\n * @param add     - Whether to add or remove a class.\n */\nexport function toggleClass( elm: Element, classes: string | string[], add: boolean ): void {\n  if ( elm ) {\n    forEach( classes, name => {\n      if ( name ) {\n        elm.classList[ add ? 'add' : 'remove' ]( name );\n      }\n    } );\n  }\n}\n","import { toggleClass } from '../toggleClass/toggleClass';\n\n\n/**\n * Adds classes to the element.\n *\n * @param elm     - An element to add classes to.\n * @param classes - Classes to add.\n */\nexport function addClass( elm: Element, classes: string | string[] ): void {\n  toggleClass( elm, classes, true );\n}\n","import { forEach } from '../../array';\n\n\n/**\n * Appends children to the parent element.\n *\n * @param parent   - A parent element.\n * @param children - A child or children to append to the parent.\n */\nexport function append( parent: Element, children: Node | Node[] ): void {\n  forEach( children, parent.appendChild.bind( parent ) );\n}\n","/**\n * Checks if the element can be selected by the provided selector or not.\n *\n * @param elm      - An element to check.\n * @param selector - A selector to test.\n *\n * @return `true` if the selector matches the element, or otherwise `false`.\n */\nexport function matches( elm: Element, selector: string ): boolean {\n  return ( elm[ 'msMatchesSelector' ] || elm.matches ).call( elm, selector );\n}\n","import { slice } from '../../arrayLike';\nimport { matches } from '../matches/matches';\n\n\n/**\n * Finds children that has the specified tag or class name.\n *\n * @param parent   - A parent element.\n * @param selector - A selector to filter children.\n *\n * @return An array with filtered children.\n */\nexport function children<E extends HTMLElement>( parent: HTMLElement, selector: string ): E[] {\n  return parent ? slice( parent.children ).filter( child => matches( child, selector ) ) as E[] : [];\n}\n","import { children } from '../children/children';\n\n\n/**\n * Returns a child element that matches the specified tag or class name.\n *\n * @param parent   - A parent element.\n * @param selector - A selector to filter children.\n *\n * @return A matched child element if available, or otherwise `undefined`.\n */\nexport function child<E extends HTMLElement>( parent: HTMLElement, selector?: string ): E | undefined {\n  return selector ? children<E>( parent, selector )[ 0 ] : parent.firstElementChild as E;\n}\n","/**\n * Iterates over the provided object by own enumerable keys with calling the iteratee function.\n *\n * @param object   - An object to iterate over.\n * @param iteratee - An iteratee function that takes the value and key as arguments.\n *\n * @return A provided object itself.\n */\nexport function forOwn<T extends object>(\n  object: T,\n  iteratee: ( value: T[ keyof T ], key: string ) => boolean | void\n): T {\n  if ( object ) {\n    const keys = Object.keys( object );\n\n    for ( let i = 0; i < keys.length; i++ ) {\n      const key = keys[ i ];\n\n      if ( key !== '__proto__' ) {\n        if ( iteratee( object[ key ], key ) === false ) {\n          break;\n        }\n      }\n    }\n  }\n\n  return object;\n}\n","import { forOwn } from '../forOwn/forOwn';\n\n\n/**\n * Assign U to T.\n *\n * @typeParam T - An object to assign to.\n * @typeParam U - An object to assign.\n *\n * @return An assigned object type.\n */\nexport type Assign<T, U> = Omit<T, keyof U> & U;\n\nexport function assign<T extends object>( object: T ): T;\n\n// There is a way to type arguments recursively, but these fixed definitions are enough for this project.\nexport function assign<T extends object, U extends object>( object: T, source: U ): Assign<T, U>;\n\nexport function assign<T extends object, U1 extends object, U2 extends object>(\n  object: T, source1: U1, source2: U2\n): Assign<Assign<T, U1>, U2>;\n\nexport function assign<T extends object, U1 extends object, U2 extends object, U3 extends object>(\n  object: T, source1: U1, source2: U2, source3: U3\n): Assign<Assign<Assign<T, U1>, U2>, U3>;\n\n/**\n * Assigns all own enumerable properties of all source objects to the provided object.\n * `undefined` in source objects will be skipped.\n *\n * @param object  - An object to assign properties to.\n * @param sources - Objects to assign properties from.\n *\n * @return An object assigned properties of the sources to.\n */\nexport function assign<T extends object, U extends object>( object: T, ...sources: U[] ): any {\n  sources.forEach( source => {\n    forOwn( source, ( value, key ) => {\n      object[ key ] = source[ key ];\n    } );\n  } );\n\n  return object;\n}\n","import { forEach } from '../../array';\n\n\n/**\n * Removes attributes from the element.\n *\n * @param elm   - An element.\n * @param attrs - An attribute or attributes to remove.\n */\nexport function removeAttribute( elm: Element, attrs: string | string[] ): void {\n  if ( elm ) {\n    forEach( attrs, attr => {\n      elm.removeAttribute( attr );\n    } );\n  }\n}\n","import { forOwn } from '../../object';\nimport { isNull, isObject } from '../../type/type';\nimport { removeAttribute } from '../removeAttribute/removeAttribute';\n\n\nexport function setAttribute( elm: Element, attr: string, value: string | number | boolean ): void;\nexport function setAttribute( elm: Element, attrs: Record<string, string | number | boolean> ): void;\n\nexport function setAttribute(\n  elm: Element,\n  attrs: string | Record<string, string | number | boolean>,\n  value?: string | number | boolean\n): void {\n  if ( isObject( attrs ) ) {\n    forOwn( attrs, ( value, name ) => {\n      setAttribute( elm, name, value );\n    } );\n  } else {\n    isNull( value ) ? removeAttribute( elm, attrs ) : elm.setAttribute( attrs, String( value ) );\n  }\n}\n","import { isArray, isString } from '../../type/type';\nimport { addClass } from '../addClass/addClass';\nimport { append } from '../append/append';\nimport { setAttribute } from '../setAttribute/setAttribute';\n\n\n/**\n * Creates a HTML element.\n *\n * @param tag    - A tag name.\n * @param attrs  - Optional. An object with attributes to apply the created element to, or a string with classes.\n * @param parent - Optional. A parent element where the created element is appended.\n */\nexport function create<K extends keyof HTMLElementTagNameMap>(\n  tag: K,\n  attrs?: Record<string, string | number | boolean> | string | string[],\n  parent?: HTMLElement\n): HTMLElementTagNameMap[ K ] {\n  const elm = document.createElement( tag );\n\n  if ( attrs ) {\n    if ( isString( attrs ) || isArray( attrs ) ) {\n      addClass( elm, attrs );\n    } else {\n      setAttribute( elm, attrs );\n    }\n  }\n\n  if ( parent ) {\n    append( parent, elm );\n  }\n\n  return elm;\n}\n","import { slice } from '../../arrayLike';\n\n\n/**\n * Returns elements that match the provided selector.\n *\n * @param parent   - A parent element to start searching from.\n * @param selector - A selector to query.\n *\n * @return An array with matched elements.\n */\nexport function queryAll<E extends Element = Element>( parent: Element | Document, selector: string ): E[] {\n  return slice<E>( parent.querySelectorAll( selector ) );\n}\n","import { forEach } from '../../array';\n\n\n/**\n * Removes the provided node from its parent.\n *\n * @param nodes - A node or nodes to remove.\n */\nexport function remove( nodes: Node | Node[] ): void {\n  forEach( nodes, node => {\n    if ( node && node.parentNode ) {\n      node.parentNode.removeChild( node );\n    }\n  } );\n}\n","import { toggleClass } from '../toggleClass/toggleClass';\r\n\r\n\r\n/**\r\n * Removes classes from the element.\r\n *\r\n * @param elm     - An element to remove classes from.\r\n * @param classes - Classes to remove.\r\n */\r\nexport function removeClass( elm: Element, classes: string | string[] ): void {\r\n  toggleClass( elm, classes, false );\r\n}\r\n","import { isString } from '../../type/type';\n\n\n/**\n * Appends `px` to the provided number.\n * If the value is already string, just returns it.\n *\n * @param value - A value to append `px` to.\n *\n * @return A string with the CSS unit.\n */\nexport function unit( value: number | string ): string {\n  return isString( value ) ? value : value ? `${ value }px` : '';\n}\n","/**\n * Pads the number with 0.\n *\n * @param number - A number to pad.\n *\n * @return string - Padded number.\n */\nexport function pad( number: number ): string {\n  return number < 10 ? `0${ number }` : `${ number }`;\n}\n","import { CLASS_SLIDE } from '@splidejs/splide';\n\n\nexport const CLASS_SLIDE_ROW = `${ CLASS_SLIDE }__row`;\nexport const CLASS_SLIDE_COL = `${ CLASS_SLIDE }--col`;\n","import { GridOptions } from '../types/options';\n\n\n/**\n * Default options.\n *\n * @since 0.3.0\n */\nexport const DEFAULTS: GridOptions = {\n  rows      : 1,\n  cols      : 1,\n  dimensions: [],\n  gap       : {},\n};\n","import { isArray } from '@splidejs/splide/src/js/utils';\nimport { GridOptions } from '../../types/options';\n\n\n/**\n * The interface for the Dimension sub component.\n *\n * @since 0.3.0\n */\nexport interface DimensionComponent {\n  getAt( index: number ): number[];\n}\n\n/**\n * The sub component to calculate dimension at the specific index.\n *\n * @param options - Initialized grid options.\n *\n * @return A Dimension sub component.\n */\nexport function Dimension( options: GridOptions ): DimensionComponent {\n  /**\n   * Retrieves the dimension array from options.\n   *\n   * @return An array with dimensions that may be empty.\n   */\n  function get(): [ number, number ][] {\n    const { dimensions } = options;\n    return isArray( dimensions ) ? dimensions : [];\n  }\n\n  /**\n   * Returns dimension ([ row, col ]) at the specified index.\n   * If the dimensions option is not available or the index is out of the range,\n   * this keeps returning `[ options.rows, options.cols ]`.\n   *\n   * @param index - An index.\n   *\n   * @return A tuple with rows and cols.\n   */\n  function getAt( index: number ): [ number, number ] {\n    const { rows, cols } = options;\n    const dimensions = get();\n    return dimensions[ index ] || [ rows, cols ];\n  }\n\n  return {\n    getAt,\n  }\n}\n","import { BaseComponent } from '../../types';\nimport { create, find, isHTMLElement, remove } from '../../utils';\n\n/**\n * The interface for the Style component.\n *\n * @since 3.0.0\n */\nexport interface StyleComponent extends BaseComponent {\n  rule( selector: string, prop: string, value: string | number ): void;\n  ruleBy( target: string | HTMLElement, prop: string, value: string | number ): void;\n}\n\n/**\n * The component for managing styles of the slider.\n *\n * @since 3.0.0\n *\n * @return A Style component object.\n */\nexport function Style(): StyleComponent {\n  /**\n   * The style element for the slider.\n   */\n  let style: HTMLStyleElement;\n\n  /**\n   * The CSSStyleSheet object of the created style element.\n   */\n  let sheet: CSSStyleSheet;\n\n  /**\n   * Called when the component is mounted.\n   */\n  function mount(): void {\n    style = create( 'style', {}, document.head );\n    sheet = style.sheet;\n  }\n\n  /**\n   * Destroys the component.\n   */\n  function destroy(): void {\n    remove( style );\n    sheet = null;\n  }\n\n  /**\n   * Registers the style for the selector.\n   *\n   * @param selector - A selector string.\n   * @param prop     - A CSS property, accepting the camel case.\n   * @param value    - A CSS value.\n   */\n  function rule( selector: string, prop: string, value: string | number ): void {\n    const { cssRules } = sheet;\n    const cssRule = find( cssRules, cssRule => isCSSStyleRule( cssRule ) && cssRule.selectorText === selector )\n      || cssRules[ sheet.insertRule( `${ selector }{}`, 0 ) ];\n\n    if ( isCSSStyleRule( cssRule ) ) {\n      cssRule.style[ prop ] = `${ value }`;\n    }\n  }\n\n  /**\n   * Registers the style by the element or the ID.\n   *\n   * @param target - A target element or ID.\n   * @param prop   - A CSS property, accepting the camel case.\n   * @param value  - A CSS value.\n   */\n  function ruleBy( target: string | HTMLElement, prop: string, value: string | number ): void {\n    rule( `#${ isHTMLElement( target ) ? target.id : target }`, prop, value );\n  }\n\n  /**\n   * Checks if the provided rule is a CSSStyleRule instance or not.\n   *\n   * @param cssRule - An instance to check.\n   *\n   * @return `true` if the cssRule is an instance of CSSStyleRule, or otherwise `false`.\n   */\n  function isCSSStyleRule( cssRule: CSSRule ): cssRule is CSSStyleRule {\n    return cssRule instanceof CSSStyleRule;\n  }\n\n  return {\n    mount,\n    destroy,\n    rule,\n    ruleBy,\n  };\n}\n","import { CLASS_CONTAINER, EVENT_HIDDEN, EVENT_VISIBLE, EventInterface, Splide } from '@splidejs/splide';\nimport { SlideComponent } from '@splidejs/splide/src/js/components/Slides/Slide';\nimport { Style as StyleConstructor } from '@splidejs/splide/src/js/components/Style/Style';\nimport { child, pad, queryAll, setAttribute, unit } from '@splidejs/splide/src/js/utils';\nimport { CLASS_SLIDE_COL, CLASS_SLIDE_ROW } from '../../constants/classes';\nimport { GridOptions } from '../../types/options';\nimport { DimensionComponent } from './Dimension';\n\n\n/**\n * The interface for the Layout sub component.\n *\n * @since 0.5.0\n */\nexport interface LayoutComponent {\n  mount(): void;\n  destroy(): void;\n}\n\n/**\n * The sub components to layout grids.\n *\n * @since 0.5.0\n *\n * @param Splide      - A Splide instance.\n * @param gridOptions - Initialized grid options.\n * @param Dimension   - A Dimension sub component.\n *\n * @return A Layout sub component object.\n */\nexport function Layout( Splide: Splide, gridOptions: GridOptions, Dimension: DimensionComponent ): LayoutComponent {\n  const { on, destroy: destroyEvent } = EventInterface( Splide );\n  const { Components, options } = Splide;\n  const { resolve } = Components.Direction;\n  const { forEach } = Components.Slides;\n  const Style = StyleConstructor();\n  const { rule } = Style;\n\n  /**\n   * Initializes the component.\n   */\n  function mount(): void {\n    Style.mount();\n\n    layout();\n\n    if ( options.slideFocus ) {\n      on( EVENT_VISIBLE, onVisible );\n      on( EVENT_HIDDEN, onHidden );\n    }\n  }\n\n  /**\n   * Destroys the component.\n   */\n  function destroy(): void {\n    forEach( Slide => {\n      toggleTabIndex( Slide.slide, false );\n    } );\n\n    Style.destroy();\n    destroyEvent();\n  }\n\n  /**\n   * Layouts grid elements.\n   */\n  function layout(): void {\n    forEach( Slide => {\n      const { slide } = Slide;\n      const [ rows, cols ] = Dimension.getAt( Slide.index );\n      const rowSelector = buildSelector( slide );\n\n      layoutRow( rows, rowSelector );\n      layoutCol( cols, buildSelector( slide, true ) );\n\n      getColsIn( Slide.slide ).forEach( ( colSlide, index ) => {\n        colSlide.id = `${ Slide.slide.id }-col${ pad( index + 1 ) }`;\n        cover( colSlide );\n      } );\n    } );\n  }\n\n  /**\n   * Layouts row elements by CSS.\n   *\n   * @param rows     - A number of rows.\n   * @param selector - A selector.\n   */\n  function layoutRow( rows: number, selector: string ): void {\n    const { row: rowGap } = gridOptions.gap;\n    const height = `calc(${ 100 / rows }%${ rowGap ? ` - ${ unit( rowGap ) } * ${ ( rows - 1 ) / rows }` : '' })`;\n\n    rule( selector, 'height', height );\n    rule( selector, 'display', 'flex' );\n    rule( selector, 'margin', `0 0 ${ unit( rowGap ) } 0` );\n    rule( selector, 'padding', 0 );\n    rule( `${ selector }:last-child`, 'marginBottom', 0 );\n  }\n\n  /**\n   * Layouts col elements by CSS.\n   *\n   * @param cols     - A number of cols.\n   * @param selector - A selector.\n   */\n  function layoutCol( cols: number, selector: string ): void {\n    const { col: colGap } = gridOptions.gap;\n    const width = `calc(${ 100 / cols }%${ colGap ? ` - ${ unit( colGap ) } * ${ ( cols - 1 ) / cols }` : '' })`;\n\n    rule( selector, 'width', width );\n    rule( `${ selector }:not(:last-child)`, resolve( 'marginRight' ), unit( colGap ) );\n  }\n\n  /**\n   * Sets the background image to the col element by its own image element.\n   *\n   * @param colSlide - A col slide element.\n   */\n  function cover( colSlide: HTMLElement ): void {\n    const container = child( colSlide, `.${ CLASS_CONTAINER }` );\n    const img       = child<HTMLImageElement>( container || colSlide, 'img' );\n\n    if ( img && img.src ) {\n      const selector = `#${ colSlide.id }${ container ? ` > .${ CLASS_CONTAINER }` : '' }`;\n      rule( selector, 'background', `center/cover no-repeat url(\"${ img.src }\")` );\n      rule( `${ selector } > img`, 'display', 'none' );\n    }\n  }\n\n  /**\n   * Builds selector for a row or a col in the provided slide.\n   *\n   * @param slide - A slide element.\n   * @param col   - Optional. Determines whether to build a selector for a col or a row.\n   */\n  function buildSelector( slide: HTMLElement, col?: boolean ): string {\n    return `#${ slide.id } > .${ CLASS_SLIDE_ROW }${ col ? ` > .${ CLASS_SLIDE_COL }` : '' }`;\n  }\n\n  /**\n   * Returns col elements in the provided slide.\n   *\n   * @param slide - A slide element.\n   *\n   * @return An array with col elements.\n   */\n  function getColsIn( slide: HTMLElement ): HTMLElement[] {\n    return queryAll( slide.parentElement, buildSelector( slide, true ) );\n  }\n\n  /**\n   * Toggles the tab index of col elements.\n   *\n   * @param slide - A slide element.\n   * @param add   - Optional. Determines whether to add or remove tab index.\n   */\n  function toggleTabIndex( slide: HTMLElement, add?: boolean ): void {\n    getColsIn( slide ).forEach( colSlide => {\n      setAttribute( colSlide, 'tabindex', add ? 0 : null );\n    } );\n  }\n\n  /**\n   * Called when any slide becomes visible.\n   *\n   * @param Slide - A Slide component.\n   */\n  function onVisible( Slide: SlideComponent ): void {\n    toggleTabIndex( Slide.slide, true );\n  }\n\n  /**\n   * Called when any slide gets hidden.\n   *\n   * @param Slide - A Slide component.\n   */\n  function onHidden( Slide: SlideComponent ): void {\n    toggleTabIndex( Slide.slide, false );\n  }\n\n  return {\n    mount,\n    destroy,\n  }\n}\n","import {\n  BaseComponent,\n  CLASS_SLIDE,\n  Components,\n  EVENT_REFRESH,\n  EVENT_UPDATED,\n  EventInterface,\n  Options,\n  Splide,\n} from '@splidejs/splide';\nimport {\n  addClass,\n  append,\n  assign,\n  create,\n  remove,\n  removeClass,\n  isArray,\n  push,\n  empty,\n} from '@splidejs/splide/src/js/utils';\nimport { CLASS_SLIDE_COL, CLASS_SLIDE_ROW } from '../../constants/classes';\nimport { DEFAULTS } from '../../constants/defaults';\nimport { GridOptions } from '../../types/options';\nimport { Dimension as DimensionConstructor } from './Dimension';\nimport { Layout as LayoutConstructor } from './Layout';\n\n\n/**\n * Lets the compiler know the type of video options.\n */\ndeclare module '@splidejs/splide' {\n  interface Options {\n    grid?: GridOptions;\n  }\n}\n\n/**\n * The extension for the grid slider.\n *\n * @todo index after refresh (arrows are disabled)\n * @todo restore slide ID?\n *\n * @since 0.5.0\n *\n * @param Splide     - A Splide instance.\n * @param Components - A collection of components.\n * @param options    - Options.\n *\n * @return A Video component object.\n */\nexport function Grid( Splide: Splide, Components: Components, options: Options ): BaseComponent {\n  const { on, off } = EventInterface( Splide );\n  const { Elements } = Components;\n\n  /**\n   * Options for the extension.\n   */\n  const gridOptions: GridOptions = {};\n\n  /**\n   * The Dimension sub component.\n   */\n  const Dimension = DimensionConstructor( gridOptions );\n\n  /**\n   * The Layout sub component.\n   */\n  const Layout = LayoutConstructor( Splide, gridOptions, Dimension );\n\n  /**\n   * The modifier class to add to the root element.\n   */\n  const modifier = `${ CLASS_SLIDE }--grid`;\n\n  /**\n   * Keeps original slides for restoration.\n   */\n  const originalSlides: HTMLElement[] = [];\n\n  /**\n   * Initializes the grid options.\n   */\n  function setup(): void {\n    options.grid = assign( {}, DEFAULTS, options.grid || {} );\n  }\n\n  /**\n   * Called when the extension is mounted.\n   */\n  function mount(): void {\n    init();\n    on( EVENT_UPDATED, init );\n  }\n\n  /**\n   * Initializes the extension.\n   */\n  function init(): void {\n    assign( gridOptions, options.grid || DEFAULTS );\n\n    if ( hasGrid() ) {\n      push( originalSlides, Elements.slides );\n      addClass( Splide.root, modifier );\n      append( Elements.list, build() );\n      on( EVENT_REFRESH, layout );\n      refresh();\n    } else if ( originalSlides.length ) {\n      destroy();\n      refresh();\n    }\n  }\n\n  /**\n   * Destroys the extension.\n   * Deconstructs grids and restores original slides to the list element.\n   */\n  function destroy(): void {\n    Layout.destroy();\n\n    originalSlides.forEach( slide => {\n      removeClass( slide, CLASS_SLIDE_COL );\n      append( Elements.list, slide );\n    } );\n\n    remove( Elements.slides );\n    removeClass( Splide.root, modifier );\n    empty( originalSlides );\n\n    off( EVENT_REFRESH );\n  }\n\n  /**\n   * Requests to refresh the slider.\n   */\n  function refresh(): void {\n    Splide.refresh();\n  }\n\n  /**\n   * Layouts row and col slides via the Layout sub component.\n   */\n  function layout(): void {\n    if ( hasGrid() ) {\n      Layout.mount();\n    }\n  }\n\n  /**\n   * Builds grid and returns created outer slide elements.\n   *\n   * @return An array with outer slides.\n   */\n  function build(): HTMLElement[] {\n    const outerSlides: HTMLElement[] = [];\n\n    let row = 0, col = 0;\n    let outerSlide: HTMLElement, rowSlide: HTMLElement, colSlide: HTMLElement;\n\n    Components.Slides.forEach( Slide => {\n      const { slide, index } = Slide;\n      const [ rows, cols ] = Dimension.getAt( index );\n\n      if ( ! col ) {\n        if ( ! row ) {\n          outerSlide = create( slide.tagName as any, CLASS_SLIDE ); // todo\n          outerSlides.push( outerSlide );\n        }\n\n        rowSlide = buildRow( rows, slide, outerSlide );\n      }\n\n      colSlide = buildCol( cols, slide, rowSlide );\n\n      if ( ++col >= cols ) {\n        col = 0;\n        row = ++row >= rows ? 0 : row;\n      }\n    }, true );\n\n    return outerSlides;\n  }\n\n  /**\n   * Creates an element for a row.\n   *\n   * @param rows       - A number of rows.\n   * @param slide      - An original slide element.\n   * @param outerSlide - An outer slide element.\n   *\n   * A created element.\n   */\n  function buildRow( rows: number, slide: HTMLElement, outerSlide: HTMLElement ): HTMLElement {\n    const tag = slide.tagName.toLowerCase() === 'li' ? 'ul' : 'div';\n    return create( tag, CLASS_SLIDE_ROW, outerSlide );\n  }\n\n  /**\n   * Creates an element for a col.\n   * Currently, uses the original slide element itself.\n   *\n   * @param cols     - A number of cols.\n   * @param slide    - An original slide element.\n   * @param rowSlide - A row slide element.\n   *\n   * @return A created element.\n   */\n  function buildCol( cols: number, slide: HTMLElement, rowSlide: HTMLElement ): HTMLElement {\n    addClass( slide, CLASS_SLIDE_COL );\n    append( rowSlide, slide );\n    return slide;\n  }\n\n  /**\n   * Checks if the slider has grid or not.\n   *\n   * @return `true` if the slider has grid, or otherwise `false`.\n   */\n  function hasGrid(): boolean {\n    if ( options.grid ) {\n      const { rows, cols, dimensions } = gridOptions;\n      return rows > 1 || cols > 1 || ( isArray( dimensions ) && dimensions.length > 0 );\n    }\n\n    return false;\n  }\n\n  return {\n    setup,\n    mount,\n    destroy,\n  }\n}\n","import { Grid } from '../extensions';\n\n\ndeclare global {\n  interface Window {\n    splide: Record<string, any>;\n  }\n}\n\nif ( typeof window !== 'undefined' ) {\n  window.splide = window.splide || {};\n  window.splide.Extensions = window.splide.Extensions || {};\n  window.splide.Extensions.Grid = Grid;\n}\n"],"names":["PROJECT_CODE","subject","Array","isArray","value","values","iteratee","forEach","CLASS_SLIDE","CLASS_CONTAINER","EVENT_VISIBLE","EVENT_HIDDEN","EVENT_REFRESH","EVENT_UPDATED","EVENT_DESTROY","Splide4","event","key","listeners","events","callback","priority","on","off","targets","options","target","event2","push","addEventListener","filter","listener","removeEventListener","split","bind","data","unbind","offBy","destroy","emit","array","length","isNull2","HTMLElement","isArray2","items","toArray2","arrayProto2","prototype","arrayLike","start","end","slice","call","predicate","slice2","elm","classes","add","name","classList","parent","children3","appendChild","selector","matches","children","matches2","child3","children2","firstElementChild","object","keys","Object","i","sources","source","attrs","removeAttribute","attr","isObject2","value2","removeAttribute2","setAttribute","String","tag","document","createElement","isString2","querySelectorAll","nodes","node","parentNode","removeChild","number","CLASS_SLIDE_ROW","CLASS_SLIDE_COL","DEFAULTS2","rows","cols","dimensions","gap","index","get","getAt","style3","sheet","create2","head","prop","cssRules","cssRule","find2","isCSSStyleRule","cssRule2","selectorText","insertRule","style","isHTMLElement2","id","CSSStyleRule","mount","rule","ruleBy","gridOptions","Dimension2","EventInterface","destroyEvent","Components","resolve","Components2","Direction","Slides","Style3","Style2","slideFocus","onVisible","onHidden","Slide2","slide","rowSelector","buildSelector","colSlide","pad2","rowGap","row","height","unit2","colGap","col","width","container","child2","img","src","queryAll2","parentElement","Elements","Dimension","Layout3","Layout2","modifier","originalSlides","grid","assign2","init","hasGrid","Elements2","slides","root","list","build","layout","refresh","outerSlides","outerSlide","rowSlide","tagName","buildRow","buildCol","toLowerCase","setup","window","splide","Extensions","Grid"],"mappings":";;;;;iGAgBIA,GAAe,qBA4EFC,EAAS,OACjBC,OAAMC,QAAQF,eAmFNG,EAAO,OACfD,IAAQC,GAASA,EAAQ,CAACA,eAUlBC,EAAQC,EAAU,IACzBD,GAAQE,QAAQD,MAkwBtBE,GAAcR,EAAe,UAE7BS,EAAkBD,EAAc,cAkDhCE,GAAgB,UAChBC,GAAe,SAEfC,EAAgB,UAChBC,GAAgB,UAQhBC,GAAgB,qBA2IIC,EAAQ,IAI1BC,GAAQD,EAAOC,MAKfC,EAAM,GAKNC,EAAY,cAWJC,EAAQC,EAAUC,EAAU,GAChCC,GAAGH,EAAQC,EAAUH,EAAKI,cASrBF,EAAQ,GACbI,IAAIJ,EAAQF,cAaNO,EAASL,EAAQC,EAAUK,EAAS,GACnCD,EAASL,EAAQ,SAAUO,EAAQC,EAAO,GAC3CC,KAAK,CAACF,EAAQC,EAAOP,EAAUK,MAClCI,iBAAiBF,EAAOP,EAAUK,gBAW7BD,EAASL,EAAQ,GAClBK,EAASL,EAAQ,SAAUO,EAAQC,EAAO,GACzCT,EAAUY,OAAO,SAAUC,EAAU,OAC3CA,GAAS,KAAOL,GAAUK,EAAS,KAAOJ,KACrCK,oBAAoBL,EAAOI,EAAS,GAAIA,EAAS,IACjD,IAGF,kBAaSP,EAASL,EAAQb,EAAU,IACvCkB,EAAS,SAAUE,EAAQ,CAC7BA,KACKO,MAAM,KAAK1B,QAAQD,EAAS4B,KAAK,KAAMR,kBASjC,GACLR,EAAUY,OAAO,SAAUK,EAAM,OACpCC,GAAOD,EAAK,GAAIA,EAAK,QAExBE,MAAMpB,YAORK,GAAGR,GAAewB,EAASrB,GAC1B,CACLK,GAAAA,EACAC,IAAAA,EACAgB,KAAMvB,EAAMuB,KACZL,KAAAA,EACAE,OAAAA,EACAE,QAAAA,eCtvCmBE,EAAqB,GACpCC,OAAS,cCCSxC,EAAsC,OACvD,CAAEyC,EAAQzC,IAAa,MAAOA,IAAY,oBAUvBA,EAAmC,OACtDC,OAAMC,QAASF,cAqBEA,EAAsC,OACvD,OAAOA,IAAY,oBAqBJA,EAAoC,OACnDA,KAAY,iBAUUA,EAA2C,OACjEA,aAAmB0C,wBChEAvC,EAAsB,OACzCwC,GAASxC,GAAUA,EAAQ,CAAEA,cCFVC,EAAiBC,EAAkE,GACpGD,GAASE,QAASD,eCCJkC,EAAYK,EAAsB,UACnDjB,aAASkB,EAASD,IACjBL,KCPIO,IAAa7C,MAAM8C,qBCMNC,EAAyBC,EAAgBC,EAAoB,OAC9EJ,IAAWK,MAAMC,KAAMJ,EAAWC,EAAOC,eCAhDF,EACAK,EACe,OACRC,GAAON,GAAYnB,OAAQwB,GAAa,cCNpBE,EAAcC,EAA4BC,EAAqB,CACrFF,KACMC,EAAS,WAAQ,CACnBE,KACCC,UAAWF,EAAM,MAAQ,UAAYC,gBCLvBH,EAAcC,EAAmC,GAC5DD,EAAKC,EAAS,eCDLI,EAAiBC,EAAgC,GAC9DA,EAAUD,EAAOE,YAAY7B,KAAM2B,gBCFrBL,EAAcQ,EAA4B,UACnD,mBAAyBR,EAAIS,SAAUZ,KAAMG,EAAKQ,eCGjBH,EAAqBG,EAAwB,OACrFH,GAASN,EAAOM,EAAOK,UAAWpC,OAAQ,kBAASqC,IAASC,EAAOJ,KAAsB,cCFpDH,EAAqBG,EAAmC,OAC7FA,GAAWK,GAAaR,EAAQG,GAAY,GAAMH,EAAOS,6BCHhEC,EACAjE,EACG,IACEiE,SACGC,GAAOC,OAAOD,KAAMD,GAEhBG,EAAI,EAAGA,EAAIF,EAAK/B,OAAQiC,IAAM,IAChCzD,GAAMuD,EAAME,MAEbzD,IAAQ,aACNX,EAAUiE,EAAQtD,GAAOA,KAAU,eAOvCsD,cCSmDA,EAAkC,4BAApBI,mCAAAA,6BAChEpE,QAAS,WAAU,GACjBqE,EAAQ,SAAExE,EAAOa,EAAS,GACxBA,GAAQ2D,EAAQ3D,OAIrBsD,cCjCwBf,EAAcqB,EAAiC,CACzErB,KACMqB,EAAO,WAAQ,GAClBC,gBAAiBC,gBCHzBvB,EACAqB,EACAzE,EACM,CACD4E,GAAUH,KACLA,EAAO,SAAEI,EAAOtB,EAAU,GAClBH,EAAKG,EAAMsB,OAGnB7E,GAAU8E,GAAiB1B,EAAKqB,GAAUrB,EAAI2B,aAAcN,EAAOO,OAAQhF,eCJrFiF,EACAR,EACAhB,EAC4B,IACtBL,GAAM8B,SAASC,cAAeF,SAE/BR,KACEW,EAAUX,IAAWjC,EAASiC,KACvBrB,EAAKqB,KAEDrB,EAAKqB,IAIlBhB,KACKA,EAAQL,GAGXA,cCrB8CK,EAA4BG,EAAwB,OAClGT,GAAUM,EAAO4B,iBAAkBzB,eCJpB0B,EAA6B,GAC1CA,EAAO,WAAQ,CACjBC,GAAQA,EAAKC,cACXA,WAAWC,YAAaF,gBCFNnC,EAAcC,EAAmC,GAC/DD,EAAKC,EAAS,eCCPrD,EAAiC,OAC9CoF,GAAUpF,GAAUA,EAAQA,EAAYA,OAAa,eCLzC0F,EAAyB,OACrCA,GAAS,OAAUA,KAAgBA,KCL/BC,IAAsBvF,UACtBwF,EAAsBxF,UCItByF,GAAwB,CACnCC,KAAY,EACZC,KAAY,EACZC,WAAY,GACZC,IAAY,gBCQa5E,EAA2C,aAM/B,IAC3B2E,GAAe3E,EAAf2E,iBACDxD,GAASwD,GAAeA,EAAa,cAY9BE,EAAoC,IAC1CJ,GAAezE,EAAfyE,KAAMC,EAAS1E,EAAT0E,KACRC,EAAaG,UACZH,GAAYE,IAAW,CAAEJ,EAAMC,SAGjC,CACLK,MAAAA,gBC3BoC,IAIlCC,GAKAC,cAKmB,GACbC,EAAQ,QAAS,GAAIrB,SAASsB,QAC9BH,EAAMC,kBAMS,GACfD,KACA,gBAUKzC,EAAkB6C,EAAczG,EAA+B,OACvDsG,EAAbI,IAAAA,SACFC,EAAUC,GAAMF,EAAU,kBAAWG,GAAgBC,IAAaA,EAAQC,eAAiBnD,KAC5F8C,EAAUJ,EAAMU,WAAgBpD,OAAe,IAE/CiD,EAAgBF,OACXM,MAAOR,MAAazG,cAWfsB,EAA8BmF,EAAczG,EAA+B,OAC/EkH,IAAe5F,GAAWA,EAAO6F,GAAK7F,GAAWmF,EAAMzG,cAU3C2G,EAA4C,OAC5DA,aAAmBS,oBAGrB,CACLC,MAAAA,EACAnF,QAAAA,EACAoF,KAAAA,EACAC,OAAAA,eC5DoB5G,EAAgB6G,EAA0BC,EAAiD,OAC3EC,EAAgB/G,GAA9CO,IAAAA,GAAayG,IAATzF,UACoBvB,EAAxBiH,WAAYvG,EAAYV,EAAZU,QACZwG,EAAYC,EAAWC,UAAvBF,UACYC,EAAWE,OAAvB7H,QACF8H,EAAQC,KACNZ,EAASW,EAATX,iBAKe,GACfD,YAIDhG,EAAQ8G,eACP7H,GAAe8H,KACf7H,GAAc8H,gBAOG,GACd,WAAS,GACAC,EAAMC,MAAO,QAGzBrG,0BAOgB,GACb,WAAS,IACRqG,GAAUD,EAAVC,QACed,EAAUrB,MAAOkC,EAAMpC,OAAtCJ,OAAMC,OACRyC,EAAcC,EAAeF,KAExBzC,EAAM0C,KACNzC,EAAM0C,EAAeF,EAAO,OAE5BD,EAAMC,OAAQpI,QAAS,SAAEuI,EAAUxC,EAAW,GAC9CiB,GAASmB,EAAMC,MAAMpB,UAAWwB,GAAKzC,EAAQ,KAC/CwC,kBAWO5C,EAAclC,EAAyB,IAC5CgF,GAAWpB,EAAYvB,IAA5B4C,IACFC,UAAkB,IAAMhD,MAAU8C,SAAgBG,EAAMH,YAAyB,GAAM9C,EAAU,UAEjGlC,EAAU,SAAUkF,KACpBlF,EAAU,UAAW,UACrBA,EAAU,gBAAkBmF,EAAMH,WAClChF,EAAU,UAAW,KACjBA,gBAAwB,eAAgB,cAShCmC,EAAcnC,EAAyB,IAC5CoF,GAAWxB,EAAYvB,IAA5BgD,IACFC,UAAiB,IAAMnD,MAAUiD,SAAgBD,EAAMC,YAAyB,GAAMjD,EAAU,UAEhGnC,EAAU,QAASsF,KACftF,sBAA8BiE,EAAS,eAAiBkB,EAAMC,eAQ1DN,EAA8B,IACtCS,GAAYC,EAAOV,MAAerI,GAClCgJ,EAAYD,EAAyBD,GAAaT,EAAU,UAE7DW,GAAOA,EAAIC,IAAM,IACd1F,OAAgB8E,EAASvB,GAAOgC,UAAoB9I,EAAqB,MACzEuD,EAAU,4CAA8CyF,EAAIC,YACxD1F,WAAmB,UAAW,oBAUpB2E,EAAoBU,EAAwB,WACtDV,EAAMpB,UAAWxB,GAAoBsD,UAAcrD,EAAqB,eAUlE2C,EAAoC,OAC/CgB,IAAUhB,EAAMiB,cAAef,EAAeF,EAAO,gBASrCA,EAAoBjF,EAAsB,GACtDiF,GAAQpI,QAAS,WAAY,GACxBuI,EAAU,WAAYpF,EAAM,EAAI,mBAS9BgF,EAA8B,GAChCA,EAAMC,MAAO,eAQZD,EAA8B,GAC/BA,EAAMC,MAAO,UAGxB,CACLlB,MAAAA,EACAnF,QAAAA,eCpIkBvB,EAAgBmH,EAAwBzG,EAAkC,OAC1EqG,EAAgB/G,GAA5BO,IAAAA,GAAIC,IAAAA,MACS2G,EAAb2B,SAKFjC,EAA2B,GAK3BC,EAAYiC,GAAsBlC,GAKlCmC,EAASC,GAAmBjJ,EAAQ6G,EAAaC,GAKjDoC,EAAezJ,WAKf0J,EAAgC,eAKf,GACbC,KAAOC,EAAQ,GAAInE,GAAUxE,EAAQ0I,MAAQ,gBAMhC,OAEjBtJ,GAAewJ,eAMC,GACZzC,EAAanG,EAAQ0I,MAAQlE,IAEhCqE,QACGJ,EAAgBK,EAASC,UACrBzJ,EAAO0J,KAAMR,KACfM,EAASG,KAAMC,OACnB/J,EAAegK,QAETV,EAAezH,8BAUJ,GAChBH,YAEQ/B,QAAS,WAAS,GAClBoI,EAAO3C,KACZuE,EAASG,KAAM/B,OAGjB4B,EAASC,UACJzJ,EAAO0J,KAAMR,MACnBC,KAEFtJ,eAMkB,GAChBiK,sBAMe,CACjBP,OACI7C,oBASqB,IACxBqD,GAA6B,GAE/B7B,EAAM,EAAGI,EAAM,EACf0B,EAAyBC,WAElB5C,OAAO7H,QAAS,WAAS,IAC1BoI,GAAiBD,EAAjBC,MAAOrC,EAAUoC,EAAVpC,QACQuB,EAAUrB,MAAOF,GAAhCJ,QAAMC,QAEPkD,GACEJ,OACQtC,EAAQgC,EAAMsC,QAAgBzK,KAC/BoB,KAAMmJ,MAGTG,EAAUhF,GAAMyC,EAAOoC,IAGzBI,EAAUhF,GAAMwC,EAAOqC,GAE7B,EAAE3B,GAAOlD,OACN,IACA,EAAE8C,GAAO/C,GAAO,EAAI+C,IAE3B,IAEI6B,aAYU5E,EAAcyC,EAAoBoC,EAAuC,IACpF1F,GAAMsD,EAAMsC,QAAQG,gBAAkB,KAAO,KAAO,YACnDzE,GAAQtB,EAAKU,GAAiBgF,cAapB5E,EAAcwC,EAAoBqC,EAAqC,UAC9ErC,EAAO3C,KACTgF,EAAUrC,GACXA,cAQmB,IACrBlH,EAAQ0I,KAAO,IACVjE,GAA2B0B,EAA3B1B,KAAMC,EAAqByB,EAArBzB,KAAMC,EAAewB,EAAfxB,iBACbF,GAAO,GAAKC,EAAO,GAAOvD,EAASwD,IAAgBA,EAAW3D,OAAS,QAGzE,SAGF,CACL4I,MAAAA,EACA5D,MAAAA,EACAnF,QAAAA,GC7NC,MAAOgJ,SAAW,qBACdC,OAASD,OAAOC,QAAU,UAC1BA,OAAOC,WAAaF,OAAOC,OAAOC,YAAc,UAChDD,OAAOC,WAAWC,KAAOA;;;;;"}